
mm_cnc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800acec  0800acec  0001acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b328  0800b328  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b330  0800b330  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b334  0800b334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800b338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  20000014  0800b34c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800b34c  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4df  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042ac  00000000  00000000  0003f523  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015d0  00000000  00000000  000437d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b8  00000000  00000000  00044da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000268b6  00000000  00000000  00046158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016be6  00000000  00000000  0006ca0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9086  00000000  00000000  000835f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c67a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005884  00000000  00000000  0015c6f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800acd4 	.word	0x0800acd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800acd4 	.word	0x0800acd4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f00a f88e 	bl	800a61c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000010 	.word	0x20000010
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	2000004c 	.word	0x2000004c

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000004c 	.word	0x2000004c

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b02      	cmp	r3, #2
 8000824:	d004      	beq.n	8000830 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	e00c      	b.n	800084a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2205      	movs	r2, #5
 8000834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f022 0201 	bic.w	r2, r2, #1
 8000846:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	e16b      	b.n	8000b4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000874:	2201      	movs	r2, #1
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	429a      	cmp	r2, r3
 800088e:	f040 815a 	bne.w	8000b46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d003      	beq.n	80008a2 <HAL_GPIO_Init+0x4a>
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d123      	bne.n	80008ea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	08da      	lsrs	r2, r3, #3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3208      	adds	r2, #8
 80008aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	220f      	movs	r2, #15
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	69b9      	ldr	r1, [r7, #24]
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	4013      	ands	r3, r2
 8000900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 0203 	and.w	r2, r3, #3
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d00b      	beq.n	800093e <HAL_GPIO_Init+0xe6>
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d007      	beq.n	800093e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000932:	2b11      	cmp	r3, #17
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b12      	cmp	r3, #18
 800093c:	d130      	bne.n	80009a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4313      	orrs	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000974:	2201      	movs	r2, #1
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	f003 0201 	and.w	r2, r3, #1
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 80b4 	beq.w	8000b46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b5f      	ldr	r3, [pc, #380]	; (8000b60 <HAL_GPIO_Init+0x308>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a5e      	ldr	r2, [pc, #376]	; (8000b60 <HAL_GPIO_Init+0x308>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b5c      	ldr	r3, [pc, #368]	; (8000b60 <HAL_GPIO_Init+0x308>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009fa:	4a5a      	ldr	r2, [pc, #360]	; (8000b64 <HAL_GPIO_Init+0x30c>)
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3302      	adds	r3, #2
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	220f      	movs	r2, #15
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a51      	ldr	r2, [pc, #324]	; (8000b68 <HAL_GPIO_Init+0x310>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d02b      	beq.n	8000a7e <HAL_GPIO_Init+0x226>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a50      	ldr	r2, [pc, #320]	; (8000b6c <HAL_GPIO_Init+0x314>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d025      	beq.n	8000a7a <HAL_GPIO_Init+0x222>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_GPIO_Init+0x318>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d01f      	beq.n	8000a76 <HAL_GPIO_Init+0x21e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4e      	ldr	r2, [pc, #312]	; (8000b74 <HAL_GPIO_Init+0x31c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d019      	beq.n	8000a72 <HAL_GPIO_Init+0x21a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4d      	ldr	r2, [pc, #308]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0x216>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a4c      	ldr	r2, [pc, #304]	; (8000b7c <HAL_GPIO_Init+0x324>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d00d      	beq.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a4b      	ldr	r2, [pc, #300]	; (8000b80 <HAL_GPIO_Init+0x328>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d007      	beq.n	8000a66 <HAL_GPIO_Init+0x20e>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a4a      	ldr	r2, [pc, #296]	; (8000b84 <HAL_GPIO_Init+0x32c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_GPIO_Init+0x20a>
 8000a5e:	2307      	movs	r3, #7
 8000a60:	e00e      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a62:	2308      	movs	r3, #8
 8000a64:	e00c      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a66:	2306      	movs	r3, #6
 8000a68:	e00a      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	e008      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a6e:	2304      	movs	r3, #4
 8000a70:	e006      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a72:	2303      	movs	r3, #3
 8000a74:	e004      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a76:	2302      	movs	r3, #2
 8000a78:	e002      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e000      	b.n	8000a80 <HAL_GPIO_Init+0x228>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	f002 0203 	and.w	r2, r2, #3
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4093      	lsls	r3, r2
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a90:	4934      	ldr	r1, [pc, #208]	; (8000b64 <HAL_GPIO_Init+0x30c>)
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	089b      	lsrs	r3, r3, #2
 8000a96:	3302      	adds	r3, #2
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ac2:	4a31      	ldr	r2, [pc, #196]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000aec:	4a26      	ldr	r2, [pc, #152]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	4013      	ands	r3, r2
 8000b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b1c:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	43db      	mvns	r3, r3
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b38:	69ba      	ldr	r2, [r7, #24]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b40:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_GPIO_Init+0x330>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	2b0f      	cmp	r3, #15
 8000b50:	f67f ae90 	bls.w	8000874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b54:	bf00      	nop
 8000b56:	3724      	adds	r7, #36	; 0x24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40013800 	.word	0x40013800
 8000b68:	40020000 	.word	0x40020000
 8000b6c:	40020400 	.word	0x40020400
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40021400 	.word	0x40021400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	40021c00 	.word	0x40021c00
 8000b88:	40013c00 	.word	0x40013c00

08000b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bd8:	e003      	b.n	8000be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	041a      	lsls	r2, r3, #16
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	619a      	str	r2, [r3, #24]
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	401a      	ands	r2, r3
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d104      	bne.n	8000c12 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c08:	887b      	ldrh	r3, [r7, #2]
 8000c0a:	041a      	lsls	r2, r3, #16
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000c10:	e002      	b.n	8000c18 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	619a      	str	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e22d      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d075      	beq.n	8000d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c42:	4ba3      	ldr	r3, [pc, #652]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d00c      	beq.n	8000c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c4e:	4ba0      	ldr	r3, [pc, #640]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d112      	bne.n	8000c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c5a:	4b9d      	ldr	r3, [pc, #628]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c66:	d10b      	bne.n	8000c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c68:	4b99      	ldr	r3, [pc, #612]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d05b      	beq.n	8000d2c <HAL_RCC_OscConfig+0x108>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d157      	bne.n	8000d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e208      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c88:	d106      	bne.n	8000c98 <HAL_RCC_OscConfig+0x74>
 8000c8a:	4b91      	ldr	r3, [pc, #580]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a90      	ldr	r2, [pc, #576]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e01d      	b.n	8000cd4 <HAL_RCC_OscConfig+0xb0>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ca0:	d10c      	bne.n	8000cbc <HAL_RCC_OscConfig+0x98>
 8000ca2:	4b8b      	ldr	r3, [pc, #556]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a8a      	ldr	r2, [pc, #552]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b88      	ldr	r3, [pc, #544]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a87      	ldr	r2, [pc, #540]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e00b      	b.n	8000cd4 <HAL_RCC_OscConfig+0xb0>
 8000cbc:	4b84      	ldr	r3, [pc, #528]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a83      	ldr	r2, [pc, #524]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b81      	ldr	r3, [pc, #516]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a80      	ldr	r2, [pc, #512]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d013      	beq.n	8000d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc5a 	bl	8000594 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fc56 	bl	8000594 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e1cd      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf6:	4b76      	ldr	r3, [pc, #472]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0xc0>
 8000d02:	e014      	b.n	8000d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc46 	bl	8000594 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0c:	f7ff fc42 	bl	8000594 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b64      	cmp	r3, #100	; 0x64
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e1b9      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1e:	4b6c      	ldr	r3, [pc, #432]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f0      	bne.n	8000d0c <HAL_RCC_OscConfig+0xe8>
 8000d2a:	e000      	b.n	8000d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d063      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3a:	4b65      	ldr	r3, [pc, #404]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d46:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d4e:	2b08      	cmp	r3, #8
 8000d50:	d11c      	bne.n	8000d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d52:	4b5f      	ldr	r3, [pc, #380]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d116      	bne.n	8000d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <HAL_RCC_OscConfig+0x152>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d001      	beq.n	8000d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e18d      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d76:	4b56      	ldr	r3, [pc, #344]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	691b      	ldr	r3, [r3, #16]
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4952      	ldr	r1, [pc, #328]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	e03a      	b.n	8000e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d020      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d94:	4b4f      	ldr	r3, [pc, #316]	; (8000ed4 <HAL_RCC_OscConfig+0x2b0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fbfb 	bl	8000594 <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da0:	e008      	b.n	8000db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da2:	f7ff fbf7 	bl	8000594 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d901      	bls.n	8000db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e16e      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f0      	beq.n	8000da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4940      	ldr	r1, [pc, #256]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
 8000dd4:	e015      	b.n	8000e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <HAL_RCC_OscConfig+0x2b0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fbda 	bl	8000594 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de4:	f7ff fbd6 	bl	8000594 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e14d      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df6:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1f0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d030      	beq.n	8000e70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d016      	beq.n	8000e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <HAL_RCC_OscConfig+0x2b4>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e1c:	f7ff fbba 	bl	8000594 <HAL_GetTick>
 8000e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e22:	e008      	b.n	8000e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e24:	f7ff fbb6 	bl	8000594 <HAL_GetTick>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d901      	bls.n	8000e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	e12d      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d0f0      	beq.n	8000e24 <HAL_RCC_OscConfig+0x200>
 8000e42:	e015      	b.n	8000e70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_RCC_OscConfig+0x2b4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fba3 	bl	8000594 <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	e008      	b.n	8000e64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e52:	f7ff fb9f 	bl	8000594 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e116      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f0      	bne.n	8000e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 80a0 	beq.w	8000fbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10f      	bne.n	8000eae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_RCC_OscConfig+0x2ac>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_RCC_OscConfig+0x2b8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d121      	bne.n	8000efe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_RCC_OscConfig+0x2b8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_RCC_OscConfig+0x2b8>)
 8000ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fb65 	bl	8000594 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	e011      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2ce>
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	42470000 	.word	0x42470000
 8000ed8:	42470e80 	.word	0x42470e80
 8000edc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee0:	f7ff fb58 	bl	8000594 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e0cf      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef2:	4b6a      	ldr	r3, [pc, #424]	; (800109c <HAL_RCC_OscConfig+0x478>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d106      	bne.n	8000f14 <HAL_RCC_OscConfig+0x2f0>
 8000f06:	4b66      	ldr	r3, [pc, #408]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0a:	4a65      	ldr	r2, [pc, #404]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6713      	str	r3, [r2, #112]	; 0x70
 8000f12:	e01c      	b.n	8000f4e <HAL_RCC_OscConfig+0x32a>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d10c      	bne.n	8000f36 <HAL_RCC_OscConfig+0x312>
 8000f1c:	4b60      	ldr	r3, [pc, #384]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f20:	4a5f      	ldr	r2, [pc, #380]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6713      	str	r3, [r2, #112]	; 0x70
 8000f28:	4b5d      	ldr	r3, [pc, #372]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2c:	4a5c      	ldr	r2, [pc, #368]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f2e:	f043 0301 	orr.w	r3, r3, #1
 8000f32:	6713      	str	r3, [r2, #112]	; 0x70
 8000f34:	e00b      	b.n	8000f4e <HAL_RCC_OscConfig+0x32a>
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3a:	4a59      	ldr	r2, [pc, #356]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	6713      	str	r3, [r2, #112]	; 0x70
 8000f42:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f46:	4a56      	ldr	r2, [pc, #344]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f48:	f023 0304 	bic.w	r3, r3, #4
 8000f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d015      	beq.n	8000f82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f56:	f7ff fb1d 	bl	8000594 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fb19 	bl	8000594 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e08e      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f74:	4b4a      	ldr	r3, [pc, #296]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0ee      	beq.n	8000f5e <HAL_RCC_OscConfig+0x33a>
 8000f80:	e014      	b.n	8000fac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f82:	f7ff fb07 	bl	8000594 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f88:	e00a      	b.n	8000fa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f8a:	f7ff fb03 	bl	8000594 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e078      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	4b3f      	ldr	r3, [pc, #252]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ee      	bne.n	8000f8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d105      	bne.n	8000fbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d064      	beq.n	8001090 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d05c      	beq.n	800108c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d141      	bne.n	800105e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_RCC_OscConfig+0x480>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fad8 	bl	8000594 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe8:	f7ff fad4 	bl	8000594 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e04b      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69da      	ldr	r2, [r3, #28]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	019b      	lsls	r3, r3, #6
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	085b      	lsrs	r3, r3, #1
 800101e:	3b01      	subs	r3, #1
 8001020:	041b      	lsls	r3, r3, #16
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	061b      	lsls	r3, r3, #24
 800102a:	491d      	ldr	r1, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_RCC_OscConfig+0x480>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff faad 	bl	8000594 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff faa9 	bl	8000594 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e020      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x41a>
 800105c:	e018      	b.n	8001090 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_RCC_OscConfig+0x480>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fa96 	bl	8000594 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fa92 	bl	8000594 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e009      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_RCC_OscConfig+0x47c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x448>
 800108a:	e001      	b.n	8001090 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40007000 	.word	0x40007000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	42470060 	.word	0x42470060

080010a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0ca      	b.n	8001252 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010bc:	4b67      	ldr	r3, [pc, #412]	; (800125c <HAL_RCC_ClockConfig+0x1b4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d90c      	bls.n	80010e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	4b64      	ldr	r3, [pc, #400]	; (800125c <HAL_RCC_ClockConfig+0x1b4>)
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d2:	4b62      	ldr	r3, [pc, #392]	; (800125c <HAL_RCC_ClockConfig+0x1b4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d001      	beq.n	80010e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0b6      	b.n	8001252 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d020      	beq.n	8001132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010fc:	4b58      	ldr	r3, [pc, #352]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a57      	ldr	r2, [pc, #348]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001114:	4b52      	ldr	r3, [pc, #328]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4a51      	ldr	r2, [pc, #324]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 800111a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800111e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001120:	4b4f      	ldr	r3, [pc, #316]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	494c      	ldr	r1, [pc, #304]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 800112e:	4313      	orrs	r3, r2
 8001130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d044      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b46      	ldr	r3, [pc, #280]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d119      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e07d      	b.n	8001252 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d003      	beq.n	8001166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001162:	2b03      	cmp	r3, #3
 8001164:	d107      	bne.n	8001176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06d      	b.n	8001252 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001176:	4b3a      	ldr	r3, [pc, #232]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e065      	b.n	8001252 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f023 0203 	bic.w	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	4933      	ldr	r1, [pc, #204]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	4313      	orrs	r3, r2
 8001196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001198:	f7ff f9fc 	bl	8000594 <HAL_GetTick>
 800119c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a0:	f7ff f9f8 	bl	8000594 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e04d      	b.n	8001252 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 020c 	and.w	r2, r3, #12
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d1eb      	bne.n	80011a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_RCC_ClockConfig+0x1b4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d20c      	bcs.n	80011f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_RCC_ClockConfig+0x1b4>)
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_RCC_ClockConfig+0x1b4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e030      	b.n	8001252 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	4915      	ldr	r1, [pc, #84]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	490d      	ldr	r1, [pc, #52]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 800122a:	4313      	orrs	r3, r2
 800122c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800122e:	f000 f81d 	bl	800126c <HAL_RCC_GetSysClockFreq>
 8001232:	4601      	mov	r1, r0
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_RCC_ClockConfig+0x1b8>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	5cd3      	ldrb	r3, [r2, r3]
 8001242:	fa21 f303 	lsr.w	r3, r1, r3
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff f95e 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00
 8001260:	40023800 	.word	0x40023800
 8001264:	0800b310 	.word	0x0800b310
 8001268:	20000010 	.word	0x20000010

0800126c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b04      	cmp	r3, #4
 800128c:	d007      	beq.n	800129e <HAL_RCC_GetSysClockFreq+0x32>
 800128e:	2b08      	cmp	r3, #8
 8001290:	d008      	beq.n	80012a4 <HAL_RCC_GetSysClockFreq+0x38>
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 80b4 	bne.w	8001400 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001298:	4b5e      	ldr	r3, [pc, #376]	; (8001414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800129a:	60bb      	str	r3, [r7, #8]
       break;
 800129c:	e0b3      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800129e:	4b5e      	ldr	r3, [pc, #376]	; (8001418 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012a0:	60bb      	str	r3, [r7, #8]
      break;
 80012a2:	e0b0      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012a4:	4b5a      	ldr	r3, [pc, #360]	; (8001410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012ae:	4b58      	ldr	r3, [pc, #352]	; (8001410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d04a      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ba:	4b55      	ldr	r3, [pc, #340]	; (8001410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	099b      	lsrs	r3, r3, #6
 80012c0:	f04f 0400 	mov.w	r4, #0
 80012c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	ea03 0501 	and.w	r5, r3, r1
 80012d0:	ea04 0602 	and.w	r6, r4, r2
 80012d4:	4629      	mov	r1, r5
 80012d6:	4632      	mov	r2, r6
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	f04f 0400 	mov.w	r4, #0
 80012e0:	0154      	lsls	r4, r2, #5
 80012e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012e6:	014b      	lsls	r3, r1, #5
 80012e8:	4619      	mov	r1, r3
 80012ea:	4622      	mov	r2, r4
 80012ec:	1b49      	subs	r1, r1, r5
 80012ee:	eb62 0206 	sbc.w	r2, r2, r6
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	f04f 0400 	mov.w	r4, #0
 80012fa:	0194      	lsls	r4, r2, #6
 80012fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001300:	018b      	lsls	r3, r1, #6
 8001302:	1a5b      	subs	r3, r3, r1
 8001304:	eb64 0402 	sbc.w	r4, r4, r2
 8001308:	f04f 0100 	mov.w	r1, #0
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	00e2      	lsls	r2, r4, #3
 8001312:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001316:	00d9      	lsls	r1, r3, #3
 8001318:	460b      	mov	r3, r1
 800131a:	4614      	mov	r4, r2
 800131c:	195b      	adds	r3, r3, r5
 800131e:	eb44 0406 	adc.w	r4, r4, r6
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	0262      	lsls	r2, r4, #9
 800132c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001330:	0259      	lsls	r1, r3, #9
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	4618      	mov	r0, r3
 8001338:	4621      	mov	r1, r4
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f04f 0400 	mov.w	r4, #0
 8001340:	461a      	mov	r2, r3
 8001342:	4623      	mov	r3, r4
 8001344:	f7fe ff40 	bl	80001c8 <__aeabi_uldivmod>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e049      	b.n	80013e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	f04f 0400 	mov.w	r4, #0
 800135a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	ea03 0501 	and.w	r5, r3, r1
 8001366:	ea04 0602 	and.w	r6, r4, r2
 800136a:	4629      	mov	r1, r5
 800136c:	4632      	mov	r2, r6
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	f04f 0400 	mov.w	r4, #0
 8001376:	0154      	lsls	r4, r2, #5
 8001378:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800137c:	014b      	lsls	r3, r1, #5
 800137e:	4619      	mov	r1, r3
 8001380:	4622      	mov	r2, r4
 8001382:	1b49      	subs	r1, r1, r5
 8001384:	eb62 0206 	sbc.w	r2, r2, r6
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	f04f 0400 	mov.w	r4, #0
 8001390:	0194      	lsls	r4, r2, #6
 8001392:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001396:	018b      	lsls	r3, r1, #6
 8001398:	1a5b      	subs	r3, r3, r1
 800139a:	eb64 0402 	sbc.w	r4, r4, r2
 800139e:	f04f 0100 	mov.w	r1, #0
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	00e2      	lsls	r2, r4, #3
 80013a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013ac:	00d9      	lsls	r1, r3, #3
 80013ae:	460b      	mov	r3, r1
 80013b0:	4614      	mov	r4, r2
 80013b2:	195b      	adds	r3, r3, r5
 80013b4:	eb44 0406 	adc.w	r4, r4, r6
 80013b8:	f04f 0100 	mov.w	r1, #0
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	02a2      	lsls	r2, r4, #10
 80013c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013c6:	0299      	lsls	r1, r3, #10
 80013c8:	460b      	mov	r3, r1
 80013ca:	4614      	mov	r4, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	4621      	mov	r1, r4
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f04f 0400 	mov.w	r4, #0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4623      	mov	r3, r4
 80013da:	f7fe fef5 	bl	80001c8 <__aeabi_uldivmod>
 80013de:	4603      	mov	r3, r0
 80013e0:	460c      	mov	r4, r1
 80013e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	3301      	adds	r3, #1
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fc:	60bb      	str	r3, [r7, #8]
      break;
 80013fe:	e002      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001400:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001402:	60bb      	str	r3, [r7, #8]
      break;
 8001404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001406:	68bb      	ldr	r3, [r7, #8]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	00f42400 	.word	0x00f42400
 8001418:	007a1200 	.word	0x007a1200

0800141c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_RCC_GetHCLKFreq+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000010 	.word	0x20000010

08001434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001438:	f7ff fff0 	bl	800141c <HAL_RCC_GetHCLKFreq>
 800143c:	4601      	mov	r1, r0
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	0a9b      	lsrs	r3, r3, #10
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	0800b320 	.word	0x0800b320

0800145c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001460:	f7ff ffdc 	bl	800141c <HAL_RCC_GetHCLKFreq>
 8001464:	4601      	mov	r1, r0
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	0b5b      	lsrs	r3, r3, #13
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	4a03      	ldr	r2, [pc, #12]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	0800b320 	.word	0x0800b320

08001484 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d035      	beq.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80014ac:	4b62      	ldr	r3, [pc, #392]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014b2:	f7ff f86f 	bl	8000594 <HAL_GetTick>
 80014b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014ba:	f7ff f86b 	bl	8000594 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0b0      	b.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80014cc:	4b5b      	ldr	r3, [pc, #364]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	019a      	lsls	r2, r3, #6
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	071b      	lsls	r3, r3, #28
 80014e4:	4955      	ldr	r1, [pc, #340]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80014ec:	4b52      	ldr	r3, [pc, #328]	; (8001638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80014f2:	f7ff f84f 	bl	8000594 <HAL_GetTick>
 80014f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80014fa:	f7ff f84b 	bl	8000594 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e090      	b.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800150c:	4b4b      	ldr	r3, [pc, #300]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 8083 	beq.w	800162c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b44      	ldr	r3, [pc, #272]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a43      	ldr	r2, [pc, #268]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a3e      	ldr	r2, [pc, #248]	; (8001640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800154e:	f7ff f821 	bl	8000594 <HAL_GetTick>
 8001552:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001554:	e008      	b.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001556:	f7ff f81d 	bl	8000594 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e062      	b.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001568:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800157c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d02f      	beq.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	429a      	cmp	r2, r3
 8001590:	d028      	beq.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800159a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80015a8:	4a24      	ldr	r2, [pc, #144]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d114      	bne.n	80015e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80015ba:	f7fe ffeb 	bl	8000594 <HAL_GetTick>
 80015be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7fe ffe7 	bl	8000594 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e02a      	b.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ee      	beq.n	80015c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015f0:	d10d      	bne.n	800160e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
 800160c:	e005      	b.n	800161a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001614:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001618:	6093      	str	r3, [r2, #8]
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800161c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001626:	4905      	ldr	r1, [pc, #20]	; (800163c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001628:	4313      	orrs	r3, r2
 800162a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	42470068 	.word	0x42470068
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000
 8001644:	42470e40 	.word	0x42470e40

08001648 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e083      	b.n	8001762 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7f5b      	ldrb	r3, [r3, #29]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f008 fc56 	bl	8009f1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	22ca      	movs	r2, #202	; 0xca
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2253      	movs	r2, #83	; 0x53
 8001684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f9fb 	bl	8001a82 <RTC_EnterInitMode>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2204      	movs	r2, #4
 800169e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e05e      	b.n	8001762 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80016b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6899      	ldr	r1, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68d2      	ldr	r2, [r2, #12]
 80016de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6919      	ldr	r1, [r3, #16]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	041a      	lsls	r2, r3, #16
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001702:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10e      	bne.n	8001730 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f98d 	bl	8001a32 <HAL_RTC_WaitForSynchro>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d008      	beq.n	8001730 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	22ff      	movs	r2, #255	; 0xff
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2204      	movs	r2, #4
 800172a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e018      	b.n	8001762 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	22ff      	movs	r2, #255	; 0xff
 8001758:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001760:	2300      	movs	r3, #0
  }
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800176a:	b590      	push	{r4, r7, lr}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	7f1b      	ldrb	r3, [r3, #28]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_RTC_SetTime+0x1c>
 8001782:	2302      	movs	r3, #2
 8001784:	e0aa      	b.n	80018dc <HAL_RTC_SetTime+0x172>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2202      	movs	r2, #2
 8001790:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d126      	bne.n	80017e6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2200      	movs	r2, #0
 80017aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f992 	bl	8001ada <RTC_ByteToBcd2>
 80017b6:	4603      	mov	r3, r0
 80017b8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	785b      	ldrb	r3, [r3, #1]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f98b 	bl	8001ada <RTC_ByteToBcd2>
 80017c4:	4603      	mov	r3, r0
 80017c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80017c8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	789b      	ldrb	r3, [r3, #2]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f983 	bl	8001ada <RTC_ByteToBcd2>
 80017d4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80017d6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	78db      	ldrb	r3, [r3, #3]
 80017de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e018      	b.n	8001818 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2200      	movs	r2, #0
 80017f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001806:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800180c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	78db      	ldrb	r3, [r3, #3]
 8001812:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001814:	4313      	orrs	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	22ca      	movs	r2, #202	; 0xca
 800181e:	625a      	str	r2, [r3, #36]	; 0x24
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2253      	movs	r2, #83	; 0x53
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f92a 	bl	8001a82 <RTC_EnterInitMode>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00b      	beq.n	800184c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2204      	movs	r2, #4
 8001840:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e047      	b.n	80018dc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001856:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800185a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800186a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6899      	ldr	r1, [r3, #8]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	431a      	orrs	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001892:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d111      	bne.n	80018c6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f8c5 	bl	8001a32 <HAL_RTC_WaitForSynchro>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	22ff      	movs	r2, #255	; 0xff
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2204      	movs	r2, #4
 80018ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00a      	b.n	80018dc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	22ff      	movs	r2, #255	; 0xff
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80018da:	2300      	movs	r3, #0
  }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}

080018e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	7f1b      	ldrb	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_RTC_SetDate+0x1c>
 80018fc:	2302      	movs	r3, #2
 80018fe:	e094      	b.n	8001a2a <HAL_RTC_SetDate+0x146>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2202      	movs	r2, #2
 800190a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10e      	bne.n	8001930 <HAL_RTC_SetDate+0x4c>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	785b      	ldrb	r3, [r3, #1]
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	785b      	ldrb	r3, [r3, #1]
 8001922:	f023 0310 	bic.w	r3, r3, #16
 8001926:	b2db      	uxtb	r3, r3
 8001928:	330a      	adds	r3, #10
 800192a:	b2da      	uxtb	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11c      	bne.n	8001970 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	78db      	ldrb	r3, [r3, #3]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f8cd 	bl	8001ada <RTC_ByteToBcd2>
 8001940:	4603      	mov	r3, r0
 8001942:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	785b      	ldrb	r3, [r3, #1]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f8c6 	bl	8001ada <RTC_ByteToBcd2>
 800194e:	4603      	mov	r3, r0
 8001950:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001952:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	789b      	ldrb	r3, [r3, #2]
 8001958:	4618      	mov	r0, r3
 800195a:	f000 f8be 	bl	8001ada <RTC_ByteToBcd2>
 800195e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001960:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800196a:	4313      	orrs	r3, r2
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e00e      	b.n	800198e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	78db      	ldrb	r3, [r3, #3]
 8001974:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800197c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001982:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	22ca      	movs	r2, #202	; 0xca
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2253      	movs	r2, #83	; 0x53
 800199c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f86f 	bl	8001a82 <RTC_EnterInitMode>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	22ff      	movs	r2, #255	; 0xff
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2204      	movs	r2, #4
 80019b6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e033      	b.n	8001a2a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80019cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80019d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d111      	bne.n	8001a14 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f81e 	bl	8001a32 <HAL_RTC_WaitForSynchro>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00b      	beq.n	8001a14 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2204      	movs	r2, #4
 8001a08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e00a      	b.n	8001a2a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	22ff      	movs	r2, #255	; 0xff
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
  }
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}

08001a32 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a4e:	f7fe fda1 	bl	8000594 <HAL_GetTick>
 8001a52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001a54:	e009      	b.n	8001a6a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a56:	f7fe fd9d 	bl	8000594 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a64:	d901      	bls.n	8001a6a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e007      	b.n	8001a7a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ee      	beq.n	8001a56 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d119      	bne.n	8001ad0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001aa6:	f7fe fd75 	bl	8000594 <HAL_GetTick>
 8001aaa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001aac:	e009      	b.n	8001ac2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001aae:	f7fe fd71 	bl	8000594 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001abc:	d901      	bls.n	8001ac2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e007      	b.n	8001ad2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0ee      	beq.n	8001aae <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8001ae8:	e005      	b.n	8001af6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	3b0a      	subs	r3, #10
 8001af4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d8f6      	bhi.n	8001aea <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b2db      	uxtb	r3, r3
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e01d      	b.n	8001b64 <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f008 fcfe 	bl	800a53c <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f80f 	bl	8001b6c <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b08e      	sub	sp, #56	; 0x38
 8001b70:	af04      	add	r7, sp, #16
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001b8c:	2376      	movs	r3, #118	; 0x76
 8001b8e:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681d      	ldr	r5, [r3, #0]
 8001b94:	466c      	mov	r4, sp
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ba8:	4628      	mov	r0, r5
 8001baa:	f002 fcbf 	bl	800452c <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_SD_InitCard+0xb4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fd00 	bl	80045be <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_SD_InitCard+0xb4>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7fe fcf1 	bl	80005ac <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f001 f8d5 	bl	8002d7a <SD_PowerON>
 8001bd0:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e013      	b.n	8001c18 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fff9 	bl	8002be8 <SD_InitCard>
 8001bf6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c20:	422580a0 	.word	0x422580a0

08001c24 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b08f      	sub	sp, #60	; 0x3c
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8001c36:	f7fe fcad 	bl	8000594 <HAL_GetTick>
 8001c3a:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e177      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	f040 816a 	bne.w	8001f3c <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	441a      	add	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d907      	bls.n	8001c8c <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e15e      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2203      	movs	r2, #3
 8001c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d002      	beq.n	8001caa <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	025b      	lsls	r3, r3, #9
 8001ca8:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fd17 	bl	80046e6 <SDMMC_CmdBlockLength>
 8001cb8:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e133      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	025b      	lsls	r3, r3, #9
 8001cec:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001cee:	2390      	movs	r3, #144	; 0x90
 8001cf0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f107 0210 	add.w	r2, r7, #16
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 fcc0 	bl	800468e <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d90a      	bls.n	8001d2a <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2202      	movs	r2, #2
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fd28 	bl	8004776 <SDMMC_CmdReadMultiBlock>
 8001d26:	6378      	str	r0, [r7, #52]	; 0x34
 8001d28:	e009      	b.n	8001d3e <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fcf9 	bl	800472e <SDMMC_CmdReadSingleBlock>
 8001d3c:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d04a      	beq.n	8001dda <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d54:	431a      	orrs	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0f1      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d016      	beq.n	8001da2 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
 8001d78:	e00d      	b.n	8001d96 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6819      	ldr	r1, [r3, #0]
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d84:	18d4      	adds	r4, r2, r3
 8001d86:	4608      	mov	r0, r1
 8001d88:	f002 fbfb 	bl	8004582 <SDIO_ReadFIFO>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8001d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d92:	3301      	adds	r3, #1
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
 8001d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d9ee      	bls.n	8001d7a <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	3320      	adds	r3, #32
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <HAL_SD_ReadBlocks+0x194>
 8001da8:	f7fe fbf4 	bl	8000594 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d810      	bhi.n	8001dda <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e0b7      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de0:	f240 332a 	movw	r3, #810	; 0x32a
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0bd      	beq.n	8001d66 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_SD_ReadBlocks+0x216>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d91d      	bls.n	8001e3a <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d019      	beq.n	8001e3a <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fd20 	bl	8004850 <SDMMC_CmdStopTransfer>
 8001e10:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d010      	beq.n	8001e3a <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e087      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	f043 0208 	orr.w	r2, r3, #8
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06f      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001e80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	f043 0202 	orr.w	r2, r3, #2
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e057      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	f003 0320 	and.w	r3, r3, #32
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d037      	beq.n	8001f18 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	f043 0220 	orr.w	r2, r3, #32
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e03f      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fb57 	bl	8004582 <SDIO_ReadFIFO>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	3304      	adds	r3, #4
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d007      	beq.n	8001ef6 <HAL_SD_ReadBlocks+0x2d2>
 8001ee6:	f7fe fb55 	bl	8000594 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d810      	bhi.n	8001f18 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e018      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1d1      	bne.n	8001eca <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001f2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e006      	b.n	8001f4a <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	373c      	adds	r7, #60	; 0x3c
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}

08001f52 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b08e      	sub	sp, #56	; 0x38
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8001f64:	f7fe fb16 	bl	8000594 <HAL_GetTick>
 8001f68:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d107      	bne.n	8001f88 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e148      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	f040 813b 	bne.w	800220c <HAL_SD_WriteBlocks+0x2ba>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d907      	bls.n	8001fba <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e12f      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d002      	beq.n	8001fd8 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	025b      	lsls	r3, r3, #9
 8001fd6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f002 fb80 	bl	80046e6 <SDMMC_CmdBlockLength>
 8001fe6:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ff6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffe:	431a      	orrs	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e104      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d90a      	bls.n	800202c <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	f002 fbef 	bl	8004806 <SDMMC_CmdWriteMultiBlock>
 8002028:	6378      	str	r0, [r7, #52]	; 0x34
 800202a:	e009      	b.n	8002040 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2210      	movs	r2, #16
 8002030:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fbc0 	bl	80047be <SDMMC_CmdWriteSingleBlock>
 800203e:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	2b00      	cmp	r3, #0
 8002044:	d010      	beq.n	8002068 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002056:	431a      	orrs	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0d8      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	025b      	lsls	r3, r3, #9
 8002072:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002074:	2390      	movs	r3, #144	; 0x90
 8002076:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002080:	2301      	movs	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f107 0210 	add.w	r2, r7, #16
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f002 fafd 	bl	800468e <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002094:	e037      	b.n	8002106 <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d014      	beq.n	80020ce <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	633b      	str	r3, [r7, #48]	; 0x30
 80020a8:	e00b      	b.n	80020c2 <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b4:	4413      	add	r3, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f002 fa70 	bl	800459c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	3301      	adds	r3, #1
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	2b07      	cmp	r3, #7
 80020c6:	d9f0      	bls.n	80020aa <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	3320      	adds	r3, #32
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80020ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_SD_WriteBlocks+0x192>
 80020d4:	f7fe fa5e 	bl	8000594 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d810      	bhi.n	8002106 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e089      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210c:	f240 331a 	movw	r3, #794	; 0x31a
 8002110:	4013      	ands	r3, r2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0bf      	beq.n	8002096 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_SD_WriteBlocks+0x214>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d91d      	bls.n	8002166 <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	2b03      	cmp	r3, #3
 8002130:	d019      	beq.n	8002166 <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f002 fb8a 	bl	8004850 <SDMMC_CmdStopTransfer>
 800213c:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002154:	431a      	orrs	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e059      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800217c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	f043 0208 	orr.w	r2, r3, #8
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e041      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d010      	beq.n	80021c6 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80021ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	f043 0202 	orr.w	r2, r3, #2
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e029      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_SD_WriteBlocks+0x2a4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	f043 0210 	orr.w	r2, r3, #16
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e011      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e006      	b.n	800221a <HAL_SD_WriteBlocks+0x2c8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	3738      	adds	r7, #56	; 0x38
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDIO interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 808d 	beq.w	800235a <HAL_SD_IRQHandler+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
    
#ifdef SDIO_STA_STBITERR
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002258:	f023 0302 	bic.w	r3, r3, #2
 800225c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);
#endif
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03a      	beq.n	80022e0 <HAL_SD_IRQHandler+0xbc>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d105      	bne.n	8002282 <HAL_SD_IRQHandler+0x5e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	d011      	beq.n	80022a6 <HAL_SD_IRQHandler+0x82>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fae2 	bl	8004850 <SDMMC_CmdStopTransfer>
 800228c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d008      	beq.n	80022a6 <HAL_SD_IRQHandler+0x82>
        {
          hsd->ErrorCode |= errorstate;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f925 	bl	80024f0 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_SD_IRQHandler+0xac>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_SD_IRQHandler+0xb4>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f002 ff7b 	bl	80051cc <HAL_SD_RxCpltCallback>
      hsd->State = HAL_SD_STATE_READY;
      HAL_SD_ErrorCallback(hsd);
    }
  }
#endif
}
 80022d6:	e103      	b.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
        HAL_SD_TxCpltCallback(hsd);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f002 ff6d 	bl	80051b8 <HAL_SD_TxCpltCallback>
}
 80022de:	e0ff      	b.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80f9 	beq.w	80024e0 <HAL_SD_IRQHandler+0x2bc>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d011      	beq.n	800231e <HAL_SD_IRQHandler+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 faa6 	bl	8004850 <SDMMC_CmdStopTransfer>
 8002304:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_SD_IRQHandler+0xfa>
          hsd->ErrorCode |= errorstate;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f8e9 	bl	80024f0 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80da 	bne.w	80024e0 <HAL_SD_IRQHandler+0x2bc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 80d3 	bne.w	80024e0 <HAL_SD_IRQHandler+0x2bc>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0208 	bic.w	r2, r2, #8
 8002348:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f002 ff30 	bl	80051b8 <HAL_SD_TxCpltCallback>
}
 8002358:	e0c2      	b.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_SD_IRQHandler+0x156>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 ff5e 	bl	8003234 <SD_Write_IT>
}
 8002378:	e0b2      	b.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_SD_IRQHandler+0x176>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 ff26 	bl	80031e4 <SD_Read_IT>
}
 8002398:	e0a2      	b.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a0:	f240 233a 	movw	r3, #570	; 0x23a
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 809a 	beq.w	80024e0 <HAL_SD_IRQHandler+0x2bc>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	f043 0202 	orr.w	r2, r3, #2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	f043 0208 	orr.w	r2, r3, #8
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	f043 0220 	orr.w	r2, r3, #32
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	f043 0210 	orr.w	r2, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_SD_IRQHandler+0x20a>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	f043 0208 	orr.w	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002436:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8002446:	f023 0302 	bic.w	r3, r3, #2
 800244a:	63d3      	str	r3, [r2, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	d036      	beq.n	80024c6 <HAL_SD_IRQHandler+0x2a2>
      if(hsd->hdmatx != NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d011      	beq.n	8002484 <HAL_SD_IRQHandler+0x260>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_SD_IRQHandler+0x2c4>)
 8002466:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f9d0 	bl	8000812 <HAL_DMA_Abort_IT>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d033      	beq.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMATxAbort(hsd->hdmatx);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fb37 	bl	8002af0 <SD_DMATxAbort>
}
 8002482:	e02d      	b.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
      else if(hsd->hdmarx != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	2b00      	cmp	r3, #0
 800248a:	d011      	beq.n	80024b0 <HAL_SD_IRQHandler+0x28c>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002490:	4a16      	ldr	r2, [pc, #88]	; (80024ec <HAL_SD_IRQHandler+0x2c8>)
 8002492:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe f9ba 	bl	8000812 <HAL_DMA_Abort_IT>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01d      	beq.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
          SD_DMARxAbort(hsd->hdmarx);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fb5f 	bl	8002b6c <SD_DMARxAbort>
}
 80024ae:	e017      	b.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f002 fe70 	bl	80051a4 <HAL_SD_AbortCallback>
}
 80024c4:	e00c      	b.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <HAL_SD_IRQHandler+0x2bc>
      hsd->State = HAL_SD_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f808 	bl	80024f0 <HAL_SD_ErrorCallback>
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	08002af1 	.word	0x08002af1
 80024ec:	08002b6d 	.word	0x08002b6d

080024f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002516:	0e1b      	lsrs	r3, r3, #24
 8002518:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	b2da      	uxtb	r2, r3
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	b2da      	uxtb	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	b2da      	uxtb	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	b2db      	uxtb	r3, r3
 8002550:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b2db      	uxtb	r3, r3
 8002562:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002570:	b2db      	uxtb	r3, r3
 8002572:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002580:	0e1b      	lsrs	r3, r3, #24
 8002582:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	b29b      	uxth	r3, r3
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	b29a      	uxth	r2, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002594:	0c1b      	lsrs	r3, r3, #16
 8002596:	b2db      	uxtb	r3, r3
 8002598:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	88db      	ldrh	r3, [r3, #6]
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	09db      	lsrs	r3, r3, #7
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8087 	bne.w	800272a <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	029b      	lsls	r3, r3, #10
 8002620:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800262c:	b2db      	uxtb	r3, r3
 800262e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	431a      	orrs	r2, r3
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	0e1b      	lsrs	r3, r3, #24
 8002644:	b2db      	uxtb	r3, r3
 8002646:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	431a      	orrs	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	b2da      	uxtb	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	b2da      	uxtb	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	b2db      	uxtb	r3, r3
 8002680:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	b2da      	uxtb	r2, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	b2da      	uxtb	r2, r3
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 0306 	and.w	r3, r3, #6
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	7e1b      	ldrb	r3, [r3, #24]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	09db      	lsrs	r3, r3, #7
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4313      	orrs	r3, r2
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	7e1b      	ldrb	r3, [r3, #24]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	3302      	adds	r3, #2
 80026ea:	2201      	movs	r2, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80026f4:	fb02 f203 	mul.w	r2, r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	7a1b      	ldrb	r3, [r3, #8]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	2301      	movs	r3, #1
 8002706:	fa03 f202 	lsl.w	r2, r3, r2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002716:	0a52      	lsrs	r2, r2, #9
 8002718:	fb02 f203 	mul.w	r2, r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002726:	661a      	str	r2, [r3, #96]	; 0x60
 8002728:	e04d      	b.n	80027c6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	2b01      	cmp	r3, #1
 8002730:	d138      	bne.n	80027a4 <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002736:	b2db      	uxtb	r3, r3
 8002738:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800274a:	0e1b      	lsrs	r3, r3, #24
 800274c:	b2db      	uxtb	r3, r3
 800274e:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	431a      	orrs	r2, r3
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002762:	0c1b      	lsrs	r3, r3, #16
 8002764:	b2db      	uxtb	r3, r3
 8002766:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	431a      	orrs	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b2db      	uxtb	r3, r3
 800277c:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	3301      	adds	r3, #1
 8002784:	029a      	lsls	r2, r3, #10
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002798:	659a      	str	r2, [r3, #88]	; 0x58
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	661a      	str	r2, [r3, #96]	; 0x60
 80027a2:	e010      	b.n	80027c6 <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0c1      	b.n	800294a <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	7e9b      	ldrb	r3, [r3, #26]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	09db      	lsrs	r3, r3, #7
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4313      	orrs	r3, r2
 8002804:	b2da      	uxtb	r2, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002812:	b2da      	uxtb	r2, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	0e1b      	lsrs	r3, r3, #24
 800281e:	b2db      	uxtb	r3, r3
 8002820:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	09db      	lsrs	r3, r3, #7
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	b2da      	uxtb	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	b2da      	uxtb	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f003 030c 	and.w	r3, r3, #12
 800285e:	b2da      	uxtb	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	7fdb      	ldrb	r3, [r3, #31]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	4313      	orrs	r3, r2
 8002882:	b2da      	uxtb	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	b2da      	uxtb	r2, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	09db      	lsrs	r3, r3, #7
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	091b      	lsrs	r3, r3, #4
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	b2da      	uxtb	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	b2da      	uxtb	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	b2db      	uxtb	r3, r3
 800292c:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	085b      	lsrs	r3, r3, #1
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002938:	b2da      	uxtb	r2, r3
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80029ae:	b5b0      	push	{r4, r5, r7, lr}
 80029b0:	b08e      	sub	sp, #56	; 0x38
 80029b2:	af04      	add	r7, sp, #16
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d02e      	beq.n	8002a2a <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	d106      	bne.n	80029e2 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	639a      	str	r2, [r3, #56]	; 0x38
 80029e0:	e029      	b.n	8002a36 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029e8:	d10a      	bne.n	8002a00 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 fa97 	bl	8002f1e <SD_WideBus_Enable>
 80029f0:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	639a      	str	r2, [r3, #56]	; 0x38
 80029fe:	e01a      	b.n	8002a36 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fad6 	bl	8002fb8 <SD_WideBus_Disable>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
 8002a1a:	e00c      	b.n	8002a36 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
 8002a28:	e005      	b.n	8002a36 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002a46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e024      	b.n	8002a9e <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681d      	ldr	r5, [r3, #0]
 8002a7a:	466c      	mov	r4, sp
 8002a7c:	f107 0318 	add.w	r3, r7, #24
 8002a80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f001 fd4c 	bl	800452c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3728      	adds	r7, #40	; 0x28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bdb0      	pop	{r4, r5, r7, pc}

08002aa6 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fa02 	bl	8002eca <SD_SendStatus>
 8002ac6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	0a5b      	lsrs	r3, r3, #9
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d127      	bne.n	8002b64 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff ffc6 	bl	8002aa6 <HAL_SD_GetCardState>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d002      	beq.n	8002b38 <SD_DMATxAbort+0x48>
 8002b32:	7afb      	ldrb	r3, [r7, #11]
 8002b34:	2b05      	cmp	r3, #5
 8002b36:	d115      	bne.n	8002b64 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 fe87 	bl	8004850 <SDMMC_CmdStopTransfer>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f002 fb24 	bl	80051a4 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8002b5c:	e002      	b.n	8002b64 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff fcc6 	bl	80024f0 <HAL_SD_ErrorCallback>
}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b78:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d127      	bne.n	8002be0 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f7ff ff88 	bl	8002aa6 <HAL_SD_GetCardState>
 8002b96:	4603      	mov	r3, r0
 8002b98:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	2b06      	cmp	r3, #6
 8002bac:	d002      	beq.n	8002bb4 <SD_DMARxAbort+0x48>
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d115      	bne.n	8002be0 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 fe49 	bl	8004850 <SDMMC_CmdStopTransfer>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f002 fae6 	bl	80051a4 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8002bd8:	e002      	b.n	8002be0 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff fc88 	bl	80024f0 <HAL_SD_ErrorCallback>
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b094      	sub	sp, #80	; 0x50
 8002bec:	af04      	add	r7, sp, #16
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f001 fcec 	bl	80045da <SDIO_GetPowerState>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002c08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c0c:	e0b1      	b.n	8002d72 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d02f      	beq.n	8002c76 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 ff32 	bl	8004a84 <SDMMC_CmdSendCID>
 8002c20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <SD_InitCard+0x44>
    {
      return errorstate;
 8002c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2a:	e0a2      	b.n	8002d72 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fd16 	bl	8004664 <SDIO_GetResponse>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2104      	movs	r1, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 fd0d 	bl	8004664 <SDIO_GetResponse>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2108      	movs	r1, #8
 8002c56:	4618      	mov	r0, r3
 8002c58:	f001 fd04 	bl	8004664 <SDIO_GetResponse>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	210c      	movs	r1, #12
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 fcfb 	bl	8004664 <SDIO_GetResponse>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d00d      	beq.n	8002c9a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f107 020e 	add.w	r2, r7, #14
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 ff3c 	bl	8004b06 <SDMMC_CmdSetRelAdd>
 8002c8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <SD_InitCard+0xb2>
    {
      return errorstate;
 8002c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c98:	e06b      	b.n	8002d72 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d036      	beq.n	8002d10 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002ca2:	89fb      	ldrh	r3, [r7, #14]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f001 ff04 	bl	8004ac4 <SDMMC_CmdSendCSD>
 8002cbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <SD_InitCard+0xe0>
    {
      return errorstate;
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc6:	e054      	b.n	8002d72 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f001 fcc8 	bl	8004664 <SDIO_GetResponse>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2104      	movs	r1, #4
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f001 fcbf 	bl	8004664 <SDIO_GetResponse>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2108      	movs	r1, #8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 fcb6 	bl	8004664 <SDIO_GetResponse>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	210c      	movs	r1, #12
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fcad 	bl	8004664 <SDIO_GetResponse>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2104      	movs	r1, #4
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fca4 	bl	8004664 <SDIO_GetResponse>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	0d1a      	lsrs	r2, r3, #20
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fbea 	bl	8002504 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d38:	041b      	lsls	r3, r3, #16
 8002d3a:	f04f 0400 	mov.w	r4, #0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4623      	mov	r3, r4
 8002d42:	4608      	mov	r0, r1
 8002d44:	f001 fda8 	bl	8004898 <SDMMC_CmdSelDesel>
 8002d48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <SD_InitCard+0x16c>
  {
    return errorstate;
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	e00e      	b.n	8002d72 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681d      	ldr	r5, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	466c      	mov	r4, sp
 8002d5c:	f103 0210 	add.w	r2, r3, #16
 8002d60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002d66:	3304      	adds	r3, #4
 8002d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	f001 fbde 	bl	800452c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3740      	adds	r7, #64	; 0x40
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bdb0      	pop	{r4, r5, r7, pc}

08002d7a <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 fda3 	bl	80048e2 <SDMMC_CmdGoIdleState>
 8002d9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <SD_PowerON+0x2e>
  {
    return errorstate;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	e08c      	b.n	8002ec2 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f001 fdb8 	bl	8004922 <SDMMC_CmdOperCond>
 8002db2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03d      	beq.n	8002e36 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002dc0:	e032      	b.n	8002e28 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	60ba      	str	r2, [r7, #8]
 8002dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d102      	bne.n	8002dd6 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dd4:	e075      	b.n	8002ec2 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 fdc1 	bl	8004964 <SDMMC_CmdAppCommand>
 8002de2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002dea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dee:	e068      	b.n	8002ec2 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f001 fdd8 	bl	80049ac <SDMMC_CmdAppOperCommand>
 8002dfc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e08:	e05b      	b.n	8002ec2 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 fc27 	bl	8004664 <SDIO_GetResponse>
 8002e16:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	0fdb      	lsrs	r3, r3, #31
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <SD_PowerON+0xaa>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <SD_PowerON+0xac>
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0c9      	beq.n	8002dc2 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
 8002e34:	e044      	b.n	8002ec0 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 8002e3c:	e031      	b.n	8002ea2 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	60ba      	str	r2, [r7, #8]
 8002e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d102      	bne.n	8002e52 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e50:	e037      	b.n	8002ec2 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 fd83 	bl	8004964 <SDMMC_CmdAppCommand>
 8002e5e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <SD_PowerON+0xf0>
      {
        return errorstate;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	e02b      	b.n	8002ec2 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fd9a 	bl	80049ac <SDMMC_CmdAppOperCommand>
 8002e78:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <SD_PowerON+0x10a>
      {
        return errorstate;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	e01e      	b.n	8002ec2 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fbea 	bl	8004664 <SDIO_GetResponse>
 8002e90:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	0fdb      	lsrs	r3, r3, #31
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <SD_PowerON+0x124>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <SD_PowerON+0x126>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ca      	beq.n	8002e3e <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	645a      	str	r2, [r3, #68]	; 0x44
 8002eb8:	e002      	b.n	8002ec0 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8002ede:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ee2:	e018      	b.n	8002f16 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f001 fe2b 	bl	8004b4c <SDMMC_CmdSendStatus>
 8002ef6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <SD_SendStatus+0x38>
  {
    return errorstate;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	e009      	b.n	8002f16 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2100      	movs	r1, #0
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 fbab 	bl	8004664 <SDIO_GetResponse>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 fb93 	bl	8004664 <SDIO_GetResponse>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f48:	d102      	bne.n	8002f50 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f4e:	e02f      	b.n	8002fb0 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	4619      	mov	r1, r3
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f87b 	bl	8003052 <SD_FindSCR>
 8002f5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	e023      	b.n	8002fb0 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01c      	beq.n	8002fac <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	f001 fcf0 	bl	8004964 <SDMMC_CmdAppCommand>
 8002f84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	e00f      	b.n	8002fb0 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2102      	movs	r1, #2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f001 fd2d 	bl	80049f6 <SDMMC_CmdBusWidth>
 8002f9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	e003      	b.n	8002fb0 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e001      	b.n	8002fb0 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002fac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fb46 	bl	8004664 <SDIO_GetResponse>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fe2:	d102      	bne.n	8002fea <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fe8:	e02f      	b.n	800304a <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002fea:	f107 030c 	add.w	r3, r7, #12
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f82e 	bl	8003052 <SD_FindSCR>
 8002ff6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	e023      	b.n	800304a <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01c      	beq.n	8003046 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003014:	041b      	lsls	r3, r3, #16
 8003016:	4619      	mov	r1, r3
 8003018:	4610      	mov	r0, r2
 800301a:	f001 fca3 	bl	8004964 <SDMMC_CmdAppCommand>
 800301e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	e00f      	b.n	800304a <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fce0 	bl	80049f6 <SDMMC_CmdBusWidth>
 8003036:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	e003      	b.n	800304a <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8003042:	2300      	movs	r3, #0
 8003044:	e001      	b.n	800304a <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003046:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003052:	b590      	push	{r4, r7, lr}
 8003054:	b08f      	sub	sp, #60	; 0x3c
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800305c:	2300      	movs	r3, #0
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7fd fa98 	bl	8000594 <HAL_GetTick>
 8003064:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2108      	movs	r1, #8
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fb34 	bl	80046e6 <SDMMC_CmdBlockLength>
 800307e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <SD_FindSCR+0x38>
  {
    return errorstate;
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	e0a8      	b.n	80031dc <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f001 fc64 	bl	8004964 <SDMMC_CmdAppCommand>
 800309c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <SD_FindSCR+0x56>
  {
    return errorstate;
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	e099      	b.n	80031dc <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030a8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ac:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 80030ae:	2308      	movs	r3, #8
 80030b0:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80030b2:	2330      	movs	r3, #48	; 0x30
 80030b4:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80030b6:	2302      	movs	r3, #2
 80030b8:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 80030be:	2301      	movs	r3, #1
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f107 0214 	add.w	r2, r7, #20
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 fade 	bl	800468e <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 fcb1 	bl	8004a3e <SDMMC_CmdSendSCR>
 80030dc:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d022      	beq.n	800312a <SD_FindSCR+0xd8>
  {
    return errorstate;
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	e079      	b.n	80031dc <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00e      	beq.n	8003114 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	f107 020c 	add.w	r2, r7, #12
 8003102:	18d4      	adds	r4, r2, r3
 8003104:	4608      	mov	r0, r1
 8003106:	f001 fa3c 	bl	8004582 <SDIO_ReadFIFO>
 800310a:	4603      	mov	r3, r0
 800310c:	6023      	str	r3, [r4, #0]
      index++;
 800310e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003110:	3301      	adds	r3, #1
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003114:	f7fd fa3e 	bl	8000594 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d102      	bne.n	800312a <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003128:	e058      	b.n	80031dc <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003130:	f240 432a 	movw	r3, #1066	; 0x42a
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0d6      	beq.n	80030e8 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2208      	movs	r2, #8
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003150:	2308      	movs	r3, #8
 8003152:	e043      	b.n	80031dc <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2202      	movs	r2, #2
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800316a:	2302      	movs	r3, #2
 800316c:	e036      	b.n	80031dc <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2220      	movs	r2, #32
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8003184:	2320      	movs	r3, #32
 8003186:	e029      	b.n	80031dc <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	061a      	lsls	r2, r3, #24
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	021b      	lsls	r3, r3, #8
 800319a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800319e:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80031b4:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80031b6:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	061a      	lsls	r2, r3, #24
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031c4:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	0a1b      	lsrs	r3, r3, #8
 80031ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80031ce:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	0e1b      	lsrs	r3, r3, #24
 80031d4:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	373c      	adds	r7, #60	; 0x3c
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}

080031e4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDIO Rx FIFO */
  for(count = 0U; count < 8U; count++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e00d      	b.n	8003218 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	18d4      	adds	r4, r2, r3
 8003208:	4608      	mov	r0, r1
 800320a:	f001 f9ba 	bl	8004582 <SDIO_ReadFIFO>
 800320e:	4603      	mov	r3, r0
 8003210:	6023      	str	r3, [r4, #0]
  for(count = 0U; count < 8U; count++)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3301      	adds	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b07      	cmp	r3, #7
 800321c:	d9ee      	bls.n	80031fc <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	f103 0220 	add.w	r2, r3, #32
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bd90      	pop	{r4, r7, pc}

08003234 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e00b      	b.n	8003264 <SD_Write_IT+0x30>
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	4413      	add	r3, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f001 f99f 	bl	800459c <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3301      	adds	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b07      	cmp	r3, #7
 8003268:	d9f0      	bls.n	800324c <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f103 0220 	add.w	r2, r3, #32
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e034      	b.n	8003300 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f002 f894 	bl	80053d8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3308      	adds	r3, #8
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f001 f866 	bl	800438c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	461a      	mov	r2, r3
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	f001 f8b0 	bl	8004430 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6858      	ldr	r0, [r3, #4]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	f001 f8e5 	bl	80044ac <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	6892      	ldr	r2, [r2, #8]
 80032ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6892      	ldr	r2, [r2, #8]
 80032f6:	f041 0101 	orr.w	r1, r1, #1
 80032fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e01d      	b.n	8003356 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f007 fb80 	bl	800aa34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f000 f9fa 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d122      	bne.n	80033ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d11b      	bne.n	80033ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f06f 0202 	mvn.w	r2, #2
 800338a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f9af 	bl	8003704 <HAL_TIM_IC_CaptureCallback>
 80033a6:	e005      	b.n	80033b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f9a1 	bl	80036f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f9b2 	bl	8003718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d122      	bne.n	800340e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d11b      	bne.n	800340e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f06f 0204 	mvn.w	r2, #4
 80033de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f985 	bl	8003704 <HAL_TIM_IC_CaptureCallback>
 80033fa:	e005      	b.n	8003408 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f977 	bl	80036f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f988 	bl	8003718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d122      	bne.n	8003462 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11b      	bne.n	8003462 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0208 	mvn.w	r2, #8
 8003432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2204      	movs	r2, #4
 8003438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f95b 	bl	8003704 <HAL_TIM_IC_CaptureCallback>
 800344e:	e005      	b.n	800345c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f94d 	bl	80036f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f95e 	bl	8003718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b10      	cmp	r3, #16
 800346e:	d122      	bne.n	80034b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b10      	cmp	r3, #16
 800347c:	d11b      	bne.n	80034b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f06f 0210 	mvn.w	r2, #16
 8003486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2208      	movs	r2, #8
 800348c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f931 	bl	8003704 <HAL_TIM_IC_CaptureCallback>
 80034a2:	e005      	b.n	80034b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f923 	bl	80036f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f934 	bl	8003718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d10e      	bne.n	80034e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d107      	bne.n	80034e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0201 	mvn.w	r2, #1
 80034da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f8fd 	bl	80036dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d10e      	bne.n	800350e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d107      	bne.n	800350e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 faa2 	bl	8003a52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d10e      	bne.n	800353a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d107      	bne.n	800353a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8f9 	bl	800372c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d10e      	bne.n	8003566 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d107      	bne.n	8003566 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0220 	mvn.w	r2, #32
 800355e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fa6c 	bl	8003a3e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_TIM_ConfigClockSource+0x18>
 8003582:	2302      	movs	r3, #2
 8003584:	e0a6      	b.n	80036d4 <HAL_TIM_ConfigClockSource+0x166>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b40      	cmp	r3, #64	; 0x40
 80035bc:	d067      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x120>
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d80b      	bhi.n	80035da <HAL_TIM_ConfigClockSource+0x6c>
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d073      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x140>
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d802      	bhi.n	80035d0 <HAL_TIM_ConfigClockSource+0x62>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d06f      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80035ce:	e078      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	d06c      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x140>
 80035d4:	2b30      	cmp	r3, #48	; 0x30
 80035d6:	d06a      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x140>
      break;
 80035d8:	e073      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035da:	2b70      	cmp	r3, #112	; 0x70
 80035dc:	d00d      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x8c>
 80035de:	2b70      	cmp	r3, #112	; 0x70
 80035e0:	d804      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x7e>
 80035e2:	2b50      	cmp	r3, #80	; 0x50
 80035e4:	d033      	beq.n	800364e <HAL_TIM_ConfigClockSource+0xe0>
 80035e6:	2b60      	cmp	r3, #96	; 0x60
 80035e8:	d041      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80035ea:	e06a      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f0:	d066      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0x152>
 80035f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f6:	d017      	beq.n	8003628 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80035f8:	e063      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6899      	ldr	r1, [r3, #8]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f000 f9b3 	bl	8003974 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800361c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	609a      	str	r2, [r3, #8]
      break;
 8003626:	e04c      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6899      	ldr	r1, [r3, #8]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f000 f99c 	bl	8003974 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800364a:	609a      	str	r2, [r3, #8]
      break;
 800364c:	e039      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	461a      	mov	r2, r3
 800365c:	f000 f910 	bl	8003880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2150      	movs	r1, #80	; 0x50
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f969 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 800366c:	e029      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	461a      	mov	r2, r3
 800367c:	f000 f92f 	bl	80038de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2160      	movs	r1, #96	; 0x60
 8003686:	4618      	mov	r0, r3
 8003688:	f000 f959 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 800368c:	e019      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	461a      	mov	r2, r3
 800369c:	f000 f8f0 	bl	8003880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2140      	movs	r1, #64	; 0x40
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f949 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80036ac:	e009      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f000 f940 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80036be:	e000      	b.n	80036c2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80036c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a40      	ldr	r2, [pc, #256]	; (8003854 <TIM_Base_SetConfig+0x114>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375e:	d00f      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3d      	ldr	r2, [pc, #244]	; (8003858 <TIM_Base_SetConfig+0x118>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00b      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3c      	ldr	r2, [pc, #240]	; (800385c <TIM_Base_SetConfig+0x11c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3b      	ldr	r2, [pc, #236]	; (8003860 <TIM_Base_SetConfig+0x120>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_Base_SetConfig+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a3a      	ldr	r2, [pc, #232]	; (8003864 <TIM_Base_SetConfig+0x124>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d108      	bne.n	8003792 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2f      	ldr	r2, [pc, #188]	; (8003854 <TIM_Base_SetConfig+0x114>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d02b      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d027      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <TIM_Base_SetConfig+0x118>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d023      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2b      	ldr	r2, [pc, #172]	; (800385c <TIM_Base_SetConfig+0x11c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01f      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <TIM_Base_SetConfig+0x120>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01b      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a29      	ldr	r2, [pc, #164]	; (8003864 <TIM_Base_SetConfig+0x124>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d017      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a28      	ldr	r2, [pc, #160]	; (8003868 <TIM_Base_SetConfig+0x128>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <TIM_Base_SetConfig+0x12c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00f      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a26      	ldr	r2, [pc, #152]	; (8003870 <TIM_Base_SetConfig+0x130>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a25      	ldr	r2, [pc, #148]	; (8003874 <TIM_Base_SetConfig+0x134>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a24      	ldr	r2, [pc, #144]	; (8003878 <TIM_Base_SetConfig+0x138>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a23      	ldr	r2, [pc, #140]	; (800387c <TIM_Base_SetConfig+0x13c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d108      	bne.n	8003804 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <TIM_Base_SetConfig+0x114>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_Base_SetConfig+0xf8>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a0c      	ldr	r2, [pc, #48]	; (8003864 <TIM_Base_SetConfig+0x124>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d103      	bne.n	8003840 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	615a      	str	r2, [r3, #20]
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40000c00 	.word	0x40000c00
 8003864:	40010400 	.word	0x40010400
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800
 8003874:	40001800 	.word	0x40001800
 8003878:	40001c00 	.word	0x40001c00
 800387c:	40002000 	.word	0x40002000

08003880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 030a 	bic.w	r3, r3, #10
 80038bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038de:	b480      	push	{r7}
 80038e0:	b087      	sub	sp, #28
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f023 0210 	bic.w	r2, r3, #16
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800391a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	f043 0307 	orr.w	r3, r3, #7
 8003960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800398e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	431a      	orrs	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e032      	b.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a04:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e03f      	b.n	8003af8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d106      	bne.n	8003a92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f007 f87b 	bl	800ab88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2224      	movs	r2, #36	; 0x24
 8003a96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aa8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa64 	bl	8003f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003abe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ace:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ade:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10d      	bne.n	8003b52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_UART_IRQHandler+0x52>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f992 	bl	8003e74 <UART_Receive_IT>
      return;
 8003b50:	e0cc      	b.n	8003cec <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80ab 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x1b0>
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_UART_IRQHandler+0x70>
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80a0 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HAL_UART_IRQHandler+0x90>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_UART_IRQHandler+0xb0>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	f043 0202 	orr.w	r2, r3, #2
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xd0>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	f043 0204 	orr.w	r2, r3, #4
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xf0>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	f043 0208 	orr.w	r2, r3, #8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d078      	beq.n	8003cea <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_UART_IRQHandler+0x112>
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f931 	bl	8003e74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <HAL_UART_IRQHandler+0x13a>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d031      	beq.n	8003c9e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f87a 	bl	8003d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d123      	bne.n	8003c96 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d013      	beq.n	8003c8e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	4a22      	ldr	r2, [pc, #136]	; (8003cf4 <HAL_UART_IRQHandler+0x1f4>)
 8003c6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fdcd 	bl	8000812 <HAL_DMA_Abort_IT>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	e00e      	b.n	8003cac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f846 	bl	8003d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00a      	b.n	8003cac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f842 	bl	8003d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e006      	b.n	8003cac <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f83e 	bl	8003d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003caa:	e01e      	b.n	8003cea <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	bf00      	nop
    return;
 8003cae:	e01c      	b.n	8003cea <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_UART_IRQHandler+0x1cc>
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f867 	bl	8003d98 <UART_Transmit_IT>
    return;
 8003cca:	e00f      	b.n	8003cec <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_UART_IRQHandler+0x1ec>
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f8af 	bl	8003e44 <UART_EndTransmit_IT>
    return;
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <HAL_UART_IRQHandler+0x1ec>
    return;
 8003cea:	bf00      	nop
  }
}
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	08003d71 	.word	0x08003d71

08003cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff ffc8 	bl	8003d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b21      	cmp	r3, #33	; 0x21
 8003daa:	d144      	bne.n	8003e36 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d11a      	bne.n	8003dec <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dca:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	621a      	str	r2, [r3, #32]
 8003dde:	e00e      	b.n	8003dfe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]
 8003dea:	e008      	b.n	8003dfe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	1c59      	adds	r1, r3, #1
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6211      	str	r1, [r2, #32]
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff ff47 	bl	8003cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b22      	cmp	r3, #34	; 0x22
 8003e86:	d171      	bne.n	8003f6c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	d123      	bne.n	8003eda <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10e      	bne.n	8003ebe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28
 8003ebc:	e029      	b.n	8003f12 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ed8:	e01b      	b.n	8003f12 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6858      	ldr	r0, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	1c59      	adds	r1, r3, #1
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6291      	str	r1, [r2, #40]	; 0x28
 8003ef2:	b2c2      	uxtb	r2, r0
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	e00c      	b.n	8003f12 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	1c58      	adds	r0, r3, #1
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	6288      	str	r0, [r1, #40]	; 0x28
 8003f0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d120      	bne.n	8003f68 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0220 	bic.w	r2, r2, #32
 8003f34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0201 	bic.w	r2, r2, #1
 8003f54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff fed4 	bl	8003d0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e002      	b.n	8003f6e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f78:	b5b0      	push	{r4, r5, r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003fb8:	f023 030c 	bic.w	r3, r3, #12
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe4:	f040 80e4 	bne.w	80041b0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4aab      	ldr	r2, [pc, #684]	; (800429c <UART_SetConfig+0x324>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <UART_SetConfig+0x84>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4aaa      	ldr	r2, [pc, #680]	; (80042a0 <UART_SetConfig+0x328>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d16c      	bne.n	80040d6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ffc:	f7fd fa2e 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8004000:	4602      	mov	r2, r0
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009a      	lsls	r2, r3, #2
 800400a:	441a      	add	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	4aa3      	ldr	r2, [pc, #652]	; (80042a4 <UART_SetConfig+0x32c>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	011c      	lsls	r4, r3, #4
 8004020:	f7fd fa1c 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8004024:	4602      	mov	r2, r0
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009a      	lsls	r2, r3, #2
 800402e:	441a      	add	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fbb2 f5f3 	udiv	r5, r2, r3
 800403a:	f7fd fa0f 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 800403e:	4602      	mov	r2, r0
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	009a      	lsls	r2, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	4a93      	ldr	r2, [pc, #588]	; (80042a4 <UART_SetConfig+0x32c>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2264      	movs	r2, #100	; 0x64
 800405e:	fb02 f303 	mul.w	r3, r2, r3
 8004062:	1aeb      	subs	r3, r5, r3
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	3332      	adds	r3, #50	; 0x32
 8004068:	4a8e      	ldr	r2, [pc, #568]	; (80042a4 <UART_SetConfig+0x32c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004076:	441c      	add	r4, r3
 8004078:	f7fd f9f0 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 800407c:	4602      	mov	r2, r0
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009a      	lsls	r2, r3, #2
 8004086:	441a      	add	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004092:	f7fd f9e3 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8004096:	4602      	mov	r2, r0
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009a      	lsls	r2, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	4a7d      	ldr	r2, [pc, #500]	; (80042a4 <UART_SetConfig+0x32c>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2264      	movs	r2, #100	; 0x64
 80040b6:	fb02 f303 	mul.w	r3, r2, r3
 80040ba:	1aeb      	subs	r3, r5, r3
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	3332      	adds	r3, #50	; 0x32
 80040c0:	4a78      	ldr	r2, [pc, #480]	; (80042a4 <UART_SetConfig+0x32c>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	f003 0207 	and.w	r2, r3, #7
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4422      	add	r2, r4
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	e154      	b.n	8004380 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80040d6:	f7fd f9ad 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 80040da:	4602      	mov	r2, r0
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009a      	lsls	r2, r3, #2
 80040e4:	441a      	add	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	4a6c      	ldr	r2, [pc, #432]	; (80042a4 <UART_SetConfig+0x32c>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	011c      	lsls	r4, r3, #4
 80040fa:	f7fd f99b 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 80040fe:	4602      	mov	r2, r0
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fbb2 f5f3 	udiv	r5, r2, r3
 8004114:	f7fd f98e 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8004118:	4602      	mov	r2, r0
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009a      	lsls	r2, r3, #2
 8004122:	441a      	add	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	4a5d      	ldr	r2, [pc, #372]	; (80042a4 <UART_SetConfig+0x32c>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	2264      	movs	r2, #100	; 0x64
 8004138:	fb02 f303 	mul.w	r3, r2, r3
 800413c:	1aeb      	subs	r3, r5, r3
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	3332      	adds	r3, #50	; 0x32
 8004142:	4a58      	ldr	r2, [pc, #352]	; (80042a4 <UART_SetConfig+0x32c>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	095b      	lsrs	r3, r3, #5
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004150:	441c      	add	r4, r3
 8004152:	f7fd f96f 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8004156:	4602      	mov	r2, r0
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009a      	lsls	r2, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fbb2 f5f3 	udiv	r5, r2, r3
 800416c:	f7fd f962 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8004170:	4602      	mov	r2, r0
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009a      	lsls	r2, r3, #2
 800417a:	441a      	add	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	4a47      	ldr	r2, [pc, #284]	; (80042a4 <UART_SetConfig+0x32c>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2264      	movs	r2, #100	; 0x64
 8004190:	fb02 f303 	mul.w	r3, r2, r3
 8004194:	1aeb      	subs	r3, r5, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a42      	ldr	r2, [pc, #264]	; (80042a4 <UART_SetConfig+0x32c>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4422      	add	r2, r4
 80041ac:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80041ae:	e0e7      	b.n	8004380 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a39      	ldr	r2, [pc, #228]	; (800429c <UART_SetConfig+0x324>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <UART_SetConfig+0x24c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a38      	ldr	r2, [pc, #224]	; (80042a0 <UART_SetConfig+0x328>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d171      	bne.n	80042a8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80041c4:	f7fd f94a 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 80041c8:	4602      	mov	r2, r0
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	4a31      	ldr	r2, [pc, #196]	; (80042a4 <UART_SetConfig+0x32c>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	011c      	lsls	r4, r3, #4
 80041e8:	f7fd f938 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009a      	lsls	r2, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	fbb2 f5f3 	udiv	r5, r2, r3
 8004202:	f7fd f92b 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8004206:	4602      	mov	r2, r0
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009a      	lsls	r2, r3, #2
 8004210:	441a      	add	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <UART_SetConfig+0x32c>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	2264      	movs	r2, #100	; 0x64
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	1aeb      	subs	r3, r5, r3
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	3332      	adds	r3, #50	; 0x32
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <UART_SetConfig+0x32c>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423c:	441c      	add	r4, r3
 800423e:	f7fd f90d 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8004242:	4602      	mov	r2, r0
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009a      	lsls	r2, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	fbb2 f5f3 	udiv	r5, r2, r3
 8004258:	f7fd f900 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 800425c:	4602      	mov	r2, r0
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009a      	lsls	r2, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <UART_SetConfig+0x32c>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	2264      	movs	r2, #100	; 0x64
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	1aeb      	subs	r3, r5, r3
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	3332      	adds	r3, #50	; 0x32
 8004286:	4a07      	ldr	r2, [pc, #28]	; (80042a4 <UART_SetConfig+0x32c>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	f003 020f 	and.w	r2, r3, #15
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4422      	add	r2, r4
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	e071      	b.n	8004380 <UART_SetConfig+0x408>
 800429c:	40011000 	.word	0x40011000
 80042a0:	40011400 	.word	0x40011400
 80042a4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80042a8:	f7fd f8c4 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	009a      	lsls	r2, r3, #2
 80042b6:	441a      	add	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c2:	4a31      	ldr	r2, [pc, #196]	; (8004388 <UART_SetConfig+0x410>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	011c      	lsls	r4, r3, #4
 80042cc:	f7fd f8b2 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	009a      	lsls	r2, r3, #2
 80042da:	441a      	add	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80042e6:	f7fd f8a5 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 80042ea:	4602      	mov	r2, r0
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009a      	lsls	r2, r3, #2
 80042f4:	441a      	add	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	4a21      	ldr	r2, [pc, #132]	; (8004388 <UART_SetConfig+0x410>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2264      	movs	r2, #100	; 0x64
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	1aeb      	subs	r3, r5, r3
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	3332      	adds	r3, #50	; 0x32
 8004314:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <UART_SetConfig+0x410>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004320:	441c      	add	r4, r3
 8004322:	f7fd f887 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8004326:	4602      	mov	r2, r0
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009a      	lsls	r2, r3, #2
 8004330:	441a      	add	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fbb2 f5f3 	udiv	r5, r2, r3
 800433c:	f7fd f87a 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8004340:	4602      	mov	r2, r0
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009a      	lsls	r2, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	fbb2 f3f3 	udiv	r3, r2, r3
 8004356:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <UART_SetConfig+0x410>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2264      	movs	r2, #100	; 0x64
 8004360:	fb02 f303 	mul.w	r3, r2, r3
 8004364:	1aeb      	subs	r3, r5, r3
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	3332      	adds	r3, #50	; 0x32
 800436a:	4a07      	ldr	r2, [pc, #28]	; (8004388 <UART_SetConfig+0x410>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 020f 	and.w	r2, r3, #15
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4422      	add	r2, r4
 800437c:	609a      	str	r2, [r3, #8]
}
 800437e:	e7ff      	b.n	8004380 <UART_SetConfig+0x408>
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bdb0      	pop	{r4, r5, r7, pc}
 8004388:	51eb851f 	.word	0x51eb851f

0800438c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4b20      	ldr	r3, [pc, #128]	; (800442c <FSMC_NORSRAM_Init+0xa0>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043b6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80043bc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80043c2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80043c8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80043ce:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80043d4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80043da:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80043e0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80043e6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80043ec:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80043f2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80043f8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b08      	cmp	r3, #8
 8004406:	d103      	bne.n	8004410 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800440e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	fff00080 	.word	0xfff00080

08004430 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004452:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800445e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004466:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800446e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	3b01      	subs	r3, #1
 8004476:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004478:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	3b02      	subs	r3, #2
 8004480:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004482:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004488:	4313      	orrs	r3, r2
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6979      	ldr	r1, [r7, #20]
 8004498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c4:	d122      	bne.n	800450c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ce:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044e2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80044ea:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80044f2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044f8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6979      	ldr	r1, [r7, #20]
 8004506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800450a:	e005      	b.n	8004518 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	cff00000 	.word	0xcff00000

0800452c <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800452c:	b084      	sub	sp, #16
 800452e:	b480      	push	{r7}
 8004530:	b085      	sub	sp, #20
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	f107 001c 	add.w	r0, r7, #28
 800453a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004542:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004544:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004546:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800454a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800454e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004552:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004556:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	b004      	add	sp, #16
 8004580:	4770      	bx	lr

08004582 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2203      	movs	r2, #3
 80045ca:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0303 	and.w	r3, r3, #3
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004614:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800461a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004620:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004630:	f023 030f 	bic.w	r3, r3, #15
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	b2db      	uxtb	r3, r3
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3314      	adds	r3, #20
 8004676:	461a      	mov	r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
}  
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80046b4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80046ba:	431a      	orrs	r2, r3
                       Data->DPSM);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80046c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0

}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b088      	sub	sp, #32
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80046f8:	2310      	movs	r3, #16
 80046fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046fc:	2340      	movs	r3, #64	; 0x40
 80046fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004708:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff70 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	2110      	movs	r1, #16
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa63 	bl	8004be8 <SDMMC_GetCmdResp1>
 8004722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004724:	69fb      	ldr	r3, [r7, #28]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3720      	adds	r7, #32
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b088      	sub	sp, #32
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004738:	2300      	movs	r3, #0
 800473a:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004740:	2311      	movs	r3, #17
 8004742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004744:	2340      	movs	r3, #64	; 0x40
 8004746:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800474c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004750:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff ff4c 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	2111      	movs	r1, #17
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fa3f 	bl	8004be8 <SDMMC_GetCmdResp1>
 800476a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800476c:	69fb      	ldr	r3, [r7, #28]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b088      	sub	sp, #32
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004788:	2312      	movs	r3, #18
 800478a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800478c:	2340      	movs	r3, #64	; 0x40
 800478e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004798:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800479a:	f107 0308 	add.w	r3, r7, #8
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff28 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	2112      	movs	r1, #18
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fa1b 	bl	8004be8 <SDMMC_GetCmdResp1>
 80047b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047b4:	69fb      	ldr	r3, [r7, #28]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3720      	adds	r7, #32
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b088      	sub	sp, #32
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80047d0:	2318      	movs	r3, #24
 80047d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047d4:	2340      	movs	r3, #64	; 0x40
 80047d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047e0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047e2:	f107 0308 	add.w	r3, r7, #8
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff ff04 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	2118      	movs	r1, #24
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f9f7 	bl	8004be8 <SDMMC_GetCmdResp1>
 80047fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047fc:	69fb      	ldr	r3, [r7, #28]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b088      	sub	sp, #32
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004818:	2319      	movs	r3, #25
 800481a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800481c:	2340      	movs	r3, #64	; 0x40
 800481e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004820:	2300      	movs	r3, #0
 8004822:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004828:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800482a:	f107 0308 	add.w	r3, r7, #8
 800482e:	4619      	mov	r1, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fee0 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	2119      	movs	r1, #25
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f9d3 	bl	8004be8 <SDMMC_GetCmdResp1>
 8004842:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004844:	69fb      	ldr	r3, [r7, #28]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004858:	2300      	movs	r3, #0
 800485a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004860:	230c      	movs	r3, #12
 8004862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004864:	2340      	movs	r3, #64	; 0x40
 8004866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800486c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004870:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004872:	f107 0308 	add.w	r3, r7, #8
 8004876:	4619      	mov	r1, r3
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff febc 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800487e:	4a05      	ldr	r2, [pc, #20]	; (8004894 <SDMMC_CmdStopTransfer+0x44>)
 8004880:	210c      	movs	r1, #12
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f9b0 	bl	8004be8 <SDMMC_GetCmdResp1>
 8004888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800488a:	69fb      	ldr	r3, [r7, #28]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	05f5e100 	.word	0x05f5e100

08004898 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80048ac:	2307      	movs	r3, #7
 80048ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048b0:	2340      	movs	r3, #64	; 0x40
 80048b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048bc:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048be:	f107 0310 	add.w	r3, r7, #16
 80048c2:	4619      	mov	r1, r3
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f7ff fe96 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	2107      	movs	r1, #7
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 f989 	bl	8004be8 <SDMMC_GetCmdResp1>
 80048d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3728      	adds	r7, #40	; 0x28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b088      	sub	sp, #32
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004902:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7ff fe73 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f93f 	bl	8004b94 <SDMMC_GetCmdError>
 8004916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004918:	69fb      	ldr	r3, [r7, #28]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b088      	sub	sp, #32
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800492e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004932:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004934:	2308      	movs	r3, #8
 8004936:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004938:	2340      	movs	r3, #64	; 0x40
 800493a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004944:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fe52 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fb10 	bl	8004f78 <SDMMC_GetCmdResp7>
 8004958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800495a:	69fb      	ldr	r3, [r7, #28]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3720      	adds	r7, #32
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004976:	2337      	movs	r3, #55	; 0x37
 8004978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800497a:	2340      	movs	r3, #64	; 0x40
 800497c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004986:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004988:	f107 0308 	add.w	r3, r7, #8
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fe31 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004994:	f241 3288 	movw	r2, #5000	; 0x1388
 8004998:	2137      	movs	r1, #55	; 0x37
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f924 	bl	8004be8 <SDMMC_GetCmdResp1>
 80049a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049a2:	69fb      	ldr	r3, [r7, #28]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80049c6:	2329      	movs	r3, #41	; 0x29
 80049c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049ca:	2340      	movs	r3, #64	; 0x40
 80049cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fe09 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fa25 	bl	8004e34 <SDMMC_GetCmdResp3>
 80049ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ec:	69fb      	ldr	r3, [r7, #28]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b088      	sub	sp, #32
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004a08:	2306      	movs	r3, #6
 8004a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a0c:	2340      	movs	r3, #64	; 0x40
 8004a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a18:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a1a:	f107 0308 	add.w	r3, r7, #8
 8004a1e:	4619      	mov	r1, r3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fde8 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2a:	2106      	movs	r1, #6
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8db 	bl	8004be8 <SDMMC_GetCmdResp1>
 8004a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a34:	69fb      	ldr	r3, [r7, #28]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004a4e:	2333      	movs	r3, #51	; 0x33
 8004a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a52:	2340      	movs	r3, #64	; 0x40
 8004a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a60:	f107 0308 	add.w	r3, r7, #8
 8004a64:	4619      	mov	r1, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fdc5 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a70:	2133      	movs	r1, #51	; 0x33
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8b8 	bl	8004be8 <SDMMC_GetCmdResp1>
 8004a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004a94:	2302      	movs	r3, #2
 8004a96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004a98:	23c0      	movs	r3, #192	; 0xc0
 8004a9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004aa6:	f107 0308 	add.w	r3, r7, #8
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fda2 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f97e 	bl	8004db4 <SDMMC_GetCmdResp2>
 8004ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aba:	69fb      	ldr	r3, [r7, #28]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004ad6:	2309      	movs	r3, #9
 8004ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ada:	23c0      	movs	r3, #192	; 0xc0
 8004adc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ae6:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ae8:	f107 0308 	add.w	r3, r7, #8
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fd81 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f95d 	bl	8004db4 <SDMMC_GetCmdResp2>
 8004afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004afc:	69fb      	ldr	r3, [r7, #28]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b088      	sub	sp, #32
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b1c:	2340      	movs	r3, #64	; 0x40
 8004b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b20:	2300      	movs	r3, #0
 8004b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b28:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fd60 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	2103      	movs	r1, #3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9ae 	bl	8004e9c <SDMMC_GetCmdResp6>
 8004b40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b42:	69fb      	ldr	r3, [r7, #28]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004b5e:	230d      	movs	r3, #13
 8004b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b62:	2340      	movs	r3, #64	; 0x40
 8004b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b70:	f107 0308 	add.w	r3, r7, #8
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fd3d 	bl	80045f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	210d      	movs	r1, #13
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f830 	bl	8004be8 <SDMMC_GetCmdResp1>
 8004b88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004b94:	b490      	push	{r4, r7}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <SDMMC_GetCmdError+0x4c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a10      	ldr	r2, [pc, #64]	; (8004be4 <SDMMC_GetCmdError+0x50>)
 8004ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba6:	0a5b      	lsrs	r3, r3, #9
 8004ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	1e5c      	subs	r4, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004bb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bbc:	e00a      	b.n	8004bd4 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f2      	beq.n	8004bb0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004bd0:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc90      	pop	{r4, r7}
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	20000010 	.word	0x20000010
 8004be4:	10624dd3 	.word	0x10624dd3

08004be8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004bf6:	4b6c      	ldr	r3, [pc, #432]	; (8004da8 <SDMMC_GetCmdResp1+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a6c      	ldr	r2, [pc, #432]	; (8004dac <SDMMC_GetCmdResp1+0x1c4>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	0a5b      	lsrs	r3, r3, #9
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c08:	4623      	mov	r3, r4
 8004c0a:	1e5c      	subs	r4, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c14:	e0c3      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f2      	beq.n	8004c08 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2204      	movs	r2, #4
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c34:	2304      	movs	r3, #4
 8004c36:	e0b2      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e0a7      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff fcfb 	bl	800464a <SDIO_GetCommandResponse>
 8004c54:	4603      	mov	r3, r0
 8004c56:	461a      	mov	r2, r3
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d001      	beq.n	8004c62 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e09d      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fcf9 	bl	8004664 <SDIO_GetResponse>
 8004c72:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4b4e      	ldr	r3, [pc, #312]	; (8004db0 <SDMMC_GetCmdResp1+0x1c8>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e08d      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	da02      	bge.n	8004c8e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c8c:	e087      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004c98:	2340      	movs	r3, #64	; 0x40
 8004c9a:	e080      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	e079      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cb8:	e071      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cc8:	e069      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cd8:	e061      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ce8:	e059      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cf8:	e051      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d08:	e049      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d18:	e041      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8004d24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d28:	e039      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d38:	e031      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004d44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004d48:	e029      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004d54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d58:	e021      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004d64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d68:	e019      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004d74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d78:	e011      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004d84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d88:	e009      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004d94:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004d98:	e001      	b.n	8004d9e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000010 	.word	0x20000010
 8004dac:	10624dd3 	.word	0x10624dd3
 8004db0:	fdffe008 	.word	0xfdffe008

08004db4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004db4:	b490      	push	{r4, r7}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <SDMMC_GetCmdResp2+0x78>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <SDMMC_GetCmdResp2+0x7c>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	0a5b      	lsrs	r3, r3, #9
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	1e5c      	subs	r4, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004dd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ddc:	e020      	b.n	8004e20 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f2      	beq.n	8004dd0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	e00f      	b.n	8004e20 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d004      	beq.n	8004e16 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e004      	b.n	8004e20 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc90      	pop	{r4, r7}
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	20000010 	.word	0x20000010
 8004e30:	10624dd3 	.word	0x10624dd3

08004e34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004e34:	b490      	push	{r4, r7}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e3c:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <SDMMC_GetCmdResp3+0x60>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a15      	ldr	r2, [pc, #84]	; (8004e98 <SDMMC_GetCmdResp3+0x64>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	0a5b      	lsrs	r3, r3, #9
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e50:	4623      	mov	r3, r4
 8004e52:	1e5c      	subs	r4, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d102      	bne.n	8004e5e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e5c:	e015      	b.n	8004e8a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f2      	beq.n	8004e50 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2204      	movs	r2, #4
 8004e7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	e004      	b.n	8004e8a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc90      	pop	{r4, r7}
 8004e92:	4770      	bx	lr
 8004e94:	20000010 	.word	0x20000010
 8004e98:	10624dd3 	.word	0x10624dd3

08004e9c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <SDMMC_GetCmdResp6+0xd4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a31      	ldr	r2, [pc, #196]	; (8004f74 <SDMMC_GetCmdResp6+0xd8>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	0a5b      	lsrs	r3, r3, #9
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	1e5c      	subs	r4, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ec6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004eca:	e04c      	b.n	8004f66 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f2      	beq.n	8004ebe <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004eea:	2304      	movs	r3, #4
 8004eec:	e03b      	b.n	8004f66 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d004      	beq.n	8004f04 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e030      	b.n	8004f66 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff fba0 	bl	800464a <SDIO_GetCommandResponse>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d001      	beq.n	8004f18 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e026      	b.n	8004f66 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004f20:	2100      	movs	r1, #0
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fb9e 	bl	8004664 <SDIO_GetResponse>
 8004f28:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	e011      	b.n	8004f66 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f50:	e009      	b.n	8004f66 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f60:	e001      	b.n	8004f66 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd90      	pop	{r4, r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000010 	.word	0x20000010
 8004f74:	10624dd3 	.word	0x10624dd3

08004f78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004f78:	b490      	push	{r4, r7}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f80:	4b18      	ldr	r3, [pc, #96]	; (8004fe4 <SDMMC_GetCmdResp7+0x6c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a18      	ldr	r2, [pc, #96]	; (8004fe8 <SDMMC_GetCmdResp7+0x70>)
 8004f86:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8a:	0a5b      	lsrs	r3, r3, #9
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004f94:	4623      	mov	r3, r4
 8004f96:	1e5c      	subs	r4, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d102      	bne.n	8004fa2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004fa0:	e01a      	b.n	8004fd8 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f2      	beq.n	8004f94 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d004      	beq.n	8004fc4 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2240      	movs	r2, #64	; 0x40
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	e009      	b.n	8004fd8 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d002      	beq.n	8004fd6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2240      	movs	r2, #64	; 0x40
 8004fd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004fd6:	2300      	movs	r3, #0
  
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc90      	pop	{r4, r7}
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000010 	.word	0x20000010
 8004fe8:	10624dd3 	.word	0x10624dd3

08004fec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005002:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 8005004:	7a5b      	ldrb	r3, [r3, #9]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d131      	bne.n	8005070 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800500c:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 800500e:	7a5b      	ldrb	r3, [r3, #9]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 8005016:	2100      	movs	r1, #0
 8005018:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800501a:	4b19      	ldr	r3, [pc, #100]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 800501c:	7a5b      	ldrb	r3, [r3, #9]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	4a17      	ldr	r2, [pc, #92]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800502a:	4b15      	ldr	r3, [pc, #84]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 800502c:	7a5b      	ldrb	r3, [r3, #9]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 8005034:	4413      	add	r3, r2
 8005036:	79fa      	ldrb	r2, [r7, #7]
 8005038:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800503a:	4b11      	ldr	r3, [pc, #68]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 800503c:	7a5b      	ldrb	r3, [r3, #9]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	b2d1      	uxtb	r1, r2
 8005044:	4a0e      	ldr	r2, [pc, #56]	; (8005080 <FATFS_LinkDriverEx+0x94>)
 8005046:	7251      	strb	r1, [r2, #9]
 8005048:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800504a:	7dbb      	ldrb	r3, [r7, #22]
 800504c:	3330      	adds	r3, #48	; 0x30
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	3301      	adds	r3, #1
 8005058:	223a      	movs	r2, #58	; 0x3a
 800505a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	3302      	adds	r3, #2
 8005060:	222f      	movs	r2, #47	; 0x2f
 8005062:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	3303      	adds	r3, #3
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005070:	7dfb      	ldrb	r3, [r7, #23]
}
 8005072:	4618      	mov	r0, r3
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000030 	.word	0x20000030

08005084 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800508e:	2200      	movs	r2, #0
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff ffaa 	bl	8004fec <FATFS_LinkDriverEx>
 8005098:	4603      	mov	r3, r0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80050ae:	f000 f8ac 	bl	800520a <BSP_SD_IsDetected>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e012      	b.n	80050e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80050bc:	480b      	ldr	r0, [pc, #44]	; (80050ec <BSP_SD_Init+0x48>)
 80050be:	f7fc fd2a 	bl	8001b16 <HAL_SD_Init>
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80050cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050d0:	4806      	ldr	r0, [pc, #24]	; (80050ec <BSP_SD_Init+0x48>)
 80050d2:	f7fd fc6c 	bl	80029ae <HAL_SD_ConfigWideBusOperation>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80050e0:	79fb      	ldrb	r3, [r7, #7]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000538 	.word	0x20000538

080050f0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	68f9      	ldr	r1, [r7, #12]
 800510c:	4806      	ldr	r0, [pc, #24]	; (8005128 <BSP_SD_ReadBlocks+0x38>)
 800510e:	f7fc fd89 	bl	8001c24 <HAL_SD_ReadBlocks>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 800511c:	7dfb      	ldrb	r3, [r7, #23]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000538 	.word	0x20000538

0800512c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	4806      	ldr	r0, [pc, #24]	; (8005164 <BSP_SD_WriteBlocks+0x38>)
 800514a:	f7fc ff02 	bl	8001f52 <HAL_SD_WriteBlocks>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005158:	7dfb      	ldrb	r3, [r7, #23]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000538 	.word	0x20000538

08005168 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800516c:	4805      	ldr	r0, [pc, #20]	; (8005184 <BSP_SD_GetCardState+0x1c>)
 800516e:	f7fd fc9a 	bl	8002aa6 <HAL_SD_GetCardState>
 8005172:	4603      	mov	r3, r0
 8005174:	2b04      	cmp	r3, #4
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
}
 800517e:	4618      	mov	r0, r3
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000538 	.word	0x20000538

08005188 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	4803      	ldr	r0, [pc, #12]	; (80051a0 <BSP_SD_GetCardInfo+0x18>)
 8005194:	f7fd fbdf 	bl	8002956 <HAL_SD_GetCardInfo>
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000538 	.word	0x20000538

080051a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80051ac:	f000 f818 	bl	80051e0 <BSP_SD_AbortCallback>
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80051c0:	f000 f815 	bl	80051ee <BSP_SD_WriteCpltCallback>
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80051d4:	f000 f812 	bl	80051fc <BSP_SD_ReadCpltCallback>
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0

}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80051ee:	b480      	push	{r7}
 80051f0:	af00      	add	r7, sp, #0

}
 80051f2:	bf00      	nop
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0

}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005210:	2301      	movs	r3, #1
 8005212:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8005214:	f000 f81e 	bl	8005254 <BSP_PlatformIsDetected>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800521e:	2300      	movs	r3, #0
 8005220:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	b2db      	uxtb	r3, r3
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005234:	4904      	ldr	r1, [pc, #16]	; (8005248 <MX_FATFS_Init+0x18>)
 8005236:	4805      	ldr	r0, [pc, #20]	; (800524c <MX_FATFS_Init+0x1c>)
 8005238:	f7ff ff24 	bl	8005084 <FATFS_LinkDriver>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	4b03      	ldr	r3, [pc, #12]	; (8005250 <MX_FATFS_Init+0x20>)
 8005242:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005244:	bf00      	nop
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000054 	.word	0x20000054
 800524c:	0800b2fc 	.word	0x0800b2fc
 8005250:	20000050 	.word	0x20000050

08005254 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800525a:	2301      	movs	r3, #1
 800525c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800525e:	2108      	movs	r1, #8
 8005260:	4806      	ldr	r0, [pc, #24]	; (800527c <BSP_PlatformIsDetected+0x28>)
 8005262:	f7fb fc93 	bl	8000b8c <HAL_GPIO_ReadPin>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800526c:	2300      	movs	r3, #0
 800526e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8005270:	79fb      	ldrb	r3, [r7, #7]
}  
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40020c00 	.word	0x40020c00

08005280 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	611a      	str	r2, [r3, #16]
 8005294:	615a      	str	r2, [r3, #20]
 8005296:	619a      	str	r2, [r3, #24]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8005298:	4b27      	ldr	r3, [pc, #156]	; (8005338 <MX_FSMC_Init+0xb8>)
 800529a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800529e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052a2:	4a26      	ldr	r2, [pc, #152]	; (800533c <MX_FSMC_Init+0xbc>)
 80052a4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80052ac:	4b22      	ldr	r3, [pc, #136]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80052b2:	4b21      	ldr	r3, [pc, #132]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80052b8:	4b1f      	ldr	r3, [pc, #124]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052ba:	2210      	movs	r2, #16
 80052bc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80052be:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80052c4:	4b1c      	ldr	r3, [pc, #112]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80052ca:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80052d6:	4b18      	ldr	r3, [pc, #96]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80052de:	4b16      	ldr	r3, [pc, #88]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80052e4:	4b14      	ldr	r3, [pc, #80]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80052ea:	4b13      	ldr	r3, [pc, #76]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80052f0:	4b11      	ldr	r3, [pc, #68]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <MX_FSMC_Init+0xb8>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80052fc:	230f      	movs	r3, #15
 80052fe:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8005300:	230f      	movs	r3, #15
 8005302:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8005304:	23ff      	movs	r3, #255	; 0xff
 8005306:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8005308:	230f      	movs	r3, #15
 800530a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800530c:	2310      	movs	r3, #16
 800530e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8005310:	2311      	movs	r3, #17
 8005312:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	2200      	movs	r2, #0
 800531c:	4619      	mov	r1, r3
 800531e:	4806      	ldr	r0, [pc, #24]	; (8005338 <MX_FSMC_Init+0xb8>)
 8005320:	f7fd ffae 	bl	8003280 <HAL_SRAM_Init>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800532a:	f004 fd95 	bl	8009e58 <Error_Handler>
  }

}
 800532e:	bf00      	nop
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	200004b8 	.word	0x200004b8
 800533c:	a0000104 	.word	0xa0000104

08005340 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005346:	1d3b      	adds	r3, r7, #4
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005354:	4b1c      	ldr	r3, [pc, #112]	; (80053c8 <HAL_FSMC_MspInit+0x88>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d131      	bne.n	80053c0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800535c:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <HAL_FSMC_MspInit+0x88>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	603b      	str	r3, [r7, #0]
 8005366:	4b19      	ldr	r3, [pc, #100]	; (80053cc <HAL_FSMC_MspInit+0x8c>)
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <HAL_FSMC_MspInit+0x8c>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	6393      	str	r3, [r2, #56]	; 0x38
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_FSMC_MspInit+0x8c>)
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800537e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005382:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005384:	2302      	movs	r3, #2
 8005386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538c:	2303      	movs	r3, #3
 800538e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005390:	230c      	movs	r3, #12
 8005392:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	4619      	mov	r1, r3
 8005398:	480d      	ldr	r0, [pc, #52]	; (80053d0 <HAL_FSMC_MspInit+0x90>)
 800539a:	f7fb fa5d 	bl	8000858 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13 
 800539e:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80053a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a4:	2302      	movs	r3, #2
 80053a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ac:	2303      	movs	r3, #3
 80053ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80053b0:	230c      	movs	r3, #12
 80053b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053b4:	1d3b      	adds	r3, r7, #4
 80053b6:	4619      	mov	r1, r3
 80053b8:	4806      	ldr	r0, [pc, #24]	; (80053d4 <HAL_FSMC_MspInit+0x94>)
 80053ba:	f7fb fa4d 	bl	8000858 <HAL_GPIO_Init>
 80053be:	e000      	b.n	80053c2 <HAL_FSMC_MspInit+0x82>
    return;
 80053c0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	2000003c 	.word	0x2000003c
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40021000 	.word	0x40021000
 80053d4:	40020c00 	.word	0x40020c00

080053d8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80053e0:	f7ff ffae 	bl	8005340 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08c      	sub	sp, #48	; 0x30
 80053f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f2:	f107 031c 	add.w	r3, r7, #28
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	4b69      	ldr	r3, [pc, #420]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a68      	ldr	r2, [pc, #416]	; (80055ac <MX_GPIO_Init+0x1c0>)
 800540c:	f043 0310 	orr.w	r3, r3, #16
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b66      	ldr	r3, [pc, #408]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	4b62      	ldr	r3, [pc, #392]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	4a61      	ldr	r2, [pc, #388]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005428:	f043 0304 	orr.w	r3, r3, #4
 800542c:	6313      	str	r3, [r2, #48]	; 0x30
 800542e:	4b5f      	ldr	r3, [pc, #380]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	4b5b      	ldr	r3, [pc, #364]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a5a      	ldr	r2, [pc, #360]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b58      	ldr	r3, [pc, #352]	; (80055ac <MX_GPIO_Init+0x1c0>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	4b54      	ldr	r3, [pc, #336]	; (80055ac <MX_GPIO_Init+0x1c0>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a53      	ldr	r2, [pc, #332]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b51      	ldr	r3, [pc, #324]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	4b4d      	ldr	r3, [pc, #308]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	4a4c      	ldr	r2, [pc, #304]	; (80055ac <MX_GPIO_Init+0x1c0>)
 800547c:	f043 0302 	orr.w	r3, r3, #2
 8005480:	6313      	str	r3, [r2, #48]	; 0x30
 8005482:	4b4a      	ldr	r3, [pc, #296]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	4b46      	ldr	r3, [pc, #280]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	4a45      	ldr	r2, [pc, #276]	; (80055ac <MX_GPIO_Init+0x1c0>)
 8005498:	f043 0308 	orr.w	r3, r3, #8
 800549c:	6313      	str	r3, [r2, #48]	; 0x30
 800549e:	4b43      	ldr	r3, [pc, #268]	; (80055ac <MX_GPIO_Init+0x1c0>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ROW_3_Pin|ROW_2_Pin|ROW_1_Pin|ROW_0_Pin, GPIO_PIN_RESET);
 80054aa:	2200      	movs	r2, #0
 80054ac:	210f      	movs	r1, #15
 80054ae:	4840      	ldr	r0, [pc, #256]	; (80055b0 <MX_GPIO_Init+0x1c4>)
 80054b0:	f7fb fb84 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80054b4:	2200      	movs	r2, #0
 80054b6:	2140      	movs	r1, #64	; 0x40
 80054b8:	483e      	ldr	r0, [pc, #248]	; (80055b4 <MX_GPIO_Init+0x1c8>)
 80054ba:	f7fb fb7f 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 80054be:	2201      	movs	r2, #1
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	483c      	ldr	r0, [pc, #240]	; (80055b4 <MX_GPIO_Init+0x1c8>)
 80054c4:	f7fb fb7a 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80054c8:	2201      	movs	r2, #1
 80054ca:	2102      	movs	r1, #2
 80054cc:	483a      	ldr	r0, [pc, #232]	; (80055b8 <MX_GPIO_Init+0x1cc>)
 80054ce:	f7fb fb75 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = COL_3_Pin|COL_2_Pin|COL_1_Pin;
 80054d2:	232c      	movs	r3, #44	; 0x2c
 80054d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054d6:	2300      	movs	r3, #0
 80054d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80054da:	2302      	movs	r3, #2
 80054dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054de:	f107 031c 	add.w	r3, r7, #28
 80054e2:	4619      	mov	r1, r3
 80054e4:	4835      	ldr	r0, [pc, #212]	; (80055bc <MX_GPIO_Init+0x1d0>)
 80054e6:	f7fb f9b7 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = COL_0_Pin;
 80054ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054f0:	2300      	movs	r3, #0
 80054f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80054f4:	2302      	movs	r3, #2
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COL_0_GPIO_Port, &GPIO_InitStruct);
 80054f8:	f107 031c 	add.w	r3, r7, #28
 80054fc:	4619      	mov	r1, r3
 80054fe:	482c      	ldr	r0, [pc, #176]	; (80055b0 <MX_GPIO_Init+0x1c4>)
 8005500:	f7fb f9aa 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = ROW_3_Pin|ROW_2_Pin|ROW_1_Pin|ROW_0_Pin;
 8005504:	230f      	movs	r3, #15
 8005506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005508:	2301      	movs	r3, #1
 800550a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550c:	2300      	movs	r3, #0
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005510:	2300      	movs	r3, #0
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005514:	f107 031c 	add.w	r3, r7, #28
 8005518:	4619      	mov	r1, r3
 800551a:	4825      	ldr	r0, [pc, #148]	; (80055b0 <MX_GPIO_Init+0x1c4>)
 800551c:	f7fb f99c 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin;
 8005520:	23c0      	movs	r3, #192	; 0xc0
 8005522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005524:	2301      	movs	r3, #1
 8005526:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005528:	2300      	movs	r3, #0
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552c:	2300      	movs	r3, #0
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005530:	f107 031c 	add.w	r3, r7, #28
 8005534:	4619      	mov	r1, r3
 8005536:	481f      	ldr	r0, [pc, #124]	; (80055b4 <MX_GPIO_Init+0x1c8>)
 8005538:	f7fb f98e 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800553c:	2302      	movs	r3, #2
 800553e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005540:	2301      	movs	r3, #1
 8005542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005544:	2301      	movs	r3, #1
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005548:	2301      	movs	r3, #1
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800554c:	f107 031c 	add.w	r3, r7, #28
 8005550:	4619      	mov	r1, r3
 8005552:	4819      	ldr	r0, [pc, #100]	; (80055b8 <MX_GPIO_Init+0x1cc>)
 8005554:	f7fb f980 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LIMIT_X_Pin|LIMIT_Y_Pin|LIMIT_Z_Pin;
 8005558:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800555c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800555e:	2300      	movs	r3, #0
 8005560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005562:	2302      	movs	r3, #2
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005566:	f107 031c 	add.w	r3, r7, #28
 800556a:	4619      	mov	r1, r3
 800556c:	4812      	ldr	r0, [pc, #72]	; (80055b8 <MX_GPIO_Init+0x1cc>)
 800556e:	f7fb f973 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8005572:	2308      	movs	r3, #8
 8005574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005576:	2300      	movs	r3, #0
 8005578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800557a:	2302      	movs	r3, #2
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 800557e:	f107 031c 	add.w	r3, r7, #28
 8005582:	4619      	mov	r1, r3
 8005584:	480e      	ldr	r0, [pc, #56]	; (80055c0 <MX_GPIO_Init+0x1d4>)
 8005586:	f7fb f967 	bl	8000858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_WR_Pin;
 800558a:	2340      	movs	r3, #64	; 0x40
 800558c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800558e:	2300      	movs	r3, #0
 8005590:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005592:	2300      	movs	r3, #0
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SD_WR_GPIO_Port, &GPIO_InitStruct);
 8005596:	f107 031c 	add.w	r3, r7, #28
 800559a:	4619      	mov	r1, r3
 800559c:	4808      	ldr	r0, [pc, #32]	; (80055c0 <MX_GPIO_Init+0x1d4>)
 800559e:	f7fb f95b 	bl	8000858 <HAL_GPIO_Init>

}
 80055a2:	bf00      	nop
 80055a4:	3730      	adds	r7, #48	; 0x30
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40020800 	.word	0x40020800
 80055b4:	40020000 	.word	0x40020000
 80055b8:	40020400 	.word	0x40020400
 80055bc:	40021000 	.word	0x40021000
 80055c0:	40020c00 	.word	0x40020c00

080055c4 <SystemStartup>:
#include "main.h"

void SystemStartup(void) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
//	stepm_init();
//	spindle_init();
	#ifdef HAS_ENCODER
		encoder_int();
	#endif
	LCD_Init();
 80055c8:	f000 fcdc 	bl	8005f84 <LCD_Init>
	LCD_Clear(0);
 80055cc:	2000      	movs	r0, #0
 80055ce:	f004 f881 	bl	80096d4 <LCD_Clear>
	win_showMsgWin();
 80055d2:	f004 fe93 	bl	800a2fc <win_showMsgWin>
	scr_puts(" ----- CNC CWTeam V0.0.1 -----");
 80055d6:	4802      	ldr	r0, [pc, #8]	; (80055e0 <SystemStartup+0x1c>)
 80055d8:	f004 fdf2 	bl	800a1c0 <scr_puts>
//	USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_ID, &USR_desc, &USBD_MSC_cb, &USR_cb);
}
 80055dc:	bf00      	nop
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	0800acec 	.word	0x0800acec

080055e4 <LCD_WR_REG>:
_lcd_dev lcddev;
uint16_t POINT_COLOR = White;
uint16_t BACK_COLOR  = Black;

void LCD_WR_REG(uint16_t regval)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//Р вЂњР вЂ°Р вЂ™РІвЂћвЂ“Р вЂњРІР‚СљР вЂњРЎвЂњ-O2Р вЂњРІР‚СљР вЂњРІР‚В¦Р вЂ™Р’В»Р вЂ™Р вЂЎР вЂ™Р’ВµР вЂњРІР‚С›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎвЂќР вЂњР вЂ ,Р вЂ™Р’В±Р вЂњРїС—Р…Р вЂњРЎвЂ™Р вЂњР’В«Р вЂ™Р вЂ Р вЂњРўС’Р вЂњРІвЂљВ¬Р вЂњР’В«Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂњРІР‚пїЅР вЂњРІР‚СљР вЂњР вЂ°Р вЂ™Р’В±
	LCD->LCD_REG=regval;//Р вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂњРІвЂљВ¬Р вЂњР’В«Р вЂњРІР‚в„ўР вЂ™Р вЂћР вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂ™РЎпїЅР вЂњРІР‚С›Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњРІР‚В Р вЂњР’В·Р вЂњРЎвЂ™Р вЂњР вЂ Р вЂ™РЎвЂќР вЂњРІР‚В¦
 80055ee:	4a04      	ldr	r2, [pc, #16]	; (8005600 <LCD_WR_REG+0x1c>)
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	8013      	strh	r3, [r2, #0]
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	6007fffe 	.word	0x6007fffe

08005604 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	80fb      	strh	r3, [r7, #6]
	data=data;			//Р вЂњР вЂ°Р вЂ™РІвЂћвЂ“Р вЂњРІР‚СљР вЂњРЎвЂњ-O2Р вЂњРІР‚СљР вЂњРІР‚В¦Р вЂ™Р’В»Р вЂ™Р вЂЎР вЂ™Р’ВµР вЂњРІР‚С›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎвЂќР вЂњР вЂ ,Р вЂ™Р’В±Р вЂњРїС—Р…Р вЂњРЎвЂ™Р вЂњР’В«Р вЂ™Р вЂ Р вЂњРўС’Р вЂњРІвЂљВ¬Р вЂњР’В«Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂњРІР‚пїЅР вЂњРІР‚СљР вЂњР вЂ°Р вЂ™Р’В±
	LCD->LCD_RAM=data;
 800560e:	4a04      	ldr	r2, [pc, #16]	; (8005620 <LCD_WR_DATA+0x1c>)
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	8053      	strh	r3, [r2, #2]
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	6007fffe 	.word	0x6007fffe

08005624 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
	uint16_t ram;			//Р вЂ™Р’В·Р вЂњР вЂљР вЂњРІР‚вЂњР вЂ™РІвЂћвЂ“Р вЂ™Р’В±Р вЂ™Р’В»Р вЂњРІР‚СљР вЂњРІР‚В¦Р вЂ™Р’В»Р вЂ™Р вЂЎ
	ram=LCD->LCD_RAM;
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <LCD_RD_DATA+0x1c>)
 800562c:	885b      	ldrh	r3, [r3, #2]
 800562e:	80fb      	strh	r3, [r7, #6]
	return ram;
 8005630:	88fb      	ldrh	r3, [r7, #6]
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	6007fffe 	.word	0x6007fffe

08005644 <LCD_WriteReg>:

void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	460a      	mov	r2, r1
 800564e:	80fb      	strh	r3, [r7, #6]
 8005650:	4613      	mov	r3, r2
 8005652:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//Р вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂњРІвЂљВ¬Р вЂњР’В«Р вЂњРІР‚в„ўР вЂ™Р вЂћР вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂ™РЎпїЅР вЂњРІР‚С›Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњРІР‚В Р вЂњР’В·Р вЂњРЎвЂ™Р вЂњР вЂ Р вЂ™РЎвЂќР вЂњРІР‚В¦
 8005654:	4a05      	ldr	r2, [pc, #20]	; (800566c <LCD_WriteReg+0x28>)
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//Р вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂњРІвЂљВ¬Р вЂњР’В«Р вЂњР вЂ°Р вЂњР вЂ¦Р вЂ™РЎвЂўР вЂњРЎСљ
 800565a:	4a04      	ldr	r2, [pc, #16]	; (800566c <LCD_WriteReg+0x28>)
 800565c:	88bb      	ldrh	r3, [r7, #4]
 800565e:	8053      	strh	r3, [r2, #2]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	6007fffe 	.word	0x6007fffe

08005670 <LCD_ReadReg>:

uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//Р вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂњРІвЂљВ¬Р вЂњР’В«Р вЂњРІР‚в„ўР вЂ™Р вЂћР вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂ™РЎпїЅР вЂњРІР‚С›Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњРІР‚В Р вЂњР’В·Р вЂњРЎвЂ™Р вЂњР вЂ Р вЂ™РЎвЂќР вЂњРІР‚В¦
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff ffb1 	bl	80055e4 <LCD_WR_REG>
 8005682:	f44f 738c 	mov.w	r3, #280	; 0x118
 8005686:	60fb      	str	r3, [r7, #12]


inline void _delay_loops(__IO uint32_t loops) __attribute__ ((always_inline));

inline void _delay_loops(__IO uint32_t loops) {
   __asm volatile (
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3b01      	subs	r3, #1
 800568c:	d1fd      	bne.n	800568a <LCD_ReadReg+0x1a>
 800568e:	60fb      	str	r3, [r7, #12]
	_delay_us(5);
	return LCD_RD_DATA();		//Р вЂ™Р’В·Р вЂ™Р’ВµР вЂ™Р’В»Р вЂњРїС—Р…Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂњРІР‚вЂњР вЂ™Р’Вµ
 8005690:	f7ff ffc8 	bl	8005624 <LCD_RD_DATA>
 8005694:	4603      	mov	r3, r0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <LCD_WriteRAM_Prepare>:

void LCD_WriteRAM_Prepare(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 80056a4:	4b04      	ldr	r3, [pc, #16]	; (80056b8 <LCD_WriteRAM_Prepare+0x18>)
 80056a6:	4a05      	ldr	r2, [pc, #20]	; (80056bc <LCD_WriteRAM_Prepare+0x1c>)
 80056a8:	8912      	ldrh	r2, [r2, #8]
 80056aa:	801a      	strh	r2, [r3, #0]
}
 80056ac:	bf00      	nop
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	6007fffe 	.word	0x6007fffe
 80056bc:	20000508 	.word	0x20000508

080056c0 <LCD_SetCursor>:
	else if(lcddev.id==0X5510)LCD_WR_REG(0X2800);	//Р вЂ™РІвЂћвЂ“Р вЂњРїС—Р…Р вЂ™Р’В±Р вЂњРІР‚СћР вЂњР РЏР вЂњРІР‚СњР вЂњР вЂ°Р вЂ™РЎвЂў
	else LCD_WriteReg(R7,0x0);//Р вЂ™РІвЂћвЂ“Р вЂњРїС—Р…Р вЂ™Р’В±Р вЂњРІР‚СћР вЂњР РЏР вЂњРІР‚СњР вЂњР вЂ°Р вЂ™РЎвЂў
}

void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	460a      	mov	r2, r1
 80056ca:	80fb      	strh	r3, [r7, #6]
 80056cc:	4613      	mov	r3, r2
 80056ce:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 80056d0:	4b5b      	ldr	r3, [pc, #364]	; (8005840 <LCD_SetCursor+0x180>)
 80056d2:	889b      	ldrh	r3, [r3, #4]
 80056d4:	f249 3241 	movw	r2, #37697	; 0x9341
 80056d8:	4293      	cmp	r3, r2
 80056da:	d005      	beq.n	80056e8 <LCD_SetCursor+0x28>
 80056dc:	4b58      	ldr	r3, [pc, #352]	; (8005840 <LCD_SetCursor+0x180>)
 80056de:	889b      	ldrh	r3, [r3, #4]
 80056e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d122      	bne.n	800572e <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80056e8:	4b55      	ldr	r3, [pc, #340]	; (8005840 <LCD_SetCursor+0x180>)
 80056ea:	895b      	ldrh	r3, [r3, #10]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff ff79 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff83 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(Xpos&0XFF);
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	b29b      	uxth	r3, r3
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff7d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800570a:	4b4d      	ldr	r3, [pc, #308]	; (8005840 <LCD_SetCursor+0x180>)
 800570c:	899b      	ldrh	r3, [r3, #12]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff ff68 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);
 8005714:	88bb      	ldrh	r3, [r7, #4]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	b29b      	uxth	r3, r3
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff ff72 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(Ypos&0XFF);
 8005720:	88bb      	ldrh	r3, [r7, #4]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	b29b      	uxth	r3, r3
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff ff6c 	bl	8005604 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“Р вЂњРІР‚В Р вЂњР’В¤Р вЂњР вЂ°Р вЂ™Р’ВµР вЂ™РЎвЂўР вЂњР РЉР вЂњР вЂ°Р вЂњРІР‚РЋР вЂ™Р’ВµР вЂњР’В·Р вЂњРІР‚вЂќР вЂ™Р вЂћx,yР вЂњРІР‚вЂќР вЂњРЎвЂ�Р вЂ™Р’В±Р вЂњР вЂћ
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 800572c:	e083      	b.n	8005836 <LCD_SetCursor+0x176>
	}else if(lcddev.id==0X6804)
 800572e:	4b44      	ldr	r3, [pc, #272]	; (8005840 <LCD_SetCursor+0x180>)
 8005730:	889b      	ldrh	r3, [r3, #4]
 8005732:	f646 0204 	movw	r2, #26628	; 0x6804
 8005736:	4293      	cmp	r3, r2
 8005738:	d12d      	bne.n	8005796 <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РўвЂ�Р вЂ™Р’В¦Р вЂњР вЂљР вЂњР’В­
 800573a:	4b41      	ldr	r3, [pc, #260]	; (8005840 <LCD_SetCursor+0x180>)
 800573c:	799b      	ldrb	r3, [r3, #6]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d106      	bne.n	8005750 <LCD_SetCursor+0x90>
 8005742:	4b3f      	ldr	r3, [pc, #252]	; (8005840 <LCD_SetCursor+0x180>)
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8005750:	4b3b      	ldr	r3, [pc, #236]	; (8005840 <LCD_SetCursor+0x180>)
 8005752:	895b      	ldrh	r3, [r3, #10]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff ff45 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	b29b      	uxth	r3, r3
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff ff4f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(Xpos&0XFF);
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	b29b      	uxth	r3, r3
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff ff49 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8005772:	4b33      	ldr	r3, [pc, #204]	; (8005840 <LCD_SetCursor+0x180>)
 8005774:	899b      	ldrh	r3, [r3, #12]
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff ff34 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);
 800577c:	88bb      	ldrh	r3, [r7, #4]
 800577e:	0a1b      	lsrs	r3, r3, #8
 8005780:	b29b      	uxth	r3, r3
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff ff3e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(Ypos&0XFF);
 8005788:	88bb      	ldrh	r3, [r7, #4]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	b29b      	uxth	r3, r3
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff ff38 	bl	8005604 <LCD_WR_DATA>
}
 8005794:	e04f      	b.n	8005836 <LCD_SetCursor+0x176>
	}else if(lcddev.id==0X5510)
 8005796:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <LCD_SetCursor+0x180>)
 8005798:	889b      	ldrh	r3, [r3, #4]
 800579a:	f245 5210 	movw	r2, #21776	; 0x5510
 800579e:	4293      	cmp	r3, r2
 80057a0:	d130      	bne.n	8005804 <LCD_SetCursor+0x144>
		LCD_WR_REG(lcddev.setxcmd);
 80057a2:	4b27      	ldr	r3, [pc, #156]	; (8005840 <LCD_SetCursor+0x180>)
 80057a4:	895b      	ldrh	r3, [r3, #10]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ff1c 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff ff26 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);
 80057b8:	4b21      	ldr	r3, [pc, #132]	; (8005840 <LCD_SetCursor+0x180>)
 80057ba:	895b      	ldrh	r3, [r3, #10]
 80057bc:	3301      	adds	r3, #1
 80057be:	b29b      	uxth	r3, r3
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7ff ff0f 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos&0XFF);
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ff19 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80057d2:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <LCD_SetCursor+0x180>)
 80057d4:	899b      	ldrh	r3, [r3, #12]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff ff04 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);
 80057dc:	88bb      	ldrh	r3, [r7, #4]
 80057de:	0a1b      	lsrs	r3, r3, #8
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff ff0e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);
 80057e8:	4b15      	ldr	r3, [pc, #84]	; (8005840 <LCD_SetCursor+0x180>)
 80057ea:	899b      	ldrh	r3, [r3, #12]
 80057ec:	3301      	adds	r3, #1
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fef7 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos&0XFF);
 80057f6:	88bb      	ldrh	r3, [r7, #4]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff ff01 	bl	8005604 <LCD_WR_DATA>
}
 8005802:	e018      	b.n	8005836 <LCD_SetCursor+0x176>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“Р вЂњРІР‚В Р вЂњР’В¤Р вЂњР вЂ°Р вЂ™Р’ВµР вЂ™РЎвЂўР вЂњР РЉР вЂњР вЂ°Р вЂњРІР‚РЋР вЂ™Р’ВµР вЂњР’В·Р вЂњРІР‚вЂќР вЂ™Р вЂћx,yР вЂњРІР‚вЂќР вЂњРЎвЂ�Р вЂ™Р’В±Р вЂњР вЂћ
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <LCD_SetCursor+0x180>)
 8005806:	799b      	ldrb	r3, [r3, #6]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d106      	bne.n	800581a <LCD_SetCursor+0x15a>
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <LCD_SetCursor+0x180>)
 800580e:	881a      	ldrh	r2, [r3, #0]
 8005810:	88fb      	ldrh	r3, [r7, #6]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <LCD_SetCursor+0x180>)
 800581c:	895b      	ldrh	r3, [r3, #10]
 800581e:	88fa      	ldrh	r2, [r7, #6]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff ff0e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <LCD_SetCursor+0x180>)
 800582a:	899b      	ldrh	r3, [r3, #12]
 800582c:	88ba      	ldrh	r2, [r7, #4]
 800582e:	4611      	mov	r1, r2
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff ff07 	bl	8005644 <LCD_WriteReg>
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000508 	.word	0x20000508

08005844 <LCD_Scan_Dir>:

void LCD_Scan_Dir(uint8_t dir)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 800584e:	2300      	movs	r3, #0
 8005850:	82fb      	strh	r3, [r7, #22]
	uint16_t dirreg=0;
 8005852:	2300      	movs	r3, #0
 8005854:	82bb      	strh	r3, [r7, #20]
	uint16_t temp;
	uint16_t xsize,ysize;
	if(lcddev.dir==1&&lcddev.id!=0X6804)//Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™Р в‚¬Р вЂ™Р’В¬Р вЂ™Р’В¶Р вЂњРІР‚Сњ6804Р вЂ™Р вЂ Р вЂ™Р’В»Р вЂ™РЎвЂ�Р вЂњРІР‚С›Р вЂ™Р’В±Р вЂњР’В¤Р вЂњРІР‚В°Р вЂ™Р РѓР вЂњРЎвЂњР вЂњР РѓР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂњР РЏР вЂњР вЂ Р вЂ™Р в‚¬Р вЂ™Р Р‹
 8005856:	4b79      	ldr	r3, [pc, #484]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005858:	799b      	ldrb	r3, [r3, #6]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d134      	bne.n	80058c8 <LCD_Scan_Dir+0x84>
 800585e:	4b77      	ldr	r3, [pc, #476]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005860:	889b      	ldrh	r3, [r3, #4]
 8005862:	f646 0204 	movw	r2, #26628	; 0x6804
 8005866:	4293      	cmp	r3, r2
 8005868:	d02e      	beq.n	80058c8 <LCD_Scan_Dir+0x84>
	{
		switch(dir)//Р вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂњР РЏР вЂњР вЂ Р вЂњРІР‚вЂќР вЂ™Р вЂћР вЂ™Р’В»Р вЂ™Р’В»
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	2b07      	cmp	r3, #7
 800586e:	d82b      	bhi.n	80058c8 <LCD_Scan_Dir+0x84>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <LCD_Scan_Dir+0x34>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	08005899 	.word	0x08005899
 800587c:	0800589f 	.word	0x0800589f
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058ab 	.word	0x080058ab
 8005888:	080058b1 	.word	0x080058b1
 800588c:	080058b7 	.word	0x080058b7
 8005890:	080058bd 	.word	0x080058bd
 8005894:	080058c3 	.word	0x080058c3
		{
			case 0:dir=6;break;
 8005898:	2306      	movs	r3, #6
 800589a:	71fb      	strb	r3, [r7, #7]
 800589c:	e014      	b.n	80058c8 <LCD_Scan_Dir+0x84>
			case 1:dir=7;break;
 800589e:	2307      	movs	r3, #7
 80058a0:	71fb      	strb	r3, [r7, #7]
 80058a2:	e011      	b.n	80058c8 <LCD_Scan_Dir+0x84>
			case 2:dir=4;break;
 80058a4:	2304      	movs	r3, #4
 80058a6:	71fb      	strb	r3, [r7, #7]
 80058a8:	e00e      	b.n	80058c8 <LCD_Scan_Dir+0x84>
			case 3:dir=5;break;
 80058aa:	2305      	movs	r3, #5
 80058ac:	71fb      	strb	r3, [r7, #7]
 80058ae:	e00b      	b.n	80058c8 <LCD_Scan_Dir+0x84>
			case 4:dir=1;break;
 80058b0:	2301      	movs	r3, #1
 80058b2:	71fb      	strb	r3, [r7, #7]
 80058b4:	e008      	b.n	80058c8 <LCD_Scan_Dir+0x84>
			case 5:dir=0;break;
 80058b6:	2300      	movs	r3, #0
 80058b8:	71fb      	strb	r3, [r7, #7]
 80058ba:	e005      	b.n	80058c8 <LCD_Scan_Dir+0x84>
			case 6:dir=3;break;
 80058bc:	2303      	movs	r3, #3
 80058be:	71fb      	strb	r3, [r7, #7]
 80058c0:	e002      	b.n	80058c8 <LCD_Scan_Dir+0x84>
			case 7:dir=2;break;
 80058c2:	2302      	movs	r3, #2
 80058c4:	71fb      	strb	r3, [r7, #7]
 80058c6:	bf00      	nop
		}
	}
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510)//9341/6804/5310/5510,Р вЂ™РЎвЂќР вЂњРЎС™Р вЂњР Р‰Р вЂњРїС—Р…Р вЂњР вЂ°Р вЂњРЎС›
 80058c8:	4b5c      	ldr	r3, [pc, #368]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80058ca:	889b      	ldrh	r3, [r3, #4]
 80058cc:	f249 3241 	movw	r2, #37697	; 0x9341
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d012      	beq.n	80058fa <LCD_Scan_Dir+0xb6>
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80058d6:	889b      	ldrh	r3, [r3, #4]
 80058d8:	f646 0204 	movw	r2, #26628	; 0x6804
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00c      	beq.n	80058fa <LCD_Scan_Dir+0xb6>
 80058e0:	4b56      	ldr	r3, [pc, #344]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80058e2:	889b      	ldrh	r3, [r3, #4]
 80058e4:	f245 3210 	movw	r2, #21264	; 0x5310
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d006      	beq.n	80058fa <LCD_Scan_Dir+0xb6>
 80058ec:	4b53      	ldr	r3, [pc, #332]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80058ee:	889b      	ldrh	r3, [r3, #4]
 80058f0:	f245 5210 	movw	r2, #21776	; 0x5510
 80058f4:	4293      	cmp	r3, r2
 80058f6:	f040 8143 	bne.w	8005b80 <LCD_Scan_Dir+0x33c>
	{
		switch(dir)
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	2b07      	cmp	r3, #7
 80058fe:	d836      	bhi.n	800596e <LCD_Scan_Dir+0x12a>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <LCD_Scan_Dir+0xc4>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	0800596f 	.word	0x0800596f
 800590c:	08005929 	.word	0x08005929
 8005910:	08005933 	.word	0x08005933
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005947 	.word	0x08005947
 800591c:	08005951 	.word	0x08005951
 8005920:	0800595b 	.word	0x0800595b
 8005924:	08005965 	.word	0x08005965
		{
			case L2R_U2D://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚СљР вЂњРІР‚в„ў,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњР РЏР вЂњРІР‚С™
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚СљР вЂњРІР‚в„ў,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚В°Р вЂњР РЏ
				regval|=(1<<7)|(0<<6)|(0<<5);
 8005928:	8afb      	ldrh	r3, [r7, #22]
 800592a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592e:	82fb      	strh	r3, [r7, #22]
				break;
 8005930:	e01d      	b.n	800596e <LCD_Scan_Dir+0x12a>
			case R2L_U2D://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚СљР вЂњРІР‚в„ўР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎвЂ“,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњР РЏР вЂњРІР‚С™
				regval|=(0<<7)|(1<<6)|(0<<5);
 8005932:	8afb      	ldrh	r3, [r7, #22]
 8005934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005938:	82fb      	strh	r3, [r7, #22]
				break;
 800593a:	e018      	b.n	800596e <LCD_Scan_Dir+0x12a>
			case R2L_D2U://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚СљР вЂњРІР‚в„ўР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎвЂ“,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚В°Р вЂњР РЏ
				regval|=(1<<7)|(1<<6)|(0<<5);
 800593c:	8afb      	ldrh	r3, [r7, #22]
 800593e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005942:	82fb      	strh	r3, [r7, #22]
				break;
 8005944:	e013      	b.n	800596e <LCD_Scan_Dir+0x12a>
			case U2D_L2R://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњР РЏР вЂњРІР‚С™,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚СљР вЂњРІР‚в„ў
				regval|=(0<<7)|(0<<6)|(1<<5);
 8005946:	8afb      	ldrh	r3, [r7, #22]
 8005948:	f043 0320 	orr.w	r3, r3, #32
 800594c:	82fb      	strh	r3, [r7, #22]
				break;
 800594e:	e00e      	b.n	800596e <LCD_Scan_Dir+0x12a>
			case U2D_R2L://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњР РЏР вЂњРІР‚С™,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚СљР вЂњРІР‚в„ўР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎвЂ“
				regval|=(0<<7)|(1<<6)|(1<<5);
 8005950:	8afb      	ldrh	r3, [r7, #22]
 8005952:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005956:	82fb      	strh	r3, [r7, #22]
				break;
 8005958:	e009      	b.n	800596e <LCD_Scan_Dir+0x12a>
			case D2U_L2R://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚В°Р вЂњР РЏ,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚СљР вЂњРІР‚в„ў
				regval|=(1<<7)|(0<<6)|(1<<5);
 800595a:	8afb      	ldrh	r3, [r7, #22]
 800595c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005960:	82fb      	strh	r3, [r7, #22]
				break;
 8005962:	e004      	b.n	800596e <LCD_Scan_Dir+0x12a>
			case D2U_R2L://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚В°Р вЂњР РЏ,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚СљР вЂњРІР‚в„ўР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎвЂ“
				regval|=(1<<7)|(1<<6)|(1<<5);
 8005964:	8afb      	ldrh	r3, [r7, #22]
 8005966:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800596a:	82fb      	strh	r3, [r7, #22]
				break;
 800596c:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 800596e:	4b33      	ldr	r3, [pc, #204]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005970:	889b      	ldrh	r3, [r3, #4]
 8005972:	f245 5210 	movw	r2, #21776	; 0x5510
 8005976:	4293      	cmp	r3, r2
 8005978:	d103      	bne.n	8005982 <LCD_Scan_Dir+0x13e>
 800597a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800597e:	82bb      	strh	r3, [r7, #20]
 8005980:	e001      	b.n	8005986 <LCD_Scan_Dir+0x142>
		else dirreg=0X36;
 8005982:	2336      	movs	r3, #54	; 0x36
 8005984:	82bb      	strh	r3, [r7, #20]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510))regval|=0X08;//5310/5510Р вЂ™Р вЂ Р вЂ™Р’В»Р вЂњРЎвЂ™Р вЂњР РѓР вЂњРІР‚в„ўР вЂ™Р вЂћBGR
 8005986:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005988:	889b      	ldrh	r3, [r3, #4]
 800598a:	f245 3210 	movw	r2, #21264	; 0x5310
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <LCD_Scan_Dir+0x162>
 8005992:	4b2a      	ldr	r3, [pc, #168]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005994:	889b      	ldrh	r3, [r3, #4]
 8005996:	f245 5210 	movw	r2, #21776	; 0x5510
 800599a:	4293      	cmp	r3, r2
 800599c:	d003      	beq.n	80059a6 <LCD_Scan_Dir+0x162>
 800599e:	8afb      	ldrh	r3, [r7, #22]
 80059a0:	f043 0308 	orr.w	r3, r3, #8
 80059a4:	82fb      	strh	r3, [r7, #22]
		if(lcddev.id==0X6804)regval|=0x02;//6804Р вЂ™Р’ВµР вЂњРІР‚С›BIT6Р вЂ™РЎвЂќР вЂњР РЉ9341Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂ™Р’В·Р вЂ™РўвЂ�Р вЂњР С“Р вЂњРІР‚в„–
 80059a6:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059a8:	889b      	ldrh	r3, [r3, #4]
 80059aa:	f646 0204 	movw	r2, #26628	; 0x6804
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d103      	bne.n	80059ba <LCD_Scan_Dir+0x176>
 80059b2:	8afb      	ldrh	r3, [r7, #22]
 80059b4:	f043 0302 	orr.w	r3, r3, #2
 80059b8:	82fb      	strh	r3, [r7, #22]
		LCD_WriteReg(dirreg,regval);
 80059ba:	8afa      	ldrh	r2, [r7, #22]
 80059bc:	8abb      	ldrh	r3, [r7, #20]
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fe3f 	bl	8005644 <LCD_WriteReg>
 		if((regval&0X20)||lcddev.dir==1)
 80059c6:	8afb      	ldrh	r3, [r7, #22]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d103      	bne.n	80059d8 <LCD_Scan_Dir+0x194>
 80059d0:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059d2:	799b      	ldrb	r3, [r3, #6]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d110      	bne.n	80059fa <LCD_Scan_Dir+0x1b6>
		{
			if(lcddev.width<lcddev.height)//Р вЂ™Р вЂ¦Р вЂ™Р’В»Р вЂ™Р’В»Р вЂ™Р’В»X,Y
 80059d8:	4b18      	ldr	r3, [pc, #96]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059da:	881a      	ldrh	r2, [r3, #0]
 80059dc:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059de:	885b      	ldrh	r3, [r3, #2]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d21a      	bcs.n	8005a1a <LCD_Scan_Dir+0x1d6>
			{
				temp=lcddev.width;
 80059e4:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	81fb      	strh	r3, [r7, #14]
				lcddev.width=lcddev.height;
 80059ea:	4b14      	ldr	r3, [pc, #80]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059ec:	885a      	ldrh	r2, [r3, #2]
 80059ee:	4b13      	ldr	r3, [pc, #76]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059f0:	801a      	strh	r2, [r3, #0]
				lcddev.height=temp;
 80059f2:	4a12      	ldr	r2, [pc, #72]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	8053      	strh	r3, [r2, #2]
			if(lcddev.width<lcddev.height)//Р вЂ™Р вЂ¦Р вЂ™Р’В»Р вЂ™Р’В»Р вЂ™Р’В»X,Y
 80059f8:	e00f      	b.n	8005a1a <LCD_Scan_Dir+0x1d6>
 			}
		}else
		{
			if(lcddev.width>lcddev.height)//Р вЂ™Р вЂ¦Р вЂ™Р’В»Р вЂ™Р’В»Р вЂ™Р’В»X,Y
 80059fa:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 80059fc:	881a      	ldrh	r2, [r3, #0]
 80059fe:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a00:	885b      	ldrh	r3, [r3, #2]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d909      	bls.n	8005a1a <LCD_Scan_Dir+0x1d6>
			{
				temp=lcddev.width;
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	81fb      	strh	r3, [r7, #14]
				lcddev.width=lcddev.height;
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a0e:	885a      	ldrh	r2, [r3, #2]
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a12:	801a      	strh	r2, [r3, #0]
				lcddev.height=temp;
 8005a14:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a16:	89fb      	ldrh	r3, [r7, #14]
 8005a18:	8053      	strh	r3, [r2, #2]
 			}
		}
		if(lcddev.dir==1&&lcddev.id!=0X6804)
 8005a1a:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a1c:	799b      	ldrb	r3, [r3, #6]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10e      	bne.n	8005a40 <LCD_Scan_Dir+0x1fc>
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a24:	889b      	ldrh	r3, [r3, #4]
 8005a26:	f646 0204 	movw	r2, #26628	; 0x6804
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d008      	beq.n	8005a40 <LCD_Scan_Dir+0x1fc>
		{
			xsize=lcddev.height;
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a30:	885b      	ldrh	r3, [r3, #2]
 8005a32:	827b      	strh	r3, [r7, #18]
			ysize=lcddev.width;
 8005a34:	4b01      	ldr	r3, [pc, #4]	; (8005a3c <LCD_Scan_Dir+0x1f8>)
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	823b      	strh	r3, [r7, #16]
 8005a3a:	e007      	b.n	8005a4c <LCD_Scan_Dir+0x208>
 8005a3c:	20000508 	.word	0x20000508
		}else
		{
			xsize=lcddev.width;
 8005a40:	4b7b      	ldr	r3, [pc, #492]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	827b      	strh	r3, [r7, #18]
			ysize=lcddev.height;
 8005a46:	4b7a      	ldr	r3, [pc, #488]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005a48:	885b      	ldrh	r3, [r3, #2]
 8005a4a:	823b      	strh	r3, [r7, #16]
		}
		if(lcddev.id==0X5510)
 8005a4c:	4b78      	ldr	r3, [pc, #480]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005a4e:	889b      	ldrh	r3, [r3, #4]
 8005a50:	f245 5210 	movw	r2, #21776	; 0x5510
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d15e      	bne.n	8005b16 <LCD_Scan_Dir+0x2d2>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8005a58:	4b75      	ldr	r3, [pc, #468]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005a5a:	895b      	ldrh	r3, [r3, #10]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fdc1 	bl	80055e4 <LCD_WR_REG>
 8005a62:	2000      	movs	r0, #0
 8005a64:	f7ff fdce 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8005a68:	4b71      	ldr	r3, [pc, #452]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005a6a:	895b      	ldrh	r3, [r3, #10]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff fdb7 	bl	80055e4 <LCD_WR_REG>
 8005a76:	2000      	movs	r0, #0
 8005a78:	f7ff fdc4 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((xsize-1)>>8);
 8005a7c:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005a7e:	895b      	ldrh	r3, [r3, #10]
 8005a80:	3302      	adds	r3, #2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fdad 	bl	80055e4 <LCD_WR_REG>
 8005a8a:	8a7b      	ldrh	r3, [r7, #18]
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	121b      	asrs	r3, r3, #8
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff fdb6 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((xsize-1)&0XFF);
 8005a98:	4b65      	ldr	r3, [pc, #404]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005a9a:	895b      	ldrh	r3, [r3, #10]
 8005a9c:	3303      	adds	r3, #3
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fd9f 	bl	80055e4 <LCD_WR_REG>
 8005aa6:	8a7b      	ldrh	r3, [r7, #18]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff fda7 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8005ab6:	4b5e      	ldr	r3, [pc, #376]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005ab8:	899b      	ldrh	r3, [r3, #12]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff fd92 	bl	80055e4 <LCD_WR_REG>
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	f7ff fd9f 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8005ac6:	4b5a      	ldr	r3, [pc, #360]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005ac8:	899b      	ldrh	r3, [r3, #12]
 8005aca:	3301      	adds	r3, #1
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fd88 	bl	80055e4 <LCD_WR_REG>
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f7ff fd95 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((ysize-1)>>8);
 8005ada:	4b55      	ldr	r3, [pc, #340]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005adc:	899b      	ldrh	r3, [r3, #12]
 8005ade:	3302      	adds	r3, #2
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fd7e 	bl	80055e4 <LCD_WR_REG>
 8005ae8:	8a3b      	ldrh	r3, [r7, #16]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	121b      	asrs	r3, r3, #8
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff fd87 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((ysize-1)&0XFF);
 8005af6:	4b4e      	ldr	r3, [pc, #312]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005af8:	899b      	ldrh	r3, [r3, #12]
 8005afa:	3303      	adds	r3, #3
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fd70 	bl	80055e4 <LCD_WR_REG>
 8005b04:	8a3b      	ldrh	r3, [r7, #16]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fd78 	bl	8005604 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8005b14:	e088      	b.n	8005c28 <LCD_Scan_Dir+0x3e4>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 8005b16:	4b46      	ldr	r3, [pc, #280]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005b18:	895b      	ldrh	r3, [r3, #10]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fd62 	bl	80055e4 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8005b20:	2000      	movs	r0, #0
 8005b22:	f7ff fd6f 	bl	8005604 <LCD_WR_DATA>
 8005b26:	2000      	movs	r0, #0
 8005b28:	f7ff fd6c 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_DATA((xsize-1)>>8);LCD_WR_DATA((xsize-1)&0XFF);
 8005b2c:	8a7b      	ldrh	r3, [r7, #18]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	121b      	asrs	r3, r3, #8
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fd65 	bl	8005604 <LCD_WR_DATA>
 8005b3a:	8a7b      	ldrh	r3, [r7, #18]
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fd5d 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8005b4a:	4b39      	ldr	r3, [pc, #228]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005b4c:	899b      	ldrh	r3, [r3, #12]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff fd48 	bl	80055e4 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8005b54:	2000      	movs	r0, #0
 8005b56:	f7ff fd55 	bl	8005604 <LCD_WR_DATA>
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	f7ff fd52 	bl	8005604 <LCD_WR_DATA>
			LCD_WR_DATA((ysize-1)>>8);LCD_WR_DATA((ysize-1)&0XFF);
 8005b60:	8a3b      	ldrh	r3, [r7, #16]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	121b      	asrs	r3, r3, #8
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fd4b 	bl	8005604 <LCD_WR_DATA>
 8005b6e:	8a3b      	ldrh	r3, [r7, #16]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fd43 	bl	8005604 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8005b7e:	e053      	b.n	8005c28 <LCD_Scan_Dir+0x3e4>
		}
  	}else
	{
		switch(dir)
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	2b07      	cmp	r3, #7
 8005b84:	d835      	bhi.n	8005bf2 <LCD_Scan_Dir+0x3ae>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <LCD_Scan_Dir+0x348>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005bad 	.word	0x08005bad
 8005b90:	08005bb7 	.word	0x08005bb7
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	08005bf3 	.word	0x08005bf3
 8005b9c:	08005bcb 	.word	0x08005bcb
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005bdf 	.word	0x08005bdf
 8005ba8:	08005be9 	.word	0x08005be9
		{
			case L2R_U2D://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚СљР вЂњРІР‚в„ў,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњР РЏР вЂњРІР‚С™
				regval|=(1<<5)|(1<<4)|(0<<3);
 8005bac:	8afb      	ldrh	r3, [r7, #22]
 8005bae:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005bb2:	82fb      	strh	r3, [r7, #22]
				break;
 8005bb4:	e01d      	b.n	8005bf2 <LCD_Scan_Dir+0x3ae>
			case L2R_D2U://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚СљР вЂњРІР‚в„ў,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚В°Р вЂњР РЏ
				regval|=(0<<5)|(1<<4)|(0<<3);
 8005bb6:	8afb      	ldrh	r3, [r7, #22]
 8005bb8:	f043 0310 	orr.w	r3, r3, #16
 8005bbc:	82fb      	strh	r3, [r7, #22]
				break;
 8005bbe:	e018      	b.n	8005bf2 <LCD_Scan_Dir+0x3ae>
			case R2L_U2D://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚СљР вЂњРІР‚в„ўР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎвЂ“,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњР РЏР вЂњРІР‚С™
				regval|=(1<<5)|(0<<4)|(0<<3);
 8005bc0:	8afb      	ldrh	r3, [r7, #22]
 8005bc2:	f043 0320 	orr.w	r3, r3, #32
 8005bc6:	82fb      	strh	r3, [r7, #22]
				break;
 8005bc8:	e013      	b.n	8005bf2 <LCD_Scan_Dir+0x3ae>
			case R2L_D2U://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚СљР вЂњРІР‚в„ўР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎвЂ“,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚В°Р вЂњР РЏ
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњР РЏР вЂњРІР‚С™,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚СљР вЂњРІР‚в„ў
				regval|=(1<<5)|(1<<4)|(1<<3);
 8005bca:	8afb      	ldrh	r3, [r7, #22]
 8005bcc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8005bd0:	82fb      	strh	r3, [r7, #22]
				break;
 8005bd2:	e00e      	b.n	8005bf2 <LCD_Scan_Dir+0x3ae>
			case U2D_R2L://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњР РЏР вЂњРІР‚С™,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚СљР вЂњРІР‚в„ўР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎвЂ“
				regval|=(1<<5)|(0<<4)|(1<<3);
 8005bd4:	8afb      	ldrh	r3, [r7, #22]
 8005bd6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005bda:	82fb      	strh	r3, [r7, #22]
				break;
 8005bdc:	e009      	b.n	8005bf2 <LCD_Scan_Dir+0x3ae>
			case D2U_L2R://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚В°Р вЂњР РЏ,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚СљР вЂњРІР‚в„ў
				regval|=(0<<5)|(1<<4)|(1<<3);
 8005bde:	8afb      	ldrh	r3, [r7, #22]
 8005be0:	f043 0318 	orr.w	r3, r3, #24
 8005be4:	82fb      	strh	r3, [r7, #22]
				break;
 8005be6:	e004      	b.n	8005bf2 <LCD_Scan_Dir+0x3ae>
			case D2U_R2L://Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚В°Р вЂњР РЏ,Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚СљР вЂњРІР‚в„ўР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎвЂ“
				regval|=(0<<5)|(0<<4)|(1<<3);
 8005be8:	8afb      	ldrh	r3, [r7, #22]
 8005bea:	f043 0308 	orr.w	r3, r3, #8
 8005bee:	82fb      	strh	r3, [r7, #22]
				break;
 8005bf0:	bf00      	nop
		}
		if(lcddev.id==0x8989)//8989 IC
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <LCD_Scan_Dir+0x3ec>)
 8005bf4:	889b      	ldrh	r3, [r3, #4]
 8005bf6:	f648 1289 	movw	r2, #35209	; 0x8989
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d108      	bne.n	8005c10 <LCD_Scan_Dir+0x3cc>
		{
			dirreg=0X11;
 8005bfe:	2311      	movs	r3, #17
 8005c00:	82bb      	strh	r3, [r7, #20]
			regval|=0X6040;	//65K
 8005c02:	8afb      	ldrh	r3, [r7, #22]
 8005c04:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8005c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0c:	82fb      	strh	r3, [r7, #22]
 8005c0e:	e005      	b.n	8005c1c <LCD_Scan_Dir+0x3d8>
	 	}else//Р вЂњРІР‚В Р вЂњР’В¤Р вЂњРІР‚в„–Р вЂњР’В»Р вЂњРІР‚РЋР вЂњР вЂ¦Р вЂ™Р’В¶Р вЂ™Р вЂЎIC
		{
			dirreg=0X03;
 8005c10:	2303      	movs	r3, #3
 8005c12:	82bb      	strh	r3, [r7, #20]
			regval|=1<<12;
 8005c14:	8afb      	ldrh	r3, [r7, #22]
 8005c16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c1a:	82fb      	strh	r3, [r7, #22]
		}
		LCD_WriteReg(dirreg,regval);
 8005c1c:	8afa      	ldrh	r2, [r7, #22]
 8005c1e:	8abb      	ldrh	r3, [r7, #20]
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fd0e 	bl	8005644 <LCD_WriteReg>
	}
}
 8005c28:	bf00      	nop
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000508 	.word	0x20000508

08005c34 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD->LCD_RAM=POINT_COLOR;
}

void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	80fb      	strh	r3, [r7, #6]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	80bb      	strh	r3, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8005c46:	4b5f      	ldr	r3, [pc, #380]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005c48:	889b      	ldrh	r3, [r3, #4]
 8005c4a:	f249 3241 	movw	r2, #37697	; 0x9341
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d005      	beq.n	8005c5e <LCD_Fast_DrawPoint+0x2a>
 8005c52:	4b5c      	ldr	r3, [pc, #368]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005c54:	889b      	ldrh	r3, [r3, #4]
 8005c56:	f245 3210 	movw	r2, #21264	; 0x5310
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d122      	bne.n	8005ca4 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8005c5e:	4b59      	ldr	r3, [pc, #356]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005c60:	895b      	ldrh	r3, [r3, #10]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fcbe 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	0a1b      	lsrs	r3, r3, #8
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fcc8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(x&0XFF);
 8005c74:	88fb      	ldrh	r3, [r7, #6]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fcc2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8005c80:	4b50      	ldr	r3, [pc, #320]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005c82:	899b      	ldrh	r3, [r3, #12]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fcad 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);
 8005c8a:	88bb      	ldrh	r3, [r7, #4]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fcb7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(y&0XFF);
 8005c96:	88bb      	ldrh	r3, [r7, #4]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fcb1 	bl	8005604 <LCD_WR_DATA>
 8005ca2:	e083      	b.n	8005dac <LCD_Fast_DrawPoint+0x178>
	}else if(lcddev.id==0X5510)
 8005ca4:	4b47      	ldr	r3, [pc, #284]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005ca6:	889b      	ldrh	r3, [r3, #4]
 8005ca8:	f245 5210 	movw	r2, #21776	; 0x5510
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d130      	bne.n	8005d12 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8005cb0:	4b44      	ldr	r3, [pc, #272]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005cb2:	895b      	ldrh	r3, [r3, #10]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fc95 	bl	80055e4 <LCD_WR_REG>
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff fc9f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8005cc6:	4b3f      	ldr	r3, [pc, #252]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005cc8:	895b      	ldrh	r3, [r3, #10]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fc88 	bl	80055e4 <LCD_WR_REG>
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fc92 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8005ce0:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005ce2:	899b      	ldrh	r3, [r3, #12]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff fc7d 	bl	80055e4 <LCD_WR_REG>
 8005cea:	88bb      	ldrh	r3, [r7, #4]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fc87 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8005cf6:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005cf8:	899b      	ldrh	r3, [r3, #12]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fc70 	bl	80055e4 <LCD_WR_REG>
 8005d04:	88bb      	ldrh	r3, [r7, #4]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fc7a 	bl	8005604 <LCD_WR_DATA>
 8005d10:	e04c      	b.n	8005dac <LCD_Fast_DrawPoint+0x178>
	}else if(lcddev.id==0X6804)
 8005d12:	4b2c      	ldr	r3, [pc, #176]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005d14:	889b      	ldrh	r3, [r3, #4]
 8005d16:	f646 0204 	movw	r2, #26628	; 0x6804
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d12d      	bne.n	8005d7a <LCD_Fast_DrawPoint+0x146>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РўвЂ�Р вЂ™Р’В¦Р вЂњР вЂљР вЂњР’В­
 8005d1e:	4b29      	ldr	r3, [pc, #164]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005d20:	799b      	ldrb	r3, [r3, #6]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d106      	bne.n	8005d34 <LCD_Fast_DrawPoint+0x100>
 8005d26:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005d28:	881a      	ldrh	r2, [r3, #0]
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8005d34:	4b23      	ldr	r3, [pc, #140]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005d36:	895b      	ldrh	r3, [r3, #10]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fc53 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	0a1b      	lsrs	r3, r3, #8
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff fc5d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(x&0XFF);
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fc57 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8005d56:	4b1b      	ldr	r3, [pc, #108]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005d58:	899b      	ldrh	r3, [r3, #12]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fc42 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);
 8005d60:	88bb      	ldrh	r3, [r7, #4]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fc4c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(y&0XFF);
 8005d6c:	88bb      	ldrh	r3, [r7, #4]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fc46 	bl	8005604 <LCD_WR_DATA>
 8005d78:	e018      	b.n	8005dac <LCD_Fast_DrawPoint+0x178>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“Р вЂњРІР‚В Р вЂњР’В¤Р вЂњР вЂ°Р вЂ™Р’ВµР вЂ™РЎвЂўР вЂњР РЉР вЂњР вЂ°Р вЂњРІР‚РЋР вЂ™Р’ВµР вЂњР’В·Р вЂњРІР‚вЂќР вЂ™Р вЂћx,yР вЂњРІР‚вЂќР вЂњРЎвЂ�Р вЂ™Р’В±Р вЂњР вЂћ
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005d7c:	799b      	ldrb	r3, [r3, #6]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d106      	bne.n	8005d90 <LCD_Fast_DrawPoint+0x15c>
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005d84:	881a      	ldrh	r2, [r3, #0]
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005d92:	895b      	ldrh	r3, [r3, #10]
 8005d94:	88fa      	ldrh	r2, [r7, #6]
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fc53 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005da0:	899b      	ldrh	r3, [r3, #12]
 8005da2:	88ba      	ldrh	r2, [r7, #4]
 8005da4:	4611      	mov	r1, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fc4c 	bl	8005644 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <LCD_Fast_DrawPoint+0x194>)
 8005dae:	4a05      	ldr	r2, [pc, #20]	; (8005dc4 <LCD_Fast_DrawPoint+0x190>)
 8005db0:	8912      	ldrh	r2, [r2, #8]
 8005db2:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8005db4:	4a04      	ldr	r2, [pc, #16]	; (8005dc8 <LCD_Fast_DrawPoint+0x194>)
 8005db6:	887b      	ldrh	r3, [r7, #2]
 8005db8:	8053      	strh	r3, [r2, #2]
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000508 	.word	0x20000508
 8005dc8:	6007fffe 	.word	0x6007fffe

08005dcc <LCD_Display_Dir>:

void LCD_Display_Dir(uint8_t dir)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//Р вЂњР вЂ°Р вЂњРЎвЂќР вЂњРІР‚В Р вЂњР С“
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d15f      	bne.n	8005e9c <LCD_Display_Dir+0xd0>
	{
		lcddev.dir=0;	//Р вЂњР вЂ°Р вЂњРЎвЂќР вЂњРІР‚В Р вЂњР С“
 8005ddc:	4b68      	ldr	r3, [pc, #416]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 8005de2:	4b67      	ldr	r3, [pc, #412]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005de4:	22f0      	movs	r2, #240	; 0xf0
 8005de6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8005de8:	4b65      	ldr	r3, [pc, #404]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005dea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005dee:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8005df0:	4b63      	ldr	r3, [pc, #396]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005df2:	889b      	ldrh	r3, [r3, #4]
 8005df4:	f249 3241 	movw	r2, #37697	; 0x9341
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00b      	beq.n	8005e14 <LCD_Display_Dir+0x48>
 8005dfc:	4b60      	ldr	r3, [pc, #384]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005dfe:	889b      	ldrh	r3, [r3, #4]
 8005e00:	f646 0204 	movw	r2, #26628	; 0x6804
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d005      	beq.n	8005e14 <LCD_Display_Dir+0x48>
 8005e08:	4b5d      	ldr	r3, [pc, #372]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e0a:	889b      	ldrh	r3, [r3, #4]
 8005e0c:	f245 3210 	movw	r2, #21264	; 0x5310
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d11e      	bne.n	8005e52 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8005e14:	4b5a      	ldr	r3, [pc, #360]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e16:	222c      	movs	r2, #44	; 0x2c
 8005e18:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8005e1a:	4b59      	ldr	r3, [pc, #356]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e1c:	222a      	movs	r2, #42	; 0x2a
 8005e1e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8005e20:	4b57      	ldr	r3, [pc, #348]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e22:	222b      	movs	r2, #43	; 0x2b
 8005e24:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8005e26:	4b56      	ldr	r3, [pc, #344]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e28:	889b      	ldrh	r3, [r3, #4]
 8005e2a:	f646 0204 	movw	r2, #26628	; 0x6804
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d006      	beq.n	8005e40 <LCD_Display_Dir+0x74>
 8005e32:	4b53      	ldr	r3, [pc, #332]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e34:	889b      	ldrh	r3, [r3, #4]
 8005e36:	f245 3210 	movw	r2, #21264	; 0x5310
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	f040 8097 	bne.w	8005f6e <LCD_Display_Dir+0x1a2>
			{
				lcddev.width=320;
 8005e40:	4b4f      	ldr	r3, [pc, #316]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005e46:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8005e48:	4b4d      	ldr	r3, [pc, #308]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005e4e:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8005e50:	e08d      	b.n	8005f6e <LCD_Display_Dir+0x1a2>
			}
		}else if(lcddev.id==0x5510)
 8005e52:	4b4b      	ldr	r3, [pc, #300]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e54:	889b      	ldrh	r3, [r3, #4]
 8005e56:	f245 5210 	movw	r2, #21776	; 0x5510
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d114      	bne.n	8005e88 <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8005e5e:	4b48      	ldr	r3, [pc, #288]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e60:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8005e64:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8005e66:	4b46      	ldr	r3, [pc, #280]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e68:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8005e6c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8005e6e:	4b44      	ldr	r3, [pc, #272]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e70:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8005e74:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8005e76:	4b42      	ldr	r3, [pc, #264]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005e7c:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8005e7e:	4b40      	ldr	r3, [pc, #256]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e80:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005e84:	805a      	strh	r2, [r3, #2]
 8005e86:	e073      	b.n	8005f70 <LCD_Display_Dir+0x1a4>
		}else
		{
			lcddev.wramcmd=R34;
 8005e88:	4b3d      	ldr	r3, [pc, #244]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e8a:	2222      	movs	r2, #34	; 0x22
 8005e8c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=R32;
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e90:	2220      	movs	r2, #32
 8005e92:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=R33;
 8005e94:	4b3a      	ldr	r3, [pc, #232]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e96:	2221      	movs	r2, #33	; 0x21
 8005e98:	819a      	strh	r2, [r3, #12]
 8005e9a:	e069      	b.n	8005f70 <LCD_Display_Dir+0x1a4>
		}
	}else 				//Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“
	{
		lcddev.dir=1;	//Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“
 8005e9c:	4b38      	ldr	r3, [pc, #224]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 8005ea2:	4b37      	ldr	r3, [pc, #220]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005ea4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005ea8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8005eaa:	4b35      	ldr	r3, [pc, #212]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005eac:	22f0      	movs	r2, #240	; 0xf0
 8005eae:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8005eb0:	4b33      	ldr	r3, [pc, #204]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005eb2:	889b      	ldrh	r3, [r3, #4]
 8005eb4:	f249 3241 	movw	r2, #37697	; 0x9341
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d005      	beq.n	8005ec8 <LCD_Display_Dir+0xfc>
 8005ebc:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005ebe:	889b      	ldrh	r3, [r3, #4]
 8005ec0:	f245 3210 	movw	r2, #21264	; 0x5310
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d109      	bne.n	8005edc <LCD_Display_Dir+0x110>
		{
			lcddev.wramcmd=0X2C;
 8005ec8:	4b2d      	ldr	r3, [pc, #180]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005eca:	222c      	movs	r2, #44	; 0x2c
 8005ecc:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8005ece:	4b2c      	ldr	r3, [pc, #176]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005ed0:	222a      	movs	r2, #42	; 0x2a
 8005ed2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8005ed4:	4b2a      	ldr	r3, [pc, #168]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005ed6:	222b      	movs	r2, #43	; 0x2b
 8005ed8:	819a      	strh	r2, [r3, #12]
 8005eda:	e033      	b.n	8005f44 <LCD_Display_Dir+0x178>
		}else if(lcddev.id==0X6804)
 8005edc:	4b28      	ldr	r3, [pc, #160]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005ede:	889b      	ldrh	r3, [r3, #4]
 8005ee0:	f646 0204 	movw	r2, #26628	; 0x6804
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d109      	bne.n	8005efc <LCD_Display_Dir+0x130>
		{
 			lcddev.wramcmd=0X2C;
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005eea:	222c      	movs	r2, #44	; 0x2c
 8005eec:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8005eee:	4b24      	ldr	r3, [pc, #144]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005ef0:	222b      	movs	r2, #43	; 0x2b
 8005ef2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8005ef4:	4b22      	ldr	r3, [pc, #136]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005ef6:	222a      	movs	r2, #42	; 0x2a
 8005ef8:	819a      	strh	r2, [r3, #12]
 8005efa:	e023      	b.n	8005f44 <LCD_Display_Dir+0x178>
		}else if(lcddev.id==0x5510)
 8005efc:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005efe:	889b      	ldrh	r3, [r3, #4]
 8005f00:	f245 5210 	movw	r2, #21776	; 0x5510
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d114      	bne.n	8005f32 <LCD_Display_Dir+0x166>
		{
			lcddev.wramcmd=0X2C00;
 8005f08:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f0a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8005f0e:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8005f10:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f12:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8005f16:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8005f18:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f1a:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8005f1e:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8005f20:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005f26:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8005f28:	4b15      	ldr	r3, [pc, #84]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005f2e:	805a      	strh	r2, [r3, #2]
 8005f30:	e008      	b.n	8005f44 <LCD_Display_Dir+0x178>
		}else
		{
			lcddev.wramcmd=R34;
 8005f32:	4b13      	ldr	r3, [pc, #76]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f34:	2222      	movs	r2, #34	; 0x22
 8005f36:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=R33;
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f3a:	2221      	movs	r2, #33	; 0x21
 8005f3c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=R32;
 8005f3e:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f40:	2220      	movs	r2, #32
 8005f42:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f46:	889b      	ldrh	r3, [r3, #4]
 8005f48:	f646 0204 	movw	r2, #26628	; 0x6804
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d005      	beq.n	8005f5c <LCD_Display_Dir+0x190>
 8005f50:	4b0b      	ldr	r3, [pc, #44]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f52:	889b      	ldrh	r3, [r3, #4]
 8005f54:	f245 3210 	movw	r2, #21264	; 0x5310
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d109      	bne.n	8005f70 <LCD_Display_Dir+0x1a4>
		{
			lcddev.width=480;
 8005f5c:	4b08      	ldr	r3, [pc, #32]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005f62:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8005f64:	4b06      	ldr	r3, [pc, #24]	; (8005f80 <LCD_Display_Dir+0x1b4>)
 8005f66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005f6a:	805a      	strh	r2, [r3, #2]
 8005f6c:	e000      	b.n	8005f70 <LCD_Display_Dir+0x1a4>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8005f6e:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//Р вЂњРІР‚С›Р вЂ™Р’В¬Р вЂњРІвЂљВ¬Р вЂњР РЏР вЂњРІР‚В°Р вЂ™Р РѓР вЂњРЎвЂњР вЂњР РѓР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂњР РЏР вЂњР вЂ 
 8005f70:	2006      	movs	r0, #6
 8005f72:	f7ff fc67 	bl	8005844 <LCD_Scan_Dir>
}
 8005f76:	bf00      	nop
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000508 	.word	0x20000508

08005f84 <LCD_Init>:
		LCD_SetCursor(sx,sy);	//Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂ™РІвЂћвЂ“Р вЂњРЎС›Р вЂ™Р’В±Р вЂњР вЂћР вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚вЂњР вЂњРЎвЂњ
	}
}

void LCD_Init(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0b0      	sub	sp, #192	; 0xc0
 8005f88:	af00      	add	r7, sp, #0
	uint32_t i=0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005f90:	4b85      	ldr	r3, [pc, #532]	; (80061a8 <LCD_Init+0x224>)
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	d1fd      	bne.n	8005f96 <LCD_Init+0x12>
 8005f9a:	60bb      	str	r3, [r7, #8]

  _delay_ms(50); // delay 50 ms
 	LCD_WriteReg(0x0000,0x0001);
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f7ff fb50 	bl	8005644 <LCD_WriteReg>
 8005fa4:	4b80      	ldr	r3, [pc, #512]	; (80061a8 <LCD_Init+0x224>)
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	d1fd      	bne.n	8005faa <LCD_Init+0x26>
 8005fae:	607b      	str	r3, [r7, #4]
 	_delay_ms(50); // delay 50 ms
	lcddev.id = LCD_ReadReg(0x0000);
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	f7ff fb5d 	bl	8005670 <LCD_ReadReg>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b7c      	ldr	r3, [pc, #496]	; (80061ac <LCD_Init+0x228>)
 8005fbc:	809a      	strh	r2, [r3, #4]
  	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’ВµР вЂ™Р вЂ¦IDР вЂ™Р вЂ Р вЂ™Р’В»Р вЂњРІР‚СћР вЂњР вЂ¦Р вЂњРІвЂљВ¬Р вЂ™Р’В·,Р вЂњРЎвЂ™Р вЂњРІР‚С™Р вЂњРІР‚СњР вЂњР’В¶lcddev.id==0X9300Р вЂњРІР‚В¦Р вЂњРЎвЂ™Р вЂ™Р’В¶Р вЂњР РЏР вЂ™Р в‚¬Р вЂ™Р’В¬Р вЂњРІР‚в„ўР вЂњР вЂ Р вЂњР вЂ№Р вЂ™Р вЂћ9341Р вЂњРІР‚СњР вЂњРЎв„ўР вЂњР вЂ№Р вЂ™РўвЂ�Р вЂ™Р’В±Р вЂ™Р’В»Р вЂ™РЎвЂ�Р вЂ™РўвЂ�Р вЂњР вЂ№Р вЂ™Р’В»Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂњРІР‚РЋР вЂњР’В©Р вЂ™РЎвЂ”Р вЂњР’В¶Р вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’В»Р вЂњР Р‹Р вЂ™Р’В±Р вЂ™Р’В»Р вЂ™Р’В¶Р вЂњР С“Р вЂ™РЎвЂ“Р вЂњРІР‚В°9300
 8005fbe:	4b7b      	ldr	r3, [pc, #492]	; (80061ac <LCD_Init+0x228>)
 8005fc0:	889b      	ldrh	r3, [r3, #4]
 8005fc2:	2bfe      	cmp	r3, #254	; 0xfe
 8005fc4:	d90b      	bls.n	8005fde <LCD_Init+0x5a>
 8005fc6:	4b79      	ldr	r3, [pc, #484]	; (80061ac <LCD_Init+0x228>)
 8005fc8:	889b      	ldrh	r3, [r3, #4]
 8005fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d005      	beq.n	8005fde <LCD_Init+0x5a>
 8005fd2:	4b76      	ldr	r3, [pc, #472]	; (80061ac <LCD_Init+0x228>)
 8005fd4:	889b      	ldrh	r3, [r3, #4]
 8005fd6:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8005fda:	f040 80b9 	bne.w	8006150 <LCD_Init+0x1cc>
	{
 		//Р вЂ™РЎвЂ“Р вЂ™РЎС›Р вЂњР вЂ°Р вЂњРІР‚Сњ9341 IDР вЂ™Р’ВµР вЂњРІР‚С›Р вЂ™Р’В¶Р вЂњР С“Р вЂњРІвЂљВ¬Р вЂ™Р Р‹
		LCD_WR_REG(0XD3);
 8005fde:	20d3      	movs	r0, #211	; 0xd3
 8005fe0:	f7ff fb00 	bl	80055e4 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8005fe4:	f7ff fb1e 	bl	8005624 <LCD_RD_DATA>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b6f      	ldr	r3, [pc, #444]	; (80061ac <LCD_Init+0x228>)
 8005fee:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA(); 	//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’ВµР вЂ™Р вЂ¦0X00
 8005ff0:	f7ff fb18 	bl	8005624 <LCD_RD_DATA>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4b6c      	ldr	r3, [pc, #432]	; (80061ac <LCD_Init+0x228>)
 8005ffa:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//Р вЂ™Р’В¶Р вЂњР С“Р вЂњРІвЂљВ¬Р вЂ™Р Р‹93
 8005ffc:	f7ff fb12 	bl	8005624 <LCD_RD_DATA>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	4b69      	ldr	r3, [pc, #420]	; (80061ac <LCD_Init+0x228>)
 8006006:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 8006008:	4b68      	ldr	r3, [pc, #416]	; (80061ac <LCD_Init+0x228>)
 800600a:	889b      	ldrh	r3, [r3, #4]
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	b29a      	uxth	r2, r3
 8006010:	4b66      	ldr	r3, [pc, #408]	; (80061ac <LCD_Init+0x228>)
 8006012:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//Р вЂ™Р’В¶Р вЂњР С“Р вЂњРІвЂљВ¬Р вЂ™Р Р‹41
 8006014:	f7ff fb06 	bl	8005624 <LCD_RD_DATA>
 8006018:	4603      	mov	r3, r0
 800601a:	461a      	mov	r2, r3
 800601c:	4b63      	ldr	r3, [pc, #396]	; (80061ac <LCD_Init+0x228>)
 800601e:	889b      	ldrh	r3, [r3, #4]
 8006020:	4313      	orrs	r3, r2
 8006022:	b29a      	uxth	r2, r3
 8006024:	4b61      	ldr	r3, [pc, #388]	; (80061ac <LCD_Init+0x228>)
 8006026:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//Р вЂ™Р’В·Р вЂњРІР‚РЋ9341,Р вЂ™РЎвЂ“Р вЂ™РЎС›Р вЂњР вЂ°Р вЂњРІР‚СњР вЂњР вЂ°Р вЂњРІР‚РЋР вЂ™Р вЂ Р вЂ™Р’В»Р вЂњР вЂ°Р вЂњРІР‚РЋ6804
 8006028:	4b60      	ldr	r3, [pc, #384]	; (80061ac <LCD_Init+0x228>)
 800602a:	889b      	ldrh	r3, [r3, #4]
 800602c:	f249 3241 	movw	r2, #37697	; 0x9341
 8006030:	4293      	cmp	r3, r2
 8006032:	f000 808d 	beq.w	8006150 <LCD_Init+0x1cc>
		{
 			LCD_WR_REG(0XBF);
 8006036:	20bf      	movs	r0, #191	; 0xbf
 8006038:	f7ff fad4 	bl	80055e4 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();//dummy read
 800603c:	f7ff faf2 	bl	8005624 <LCD_RD_DATA>
 8006040:	4603      	mov	r3, r0
 8006042:	461a      	mov	r2, r3
 8006044:	4b59      	ldr	r3, [pc, #356]	; (80061ac <LCD_Init+0x228>)
 8006046:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X01
 8006048:	f7ff faec 	bl	8005624 <LCD_RD_DATA>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	4b56      	ldr	r3, [pc, #344]	; (80061ac <LCD_Init+0x228>)
 8006052:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0XD0
 8006054:	f7ff fae6 	bl	8005624 <LCD_RD_DATA>
 8006058:	4603      	mov	r3, r0
 800605a:	461a      	mov	r2, r3
 800605c:	4b53      	ldr	r3, [pc, #332]	; (80061ac <LCD_Init+0x228>)
 800605e:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();//Р вЂњРІР‚СћР вЂњРЎС›Р вЂњР вЂљР вЂњР вЂЎР вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X68
 8006060:	f7ff fae0 	bl	8005624 <LCD_RD_DATA>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	4b50      	ldr	r3, [pc, #320]	; (80061ac <LCD_Init+0x228>)
 800606a:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 800606c:	4b4f      	ldr	r3, [pc, #316]	; (80061ac <LCD_Init+0x228>)
 800606e:	889b      	ldrh	r3, [r3, #4]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	b29a      	uxth	r2, r3
 8006074:	4b4d      	ldr	r3, [pc, #308]	; (80061ac <LCD_Init+0x228>)
 8006076:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();//Р вЂњРІР‚СћР вЂњРЎС›Р вЂњР вЂљР вЂњР вЂЎР вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X04
 8006078:	f7ff fad4 	bl	8005624 <LCD_RD_DATA>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	4b4a      	ldr	r3, [pc, #296]	; (80061ac <LCD_Init+0x228>)
 8006082:	889b      	ldrh	r3, [r3, #4]
 8006084:	4313      	orrs	r3, r2
 8006086:	b29a      	uxth	r2, r3
 8006088:	4b48      	ldr	r3, [pc, #288]	; (80061ac <LCD_Init+0x228>)
 800608a:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)	//Р вЂњРІР‚в„ўР вЂ™Р вЂ Р вЂ™Р вЂ Р вЂ™Р’В»Р вЂњР вЂ°Р вЂњРІР‚РЋ6804,Р вЂ™РЎвЂ“Р вЂ™РЎС›Р вЂњР вЂ°Р вЂњРІР‚СњР вЂ™РЎвЂ”Р вЂ™РўвЂ�Р вЂ™РЎвЂ”Р вЂ™РўвЂ�Р вЂњР вЂ°Р вЂњРІР‚РЋР вЂ™Р вЂ Р вЂ™Р’В»Р вЂњР вЂ°Р вЂњРІР‚РЋNT35310
 800608c:	4b47      	ldr	r3, [pc, #284]	; (80061ac <LCD_Init+0x228>)
 800608e:	889b      	ldrh	r3, [r3, #4]
 8006090:	f646 0204 	movw	r2, #26628	; 0x6804
 8006094:	4293      	cmp	r3, r2
 8006096:	d05b      	beq.n	8006150 <LCD_Init+0x1cc>
			{
				LCD_WR_REG(0XD4);
 8006098:	20d4      	movs	r0, #212	; 0xd4
 800609a:	f7ff faa3 	bl	80055e4 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();	//dummy read
 800609e:	f7ff fac1 	bl	8005624 <LCD_RD_DATA>
 80060a2:	4603      	mov	r3, r0
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b41      	ldr	r3, [pc, #260]	; (80061ac <LCD_Init+0x228>)
 80060a8:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X01
 80060aa:	f7ff fabb 	bl	8005624 <LCD_RD_DATA>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	4b3e      	ldr	r3, [pc, #248]	; (80061ac <LCD_Init+0x228>)
 80060b4:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X53
 80060b6:	f7ff fab5 	bl	8005624 <LCD_RD_DATA>
 80060ba:	4603      	mov	r3, r0
 80060bc:	461a      	mov	r2, r3
 80060be:	4b3b      	ldr	r3, [pc, #236]	; (80061ac <LCD_Init+0x228>)
 80060c0:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 80060c2:	4b3a      	ldr	r3, [pc, #232]	; (80061ac <LCD_Init+0x228>)
 80060c4:	889b      	ldrh	r3, [r3, #4]
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	4b38      	ldr	r3, [pc, #224]	; (80061ac <LCD_Init+0x228>)
 80060cc:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//Р вЂњРІР‚СћР вЂњРЎС›Р вЂњР вЂљР вЂњР вЂЎР вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X10
 80060ce:	f7ff faa9 	bl	8005624 <LCD_RD_DATA>
 80060d2:	4603      	mov	r3, r0
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b35      	ldr	r3, [pc, #212]	; (80061ac <LCD_Init+0x228>)
 80060d8:	889b      	ldrh	r3, [r3, #4]
 80060da:	4313      	orrs	r3, r2
 80060dc:	b29a      	uxth	r2, r3
 80060de:	4b33      	ldr	r3, [pc, #204]	; (80061ac <LCD_Init+0x228>)
 80060e0:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//Р вЂњРІР‚в„ўР вЂ™Р вЂ Р вЂ™Р вЂ Р вЂ™Р’В»Р вЂњР вЂ°Р вЂњРІР‚РЋNT35310,Р вЂ™РЎвЂ“Р вЂ™РЎС›Р вЂњР вЂ°Р вЂњРІР‚СњР вЂ™РЎвЂ”Р вЂ™РўвЂ�Р вЂ™РЎвЂ”Р вЂ™РўвЂ�Р вЂњР вЂ°Р вЂњРІР‚РЋР вЂ™Р вЂ Р вЂ™Р’В»Р вЂњР вЂ°Р вЂњРІР‚РЋNT35510
 80060e2:	4b32      	ldr	r3, [pc, #200]	; (80061ac <LCD_Init+0x228>)
 80060e4:	889b      	ldrh	r3, [r3, #4]
 80060e6:	f245 3210 	movw	r2, #21264	; 0x5310
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d030      	beq.n	8006150 <LCD_Init+0x1cc>
				{
					LCD_WR_REG(0XDA00);
 80060ee:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80060f2:	f7ff fa77 	bl	80055e4 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X00
 80060f6:	f7ff fa95 	bl	8005624 <LCD_RD_DATA>
 80060fa:	4603      	mov	r3, r0
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <LCD_Init+0x228>)
 8006100:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8006102:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8006106:	f7ff fa6d 	bl	80055e4 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X80
 800610a:	f7ff fa8b 	bl	8005624 <LCD_RD_DATA>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <LCD_Init+0x228>)
 8006114:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8006116:	4b25      	ldr	r3, [pc, #148]	; (80061ac <LCD_Init+0x228>)
 8006118:	889b      	ldrh	r3, [r3, #4]
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	b29a      	uxth	r2, r3
 800611e:	4b23      	ldr	r3, [pc, #140]	; (80061ac <LCD_Init+0x228>)
 8006120:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8006122:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8006126:	f7ff fa5d 	bl	80055e4 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();//Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…0X00
 800612a:	f7ff fa7b 	bl	8005624 <LCD_RD_DATA>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	4b1e      	ldr	r3, [pc, #120]	; (80061ac <LCD_Init+0x228>)
 8006134:	889b      	ldrh	r3, [r3, #4]
 8006136:	4313      	orrs	r3, r2
 8006138:	b29a      	uxth	r2, r3
 800613a:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <LCD_Init+0x228>)
 800613c:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510Р вЂ™Р’В¶Р вЂњР С“Р вЂ™Р’В»Р вЂњРїС—Р…Р вЂ™Р’ВµР вЂњРІР‚С›IDР вЂњР вЂ°Р вЂњРІР‚РЋ8000H,Р вЂњР вЂ№Р вЂ™Р вЂћР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂ™Р’В±Р вЂњР в‚¬Р вЂњРІР‚РЋР вЂњРЎвЂ�Р вЂ™Р’В·Р вЂњРІР‚вЂњ,Р вЂњР вЂ№Р вЂњРІР‚в„ўР вЂњРЎвЂњР вЂњРІР‚РЋР вЂњРІР‚РЋР вЂ™РЎвЂ”Р вЂњРІР‚вЂњР вЂњРІР‚В Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂњР вЂ№Р вЂ™Р вЂћ5510
 800613e:	4b1b      	ldr	r3, [pc, #108]	; (80061ac <LCD_Init+0x228>)
 8006140:	889b      	ldrh	r3, [r3, #4]
 8006142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006146:	d103      	bne.n	8006150 <LCD_Init+0x1cc>
 8006148:	4b18      	ldr	r3, [pc, #96]	; (80061ac <LCD_Init+0x228>)
 800614a:	f245 5210 	movw	r2, #21776	; 0x5510
 800614e:	809a      	strh	r2, [r3, #4]
				}
			}
 		}
	}
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510)//Р вЂњРІвЂљВ¬Р вЂњР’В§Р вЂ™РІвЂћвЂ“Р вЂњР’В»Р вЂњР вЂ°Р вЂњРІР‚РЋР вЂњРІР‚СћР вЂњРЎС›Р вЂњРІвЂљВ¬Р вЂњР вЂ¦Р вЂ™РЎвЂ�Р вЂњР’В¶IC,Р вЂњРІР‚СњР вЂњР вЂ Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњWRР вЂњР вЂ°Р вЂ™Р’В±Р вЂњРЎвЂ™Р вЂњР вЂ Р вЂњР вЂ№Р вЂ™Р вЂћР вЂњРІР‚вЂќР вЂњР’В®Р вЂ™РЎвЂ”Р вЂњР’В¬
 8006150:	4b16      	ldr	r3, [pc, #88]	; (80061ac <LCD_Init+0x228>)
 8006152:	889b      	ldrh	r3, [r3, #4]
 8006154:	f249 3241 	movw	r2, #37697	; 0x9341
 8006158:	4293      	cmp	r3, r2
 800615a:	d00b      	beq.n	8006174 <LCD_Init+0x1f0>
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <LCD_Init+0x228>)
 800615e:	889b      	ldrh	r3, [r3, #4]
 8006160:	f245 3210 	movw	r2, #21264	; 0x5310
 8006164:	4293      	cmp	r3, r2
 8006166:	d005      	beq.n	8006174 <LCD_Init+0x1f0>
 8006168:	4b10      	ldr	r3, [pc, #64]	; (80061ac <LCD_Init+0x228>)
 800616a:	889b      	ldrh	r3, [r3, #4]
 800616c:	f245 5210 	movw	r2, #21776	; 0x5510
 8006170:	4293      	cmp	r3, r2
 8006172:	d11f      	bne.n	80061b4 <LCD_Init+0x230>
	{
		//Р вЂњРІР‚вЂњР вЂњРїС—Р…Р вЂњРЎвЂ™Р вЂњРІР‚С™Р вЂњРІР‚В¦Р вЂњР’В¤Р вЂњРІР‚вЂњР вЂњРЎвЂњР вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂњР вЂ°Р вЂ™Р’В±Р вЂњРЎвЂ™Р вЂњР вЂ Р вЂ™РЎвЂ”Р вЂњРїС—Р…Р вЂњРІР‚вЂњР вЂњРІР‚В Р вЂ™РЎпїЅР вЂњРІР‚С›Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњРІР‚В Р вЂњР’В·Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂњРЎвЂ™Р вЂњР вЂ 
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//Р вЂ™Р’ВµР вЂњРїС—Р…Р вЂњРІР‚вЂњР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂ™Р РѓР вЂњР С“Р вЂ™РЎС›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎпїЅР вЂњР’В¤Р вЂ™Р в‚¬Р вЂ™Р РѓADDSETР вЂ™Р в‚¬Р вЂ™Р’В©Р вЂњРІР‚РЋР вЂњРўС’Р вЂњР С“Р вЂњР в‚¬
 8006174:	4b0e      	ldr	r3, [pc, #56]	; (80061b0 <LCD_Init+0x22c>)
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	4a0d      	ldr	r2, [pc, #52]	; (80061b0 <LCD_Init+0x22c>)
 800617a:	f023 030f 	bic.w	r3, r3, #15
 800617e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//Р вЂњР вЂ°Р вЂњР вЂ¦Р вЂ™РЎвЂўР вЂњРЎСљР вЂ™Р’В±Р вЂ™Р в‚¬Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎпїЅР вЂњР’В¤Р вЂњРІР‚РЋР вЂњРўС’Р вЂњР С“Р вЂњР в‚¬
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <LCD_Init+0x22c>)
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <LCD_Init+0x22c>)
 8006186:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800618a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//Р вЂ™Р’ВµР вЂњРїС—Р…Р вЂњРІР‚вЂњР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂ™Р РѓР вЂњР С“Р вЂ™РЎС›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎпїЅР вЂњР’В¤Р вЂ™Р в‚¬Р вЂ™Р РѓADDSETР вЂ™Р в‚¬Р вЂ™Р’В©Р вЂњР вЂ№Р вЂ™Р вЂћ3Р вЂ™РЎвЂ�Р вЂњР’В¶HCLK =18ns
 800618c:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <LCD_Init+0x22c>)
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	4a07      	ldr	r2, [pc, #28]	; (80061b0 <LCD_Init+0x22c>)
 8006192:	f043 0303 	orr.w	r3, r3, #3
 8006196:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//Р вЂњР вЂ°Р вЂњР вЂ¦Р вЂ™РЎвЂўР вЂњРЎСљР вЂ™Р’В±Р вЂ™Р в‚¬Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎпїЅР вЂњР’В¤Р вЂњР вЂ№Р вЂ™Р вЂћ6ns*3Р вЂ™РЎвЂ�Р вЂњР’В¶HCLK=18ns
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <LCD_Init+0x22c>)
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	4a04      	ldr	r2, [pc, #16]	; (80061b0 <LCD_Init+0x22c>)
 800619e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a2:	6193      	str	r3, [r2, #24]
 80061a4:	e02a      	b.n	80061fc <LCD_Init+0x278>
 80061a6:	bf00      	nop
 80061a8:	002ab980 	.word	0x002ab980
 80061ac:	20000508 	.word	0x20000508
 80061b0:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0X6804||lcddev.id==0XC505)	//6804/C505Р вЂњРІР‚в„–Р вЂњРІвЂћСћР вЂ™Р’В¶Р вЂњРІвЂљВ¬Р вЂњРІР‚В°Р вЂњР РЏР вЂ™Р вЂ Р вЂ™Р’В»Р вЂњРІвЂљВ¬Р вЂ™РўС’,Р вЂ™Р’ВµР вЂњРЎвЂњР вЂ™Р вЂ¦Р вЂ™Р’ВµР вЂ™Р’ВµР вЂњР РЉ
 80061b4:	4ba4      	ldr	r3, [pc, #656]	; (8006448 <LCD_Init+0x4c4>)
 80061b6:	889b      	ldrh	r3, [r3, #4]
 80061b8:	f646 0204 	movw	r2, #26628	; 0x6804
 80061bc:	4293      	cmp	r3, r2
 80061be:	d005      	beq.n	80061cc <LCD_Init+0x248>
 80061c0:	4ba1      	ldr	r3, [pc, #644]	; (8006448 <LCD_Init+0x4c4>)
 80061c2:	889b      	ldrh	r3, [r3, #4]
 80061c4:	f24c 5205 	movw	r2, #50437	; 0xc505
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d117      	bne.n	80061fc <LCD_Init+0x278>
	{
		//Р вЂњРІР‚вЂњР вЂњРїС—Р…Р вЂњРЎвЂ™Р вЂњРІР‚С™Р вЂњРІР‚В¦Р вЂњР’В¤Р вЂњРІР‚вЂњР вЂњРЎвЂњР вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂњР вЂ°Р вЂ™Р’В±Р вЂњРЎвЂ™Р вЂњР вЂ Р вЂ™РЎвЂ”Р вЂњРїС—Р…Р вЂњРІР‚вЂњР вЂњРІР‚В Р вЂ™РЎпїЅР вЂњРІР‚С›Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњРІР‚В Р вЂњР’В·Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂњРЎвЂ™Р вЂњР вЂ 
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//Р вЂ™Р’ВµР вЂњРїС—Р…Р вЂњРІР‚вЂњР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂ™Р РѓР вЂњР С“Р вЂ™РЎС›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎпїЅР вЂњР’В¤Р вЂ™Р в‚¬Р вЂ™Р РѓADDSETР вЂ™Р в‚¬Р вЂ™Р’В©Р вЂњРІР‚РЋР вЂњРўС’Р вЂњР С“Р вЂњР в‚¬
 80061cc:	4b9f      	ldr	r3, [pc, #636]	; (800644c <LCD_Init+0x4c8>)
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	4a9e      	ldr	r2, [pc, #632]	; (800644c <LCD_Init+0x4c8>)
 80061d2:	f023 030f 	bic.w	r3, r3, #15
 80061d6:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//Р вЂњР вЂ°Р вЂњР вЂ¦Р вЂ™РЎвЂўР вЂњРЎСљР вЂ™Р’В±Р вЂ™Р в‚¬Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎпїЅР вЂњР’В¤Р вЂњРІР‚РЋР вЂњРўС’Р вЂњР С“Р вЂњР в‚¬
 80061d8:	4b9c      	ldr	r3, [pc, #624]	; (800644c <LCD_Init+0x4c8>)
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	4a9b      	ldr	r2, [pc, #620]	; (800644c <LCD_Init+0x4c8>)
 80061de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061e2:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=10<<0;	//Р вЂ™Р’ВµР вЂњРїС—Р…Р вЂњРІР‚вЂњР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂ™Р РѓР вЂњР С“Р вЂ™РЎС›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎпїЅР вЂњР’В¤Р вЂ™Р в‚¬Р вЂ™Р РѓADDSETР вЂ™Р в‚¬Р вЂ™Р’В©Р вЂњР вЂ№Р вЂ™Р вЂћ10Р вЂ™РЎвЂ�Р вЂњР’В¶HCLK =60ns
 80061e4:	4b99      	ldr	r3, [pc, #612]	; (800644c <LCD_Init+0x4c8>)
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	4a98      	ldr	r2, [pc, #608]	; (800644c <LCD_Init+0x4c8>)
 80061ea:	f043 030a 	orr.w	r3, r3, #10
 80061ee:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=12<<8; 	//Р вЂњР вЂ°Р вЂњР вЂ¦Р вЂ™РЎвЂўР вЂњРЎСљР вЂ™Р’В±Р вЂ™Р в‚¬Р вЂ™РўвЂ�Р вЂњР’В¦Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎпїЅР вЂњР’В¤Р вЂњР вЂ№Р вЂ™Р вЂћ6ns*13Р вЂ™РЎвЂ�Р вЂњР’В¶HCLK=96ns
 80061f0:	4b96      	ldr	r3, [pc, #600]	; (800644c <LCD_Init+0x4c8>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4a95      	ldr	r2, [pc, #596]	; (800644c <LCD_Init+0x4c8>)
 80061f6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80061fa:	6193      	str	r3, [r2, #24]
	}
	if(lcddev.id==0X9341)	//9341Р вЂ™РЎвЂ“Р вЂњР’ВµР вЂњР вЂ°Р вЂ™РЎпїЅР вЂ™Р’В»Р вЂ™Р вЂЎ
 80061fc:	4b92      	ldr	r3, [pc, #584]	; (8006448 <LCD_Init+0x4c4>)
 80061fe:	889b      	ldrh	r3, [r3, #4]
 8006200:	f249 3241 	movw	r2, #37697	; 0x9341
 8006204:	4293      	cmp	r3, r2
 8006206:	f040 8123 	bne.w	8006450 <LCD_Init+0x4cc>
	{
		LCD_WR_REG(0xCF);
 800620a:	20cf      	movs	r0, #207	; 0xcf
 800620c:	f7ff f9ea 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8006210:	2000      	movs	r0, #0
 8006212:	f7ff f9f7 	bl	8005604 <LCD_WR_DATA>
		i++;
 8006216:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800621a:	3301      	adds	r3, #1
 800621c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		LCD_WR_DATA(0xC1);
 8006220:	20c1      	movs	r0, #193	; 0xc1
 8006222:	f7ff f9ef 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8006226:	2030      	movs	r0, #48	; 0x30
 8006228:	f7ff f9ec 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 800622c:	20ed      	movs	r0, #237	; 0xed
 800622e:	f7ff f9d9 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8006232:	2064      	movs	r0, #100	; 0x64
 8006234:	f7ff f9e6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8006238:	2003      	movs	r0, #3
 800623a:	f7ff f9e3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 800623e:	2012      	movs	r0, #18
 8006240:	f7ff f9e0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8006244:	2081      	movs	r0, #129	; 0x81
 8006246:	f7ff f9dd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 800624a:	20e8      	movs	r0, #232	; 0xe8
 800624c:	f7ff f9ca 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8006250:	2085      	movs	r0, #133	; 0x85
 8006252:	f7ff f9d7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8006256:	2010      	movs	r0, #16
 8006258:	f7ff f9d4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800625c:	207a      	movs	r0, #122	; 0x7a
 800625e:	f7ff f9d1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8006262:	20cb      	movs	r0, #203	; 0xcb
 8006264:	f7ff f9be 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8006268:	2039      	movs	r0, #57	; 0x39
 800626a:	f7ff f9cb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 800626e:	202c      	movs	r0, #44	; 0x2c
 8006270:	f7ff f9c8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006274:	2000      	movs	r0, #0
 8006276:	f7ff f9c5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800627a:	2034      	movs	r0, #52	; 0x34
 800627c:	f7ff f9c2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8006280:	2002      	movs	r0, #2
 8006282:	f7ff f9bf 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8006286:	20f7      	movs	r0, #247	; 0xf7
 8006288:	f7ff f9ac 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 800628c:	2020      	movs	r0, #32
 800628e:	f7ff f9b9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8006292:	20ea      	movs	r0, #234	; 0xea
 8006294:	f7ff f9a6 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8006298:	2000      	movs	r0, #0
 800629a:	f7ff f9b3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800629e:	2000      	movs	r0, #0
 80062a0:	f7ff f9b0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 80062a4:	20c0      	movs	r0, #192	; 0xc0
 80062a6:	f7ff f99d 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 80062aa:	201b      	movs	r0, #27
 80062ac:	f7ff f9aa 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 80062b0:	20c1      	movs	r0, #193	; 0xc1
 80062b2:	f7ff f997 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80062b6:	2001      	movs	r0, #1
 80062b8:	f7ff f9a4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 80062bc:	20c5      	movs	r0, #197	; 0xc5
 80062be:	f7ff f991 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 80062c2:	2030      	movs	r0, #48	; 0x30
 80062c4:	f7ff f99e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 80062c8:	2030      	movs	r0, #48	; 0x30
 80062ca:	f7ff f99b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 80062ce:	20c7      	movs	r0, #199	; 0xc7
 80062d0:	f7ff f988 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 80062d4:	20b7      	movs	r0, #183	; 0xb7
 80062d6:	f7ff f995 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 80062da:	2036      	movs	r0, #54	; 0x36
 80062dc:	f7ff f982 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 80062e0:	2048      	movs	r0, #72	; 0x48
 80062e2:	f7ff f98f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 80062e6:	203a      	movs	r0, #58	; 0x3a
 80062e8:	f7ff f97c 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 80062ec:	2055      	movs	r0, #85	; 0x55
 80062ee:	f7ff f989 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 80062f2:	20b1      	movs	r0, #177	; 0xb1
 80062f4:	f7ff f976 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80062f8:	2000      	movs	r0, #0
 80062fa:	f7ff f983 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 80062fe:	201a      	movs	r0, #26
 8006300:	f7ff f980 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8006304:	20b6      	movs	r0, #182	; 0xb6
 8006306:	f7ff f96d 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 800630a:	200a      	movs	r0, #10
 800630c:	f7ff f97a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8006310:	20a2      	movs	r0, #162	; 0xa2
 8006312:	f7ff f977 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8006316:	20f2      	movs	r0, #242	; 0xf2
 8006318:	f7ff f964 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800631c:	2000      	movs	r0, #0
 800631e:	f7ff f971 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8006322:	2026      	movs	r0, #38	; 0x26
 8006324:	f7ff f95e 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8006328:	2001      	movs	r0, #1
 800632a:	f7ff f96b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 800632e:	20e0      	movs	r0, #224	; 0xe0
 8006330:	f7ff f958 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8006334:	200f      	movs	r0, #15
 8006336:	f7ff f965 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 800633a:	202a      	movs	r0, #42	; 0x2a
 800633c:	f7ff f962 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8006340:	2028      	movs	r0, #40	; 0x28
 8006342:	f7ff f95f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8006346:	2008      	movs	r0, #8
 8006348:	f7ff f95c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 800634c:	200e      	movs	r0, #14
 800634e:	f7ff f959 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8006352:	2008      	movs	r0, #8
 8006354:	f7ff f956 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8006358:	2054      	movs	r0, #84	; 0x54
 800635a:	f7ff f953 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 800635e:	20a9      	movs	r0, #169	; 0xa9
 8006360:	f7ff f950 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8006364:	2043      	movs	r0, #67	; 0x43
 8006366:	f7ff f94d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 800636a:	200a      	movs	r0, #10
 800636c:	f7ff f94a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8006370:	200f      	movs	r0, #15
 8006372:	f7ff f947 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006376:	2000      	movs	r0, #0
 8006378:	f7ff f944 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800637c:	2000      	movs	r0, #0
 800637e:	f7ff f941 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006382:	2000      	movs	r0, #0
 8006384:	f7ff f93e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006388:	2000      	movs	r0, #0
 800638a:	f7ff f93b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 800638e:	20e1      	movs	r0, #225	; 0xe1
 8006390:	f7ff f928 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8006394:	2000      	movs	r0, #0
 8006396:	f7ff f935 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 800639a:	2015      	movs	r0, #21
 800639c:	f7ff f932 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80063a0:	2017      	movs	r0, #23
 80063a2:	f7ff f92f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 80063a6:	2007      	movs	r0, #7
 80063a8:	f7ff f92c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80063ac:	2011      	movs	r0, #17
 80063ae:	f7ff f929 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 80063b2:	2006      	movs	r0, #6
 80063b4:	f7ff f926 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 80063b8:	202b      	movs	r0, #43	; 0x2b
 80063ba:	f7ff f923 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80063be:	2056      	movs	r0, #86	; 0x56
 80063c0:	f7ff f920 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80063c4:	203c      	movs	r0, #60	; 0x3c
 80063c6:	f7ff f91d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 80063ca:	2005      	movs	r0, #5
 80063cc:	f7ff f91a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80063d0:	2010      	movs	r0, #16
 80063d2:	f7ff f917 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80063d6:	200f      	movs	r0, #15
 80063d8:	f7ff f914 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80063dc:	203f      	movs	r0, #63	; 0x3f
 80063de:	f7ff f911 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80063e2:	203f      	movs	r0, #63	; 0x3f
 80063e4:	f7ff f90e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80063e8:	200f      	movs	r0, #15
 80063ea:	f7ff f90b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 80063ee:	202b      	movs	r0, #43	; 0x2b
 80063f0:	f7ff f8f8 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80063f4:	2000      	movs	r0, #0
 80063f6:	f7ff f905 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80063fa:	2000      	movs	r0, #0
 80063fc:	f7ff f902 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8006400:	2001      	movs	r0, #1
 8006402:	f7ff f8ff 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8006406:	203f      	movs	r0, #63	; 0x3f
 8006408:	f7ff f8fc 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 800640c:	202a      	movs	r0, #42	; 0x2a
 800640e:	f7ff f8e9 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8006412:	2000      	movs	r0, #0
 8006414:	f7ff f8f6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006418:	2000      	movs	r0, #0
 800641a:	f7ff f8f3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800641e:	2000      	movs	r0, #0
 8006420:	f7ff f8f0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8006424:	20ef      	movs	r0, #239	; 0xef
 8006426:	f7ff f8ed 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 800642a:	2011      	movs	r0, #17
 800642c:	f7ff f8da 	bl	80055e4 <LCD_WR_REG>
 8006430:	f44f 53d2 	mov.w	r3, #6720	; 0x1a40
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3b01      	subs	r3, #1
 800643a:	d1fd      	bne.n	8006438 <LCD_Init+0x4b4>
 800643c:	60fb      	str	r3, [r7, #12]
		_delay_us(120);
		LCD_WR_REG(0x29); //display on
 800643e:	2029      	movs	r0, #41	; 0x29
 8006440:	f7ff f8d0 	bl	80055e4 <LCD_WR_REG>
 8006444:	f003 b92d 	b.w	80096a2 <LCD_Init+0x371e>
 8006448:	20000508 	.word	0x20000508
 800644c:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0x6804) //6804Р вЂ™РЎвЂ“Р вЂњР’ВµР вЂњР вЂ°Р вЂ™РЎпїЅР вЂ™Р’В»Р вЂ™Р вЂЎ
 8006450:	4b5b      	ldr	r3, [pc, #364]	; (80065c0 <LCD_Init+0x63c>)
 8006452:	889b      	ldrh	r3, [r3, #4]
 8006454:	f646 0204 	movw	r2, #26628	; 0x6804
 8006458:	4293      	cmp	r3, r2
 800645a:	f040 80b7 	bne.w	80065cc <LCD_Init+0x648>
	{
		LCD_WR_REG(0X11);
 800645e:	2011      	movs	r0, #17
 8006460:	f7ff f8c0 	bl	80055e4 <LCD_WR_REG>
 8006464:	4b57      	ldr	r3, [pc, #348]	; (80065c4 <LCD_Init+0x640>)
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3b01      	subs	r3, #1
 800646c:	d1fd      	bne.n	800646a <LCD_Init+0x4e6>
 800646e:	617b      	str	r3, [r7, #20]
		_delay_ms(20);
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8006470:	20d0      	movs	r0, #208	; 0xd0
 8006472:	f7ff f8b7 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 8006476:	2007      	movs	r0, #7
 8006478:	f7ff f8c4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 800647c:	2042      	movs	r0, #66	; 0x42
 800647e:	f7ff f8c1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8006482:	201d      	movs	r0, #29
 8006484:	f7ff f8be 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 8006488:	20d1      	movs	r0, #209	; 0xd1
 800648a:	f7ff f8ab 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 800648e:	2000      	movs	r0, #0
 8006490:	f7ff f8b8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 8006494:	201a      	movs	r0, #26
 8006496:	f7ff f8b5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 800649a:	2009      	movs	r0, #9
 800649c:	f7ff f8b2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80064a0:	20d2      	movs	r0, #210	; 0xd2
 80064a2:	f7ff f89f 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7ff f8ac 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 80064ac:	2022      	movs	r0, #34	; 0x22
 80064ae:	f7ff f8a9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 80064b2:	20c0      	movs	r0, #192	; 0xc0
 80064b4:	f7ff f896 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 80064b8:	2010      	movs	r0, #16
 80064ba:	f7ff f8a3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 80064be:	203b      	movs	r0, #59	; 0x3b
 80064c0:	f7ff f8a0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80064c4:	2000      	movs	r0, #0
 80064c6:	f7ff f89d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 80064ca:	2002      	movs	r0, #2
 80064cc:	f7ff f89a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 80064d0:	2011      	movs	r0, #17
 80064d2:	f7ff f897 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 80064d6:	20c5      	movs	r0, #197	; 0xc5
 80064d8:	f7ff f884 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 80064dc:	2003      	movs	r0, #3
 80064de:	f7ff f891 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 80064e2:	20c8      	movs	r0, #200	; 0xc8
 80064e4:	f7ff f87e 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 80064e8:	2000      	movs	r0, #0
 80064ea:	f7ff f88b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80064ee:	2025      	movs	r0, #37	; 0x25
 80064f0:	f7ff f888 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 80064f4:	2021      	movs	r0, #33	; 0x21
 80064f6:	f7ff f885 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 80064fa:	2005      	movs	r0, #5
 80064fc:	f7ff f882 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8006500:	2000      	movs	r0, #0
 8006502:	f7ff f87f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 8006506:	200a      	movs	r0, #10
 8006508:	f7ff f87c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 800650c:	2065      	movs	r0, #101	; 0x65
 800650e:	f7ff f879 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8006512:	2025      	movs	r0, #37	; 0x25
 8006514:	f7ff f876 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 8006518:	2077      	movs	r0, #119	; 0x77
 800651a:	f7ff f873 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 800651e:	2050      	movs	r0, #80	; 0x50
 8006520:	f7ff f870 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 8006524:	200f      	movs	r0, #15
 8006526:	f7ff f86d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800652a:	2000      	movs	r0, #0
 800652c:	f7ff f86a 	bl	8005604 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 8006530:	20f8      	movs	r0, #248	; 0xf8
 8006532:	f7ff f857 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8006536:	2001      	movs	r0, #1
 8006538:	f7ff f864 	bl	8005604 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 800653c:	20fe      	movs	r0, #254	; 0xfe
 800653e:	f7ff f851 	bl	80055e4 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8006542:	2000      	movs	r0, #0
 8006544:	f7ff f85e 	bl	8005604 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 8006548:	2002      	movs	r0, #2
 800654a:	f7ff f85b 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 800654e:	2020      	movs	r0, #32
 8006550:	f7ff f848 	bl	80055e4 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8006554:	2036      	movs	r0, #54	; 0x36
 8006556:	f7ff f845 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//Р вЂњРІР‚СњР вЂ™Р’В­Р вЂњР вЂљР вЂ™РўвЂ�Р вЂњР вЂ°Р вЂњРІР‚РЋa
 800655a:	2008      	movs	r0, #8
 800655c:	f7ff f852 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8006560:	203a      	movs	r0, #58	; 0x3a
 8006562:	f7ff f83f 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16Р вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚С›Р вЂ™Р в‚¬Р вЂњР вЂ°Р вЂ™Р вЂ¦
 8006566:	2055      	movs	r0, #85	; 0x55
 8006568:	f7ff f84c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 800656c:	202b      	movs	r0, #43	; 0x2b
 800656e:	f7ff f839 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8006572:	2000      	movs	r0, #0
 8006574:	f7ff f846 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8006578:	2000      	movs	r0, #0
 800657a:	f7ff f843 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 800657e:	2001      	movs	r0, #1
 8006580:	f7ff f840 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8006584:	203f      	movs	r0, #63	; 0x3f
 8006586:	f7ff f83d 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 800658a:	202a      	movs	r0, #42	; 0x2a
 800658c:	f7ff f82a 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8006590:	2000      	movs	r0, #0
 8006592:	f7ff f837 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8006596:	2000      	movs	r0, #0
 8006598:	f7ff f834 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 800659c:	2001      	movs	r0, #1
 800659e:	f7ff f831 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 80065a2:	20df      	movs	r0, #223	; 0xdf
 80065a4:	f7ff f82e 	bl	8005604 <LCD_WR_DATA>
 80065a8:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <LCD_Init+0x644>)
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	d1fd      	bne.n	80065ae <LCD_Init+0x62a>
 80065b2:	613b      	str	r3, [r7, #16]
		_delay_ms(120);
		LCD_WR_REG(0X29);
 80065b4:	2029      	movs	r0, #41	; 0x29
 80065b6:	f7ff f815 	bl	80055e4 <LCD_WR_REG>
 80065ba:	f003 b872 	b.w	80096a2 <LCD_Init+0x371e>
 80065be:	bf00      	nop
 80065c0:	20000508 	.word	0x20000508
 80065c4:	00111700 	.word	0x00111700
 80065c8:	00668a00 	.word	0x00668a00
 	}else if(lcddev.id==0x5310)
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <LCD_Init+0x658>)
 80065ce:	889b      	ldrh	r3, [r3, #4]
 80065d0:	f245 3210 	movw	r2, #21264	; 0x5310
 80065d4:	4293      	cmp	r3, r2
 80065d6:	f040 8781 	bne.w	80074dc <LCD_Init+0x1558>
 80065da:	e001      	b.n	80065e0 <LCD_Init+0x65c>
 80065dc:	20000508 	.word	0x20000508
	{
		LCD_WR_REG(0xED);
 80065e0:	20ed      	movs	r0, #237	; 0xed
 80065e2:	f7fe ffff 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80065e6:	2001      	movs	r0, #1
 80065e8:	f7ff f80c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 80065ec:	20fe      	movs	r0, #254	; 0xfe
 80065ee:	f7ff f809 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 80065f2:	20ee      	movs	r0, #238	; 0xee
 80065f4:	f7fe fff6 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 80065f8:	20de      	movs	r0, #222	; 0xde
 80065fa:	f7ff f803 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80065fe:	2021      	movs	r0, #33	; 0x21
 8006600:	f7ff f800 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8006604:	20f1      	movs	r0, #241	; 0xf1
 8006606:	f7fe ffed 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800660a:	2001      	movs	r0, #1
 800660c:	f7fe fffa 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8006610:	20df      	movs	r0, #223	; 0xdf
 8006612:	f7fe ffe7 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8006616:	2010      	movs	r0, #16
 8006618:	f7fe fff4 	bl	8005604 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800661c:	20c4      	movs	r0, #196	; 0xc4
 800661e:	f7fe ffe1 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8006622:	208f      	movs	r0, #143	; 0x8f
 8006624:	f7fe ffee 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8006628:	20c6      	movs	r0, #198	; 0xc6
 800662a:	f7fe ffdb 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800662e:	2000      	movs	r0, #0
 8006630:	f7fe ffe8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8006634:	20e2      	movs	r0, #226	; 0xe2
 8006636:	f7fe ffe5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 800663a:	20e2      	movs	r0, #226	; 0xe2
 800663c:	f7fe ffe2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8006640:	20e2      	movs	r0, #226	; 0xe2
 8006642:	f7fe ffdf 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8006646:	20bf      	movs	r0, #191	; 0xbf
 8006648:	f7fe ffcc 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800664c:	20aa      	movs	r0, #170	; 0xaa
 800664e:	f7fe ffd9 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8006652:	20b0      	movs	r0, #176	; 0xb0
 8006654:	f7fe ffc6 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8006658:	200d      	movs	r0, #13
 800665a:	f7fe ffd3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800665e:	2000      	movs	r0, #0
 8006660:	f7fe ffd0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8006664:	200d      	movs	r0, #13
 8006666:	f7fe ffcd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800666a:	2000      	movs	r0, #0
 800666c:	f7fe ffca 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8006670:	2011      	movs	r0, #17
 8006672:	f7fe ffc7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006676:	2000      	movs	r0, #0
 8006678:	f7fe ffc4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 800667c:	2019      	movs	r0, #25
 800667e:	f7fe ffc1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006682:	2000      	movs	r0, #0
 8006684:	f7fe ffbe 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8006688:	2021      	movs	r0, #33	; 0x21
 800668a:	f7fe ffbb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800668e:	2000      	movs	r0, #0
 8006690:	f7fe ffb8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8006694:	202d      	movs	r0, #45	; 0x2d
 8006696:	f7fe ffb5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800669a:	2000      	movs	r0, #0
 800669c:	f7fe ffb2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 80066a0:	203d      	movs	r0, #61	; 0x3d
 80066a2:	f7fe ffaf 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066a6:	2000      	movs	r0, #0
 80066a8:	f7fe ffac 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80066ac:	205d      	movs	r0, #93	; 0x5d
 80066ae:	f7fe ffa9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066b2:	2000      	movs	r0, #0
 80066b4:	f7fe ffa6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80066b8:	205d      	movs	r0, #93	; 0x5d
 80066ba:	f7fe ffa3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066be:	2000      	movs	r0, #0
 80066c0:	f7fe ffa0 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 80066c4:	20b1      	movs	r0, #177	; 0xb1
 80066c6:	f7fe ff8d 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 80066ca:	2080      	movs	r0, #128	; 0x80
 80066cc:	f7fe ff9a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7fe ff97 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80066d6:	208b      	movs	r0, #139	; 0x8b
 80066d8:	f7fe ff94 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066dc:	2000      	movs	r0, #0
 80066de:	f7fe ff91 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80066e2:	2096      	movs	r0, #150	; 0x96
 80066e4:	f7fe ff8e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066e8:	2000      	movs	r0, #0
 80066ea:	f7fe ff8b 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 80066ee:	20b2      	movs	r0, #178	; 0xb2
 80066f0:	f7fe ff78 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80066f4:	2000      	movs	r0, #0
 80066f6:	f7fe ff85 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066fa:	2000      	movs	r0, #0
 80066fc:	f7fe ff82 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8006700:	2002      	movs	r0, #2
 8006702:	f7fe ff7f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006706:	2000      	movs	r0, #0
 8006708:	f7fe ff7c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 800670c:	2003      	movs	r0, #3
 800670e:	f7fe ff79 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006712:	2000      	movs	r0, #0
 8006714:	f7fe ff76 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8006718:	20b3      	movs	r0, #179	; 0xb3
 800671a:	f7fe ff63 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800671e:	2000      	movs	r0, #0
 8006720:	f7fe ff70 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006724:	2000      	movs	r0, #0
 8006726:	f7fe ff6d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800672a:	2000      	movs	r0, #0
 800672c:	f7fe ff6a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006730:	2000      	movs	r0, #0
 8006732:	f7fe ff67 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006736:	2000      	movs	r0, #0
 8006738:	f7fe ff64 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800673c:	2000      	movs	r0, #0
 800673e:	f7fe ff61 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006742:	2000      	movs	r0, #0
 8006744:	f7fe ff5e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006748:	2000      	movs	r0, #0
 800674a:	f7fe ff5b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800674e:	2000      	movs	r0, #0
 8006750:	f7fe ff58 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006754:	2000      	movs	r0, #0
 8006756:	f7fe ff55 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800675a:	2000      	movs	r0, #0
 800675c:	f7fe ff52 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006760:	2000      	movs	r0, #0
 8006762:	f7fe ff4f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006766:	2000      	movs	r0, #0
 8006768:	f7fe ff4c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800676c:	2000      	movs	r0, #0
 800676e:	f7fe ff49 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006772:	2000      	movs	r0, #0
 8006774:	f7fe ff46 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006778:	2000      	movs	r0, #0
 800677a:	f7fe ff43 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800677e:	2000      	movs	r0, #0
 8006780:	f7fe ff40 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006784:	2000      	movs	r0, #0
 8006786:	f7fe ff3d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800678a:	2000      	movs	r0, #0
 800678c:	f7fe ff3a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006790:	2000      	movs	r0, #0
 8006792:	f7fe ff37 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006796:	2000      	movs	r0, #0
 8006798:	f7fe ff34 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800679c:	2000      	movs	r0, #0
 800679e:	f7fe ff31 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80067a2:	2000      	movs	r0, #0
 80067a4:	f7fe ff2e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80067a8:	2000      	movs	r0, #0
 80067aa:	f7fe ff2b 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 80067ae:	20b4      	movs	r0, #180	; 0xb4
 80067b0:	f7fe ff18 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 80067b4:	208b      	movs	r0, #139	; 0x8b
 80067b6:	f7fe ff25 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80067ba:	2000      	movs	r0, #0
 80067bc:	f7fe ff22 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80067c0:	2096      	movs	r0, #150	; 0x96
 80067c2:	f7fe ff1f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80067c6:	2000      	movs	r0, #0
 80067c8:	f7fe ff1c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 80067cc:	20a1      	movs	r0, #161	; 0xa1
 80067ce:	f7fe ff19 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80067d2:	2000      	movs	r0, #0
 80067d4:	f7fe ff16 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 80067d8:	20b5      	movs	r0, #181	; 0xb5
 80067da:	f7fe ff03 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 80067de:	2002      	movs	r0, #2
 80067e0:	f7fe ff10 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80067e4:	2000      	movs	r0, #0
 80067e6:	f7fe ff0d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80067ea:	2003      	movs	r0, #3
 80067ec:	f7fe ff0a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80067f0:	2000      	movs	r0, #0
 80067f2:	f7fe ff07 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80067f6:	2004      	movs	r0, #4
 80067f8:	f7fe ff04 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80067fc:	2000      	movs	r0, #0
 80067fe:	f7fe ff01 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8006802:	20b6      	movs	r0, #182	; 0xb6
 8006804:	f7fe feee 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8006808:	2000      	movs	r0, #0
 800680a:	f7fe fefb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800680e:	2000      	movs	r0, #0
 8006810:	f7fe fef8 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8006814:	20b7      	movs	r0, #183	; 0xb7
 8006816:	f7fe fee5 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800681a:	2000      	movs	r0, #0
 800681c:	f7fe fef2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006820:	2000      	movs	r0, #0
 8006822:	f7fe feef 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8006826:	203f      	movs	r0, #63	; 0x3f
 8006828:	f7fe feec 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800682c:	2000      	movs	r0, #0
 800682e:	f7fe fee9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8006832:	205e      	movs	r0, #94	; 0x5e
 8006834:	f7fe fee6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006838:	2000      	movs	r0, #0
 800683a:	f7fe fee3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 800683e:	2064      	movs	r0, #100	; 0x64
 8006840:	f7fe fee0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006844:	2000      	movs	r0, #0
 8006846:	f7fe fedd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 800684a:	208c      	movs	r0, #140	; 0x8c
 800684c:	f7fe feda 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006850:	2000      	movs	r0, #0
 8006852:	f7fe fed7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8006856:	20ac      	movs	r0, #172	; 0xac
 8006858:	f7fe fed4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800685c:	2000      	movs	r0, #0
 800685e:	f7fe fed1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8006862:	20dc      	movs	r0, #220	; 0xdc
 8006864:	f7fe fece 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006868:	2000      	movs	r0, #0
 800686a:	f7fe fecb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 800686e:	2070      	movs	r0, #112	; 0x70
 8006870:	f7fe fec8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006874:	2000      	movs	r0, #0
 8006876:	f7fe fec5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 800687a:	2090      	movs	r0, #144	; 0x90
 800687c:	f7fe fec2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006880:	2000      	movs	r0, #0
 8006882:	f7fe febf 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8006886:	20eb      	movs	r0, #235	; 0xeb
 8006888:	f7fe febc 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800688c:	2000      	movs	r0, #0
 800688e:	f7fe feb9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8006892:	20dc      	movs	r0, #220	; 0xdc
 8006894:	f7fe feb6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006898:	2000      	movs	r0, #0
 800689a:	f7fe feb3 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 800689e:	20b8      	movs	r0, #184	; 0xb8
 80068a0:	f7fe fea0 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80068a4:	2000      	movs	r0, #0
 80068a6:	f7fe fead 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068aa:	2000      	movs	r0, #0
 80068ac:	f7fe feaa 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068b0:	2000      	movs	r0, #0
 80068b2:	f7fe fea7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068b6:	2000      	movs	r0, #0
 80068b8:	f7fe fea4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068bc:	2000      	movs	r0, #0
 80068be:	f7fe fea1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068c2:	2000      	movs	r0, #0
 80068c4:	f7fe fe9e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068c8:	2000      	movs	r0, #0
 80068ca:	f7fe fe9b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068ce:	2000      	movs	r0, #0
 80068d0:	f7fe fe98 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 80068d4:	20ba      	movs	r0, #186	; 0xba
 80068d6:	f7fe fe85 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 80068da:	2024      	movs	r0, #36	; 0x24
 80068dc:	f7fe fe92 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068e0:	2000      	movs	r0, #0
 80068e2:	f7fe fe8f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068e6:	2000      	movs	r0, #0
 80068e8:	f7fe fe8c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7fe fe89 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 80068f2:	20c1      	movs	r0, #193	; 0xc1
 80068f4:	f7fe fe76 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80068f8:	2020      	movs	r0, #32
 80068fa:	f7fe fe83 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80068fe:	2000      	movs	r0, #0
 8006900:	f7fe fe80 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8006904:	2054      	movs	r0, #84	; 0x54
 8006906:	f7fe fe7d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800690a:	2000      	movs	r0, #0
 800690c:	f7fe fe7a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8006910:	20ff      	movs	r0, #255	; 0xff
 8006912:	f7fe fe77 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006916:	2000      	movs	r0, #0
 8006918:	f7fe fe74 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 800691c:	20c2      	movs	r0, #194	; 0xc2
 800691e:	f7fe fe61 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8006922:	200a      	movs	r0, #10
 8006924:	f7fe fe6e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006928:	2000      	movs	r0, #0
 800692a:	f7fe fe6b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 800692e:	2004      	movs	r0, #4
 8006930:	f7fe fe68 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006934:	2000      	movs	r0, #0
 8006936:	f7fe fe65 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 800693a:	20c3      	movs	r0, #195	; 0xc3
 800693c:	f7fe fe52 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8006940:	203c      	movs	r0, #60	; 0x3c
 8006942:	f7fe fe5f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006946:	2000      	movs	r0, #0
 8006948:	f7fe fe5c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 800694c:	203a      	movs	r0, #58	; 0x3a
 800694e:	f7fe fe59 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006952:	2000      	movs	r0, #0
 8006954:	f7fe fe56 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8006958:	2039      	movs	r0, #57	; 0x39
 800695a:	f7fe fe53 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800695e:	2000      	movs	r0, #0
 8006960:	f7fe fe50 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8006964:	2037      	movs	r0, #55	; 0x37
 8006966:	f7fe fe4d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800696a:	2000      	movs	r0, #0
 800696c:	f7fe fe4a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8006970:	203c      	movs	r0, #60	; 0x3c
 8006972:	f7fe fe47 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006976:	2000      	movs	r0, #0
 8006978:	f7fe fe44 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 800697c:	2036      	movs	r0, #54	; 0x36
 800697e:	f7fe fe41 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006982:	2000      	movs	r0, #0
 8006984:	f7fe fe3e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8006988:	2032      	movs	r0, #50	; 0x32
 800698a:	f7fe fe3b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800698e:	2000      	movs	r0, #0
 8006990:	f7fe fe38 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8006994:	202f      	movs	r0, #47	; 0x2f
 8006996:	f7fe fe35 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800699a:	2000      	movs	r0, #0
 800699c:	f7fe fe32 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80069a0:	202c      	movs	r0, #44	; 0x2c
 80069a2:	f7fe fe2f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80069a6:	2000      	movs	r0, #0
 80069a8:	f7fe fe2c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80069ac:	2029      	movs	r0, #41	; 0x29
 80069ae:	f7fe fe29 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80069b2:	2000      	movs	r0, #0
 80069b4:	f7fe fe26 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80069b8:	2026      	movs	r0, #38	; 0x26
 80069ba:	f7fe fe23 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80069be:	2000      	movs	r0, #0
 80069c0:	f7fe fe20 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80069c4:	2024      	movs	r0, #36	; 0x24
 80069c6:	f7fe fe1d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80069ca:	2000      	movs	r0, #0
 80069cc:	f7fe fe1a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80069d0:	2024      	movs	r0, #36	; 0x24
 80069d2:	f7fe fe17 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80069d6:	2000      	movs	r0, #0
 80069d8:	f7fe fe14 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80069dc:	2023      	movs	r0, #35	; 0x23
 80069de:	f7fe fe11 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80069e2:	2000      	movs	r0, #0
 80069e4:	f7fe fe0e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80069e8:	203c      	movs	r0, #60	; 0x3c
 80069ea:	f7fe fe0b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80069ee:	2000      	movs	r0, #0
 80069f0:	f7fe fe08 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80069f4:	2036      	movs	r0, #54	; 0x36
 80069f6:	f7fe fe05 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80069fa:	2000      	movs	r0, #0
 80069fc:	f7fe fe02 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8006a00:	2032      	movs	r0, #50	; 0x32
 8006a02:	f7fe fdff 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a06:	2000      	movs	r0, #0
 8006a08:	f7fe fdfc 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8006a0c:	202f      	movs	r0, #47	; 0x2f
 8006a0e:	f7fe fdf9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a12:	2000      	movs	r0, #0
 8006a14:	f7fe fdf6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8006a18:	202c      	movs	r0, #44	; 0x2c
 8006a1a:	f7fe fdf3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a1e:	2000      	movs	r0, #0
 8006a20:	f7fe fdf0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8006a24:	2029      	movs	r0, #41	; 0x29
 8006a26:	f7fe fded 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	f7fe fdea 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8006a30:	2026      	movs	r0, #38	; 0x26
 8006a32:	f7fe fde7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a36:	2000      	movs	r0, #0
 8006a38:	f7fe fde4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8006a3c:	2024      	movs	r0, #36	; 0x24
 8006a3e:	f7fe fde1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a42:	2000      	movs	r0, #0
 8006a44:	f7fe fdde 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8006a48:	2024      	movs	r0, #36	; 0x24
 8006a4a:	f7fe fddb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f7fe fdd8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8006a54:	2023      	movs	r0, #35	; 0x23
 8006a56:	f7fe fdd5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f7fe fdd2 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8006a60:	20c4      	movs	r0, #196	; 0xc4
 8006a62:	f7fe fdbf 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8006a66:	2062      	movs	r0, #98	; 0x62
 8006a68:	f7fe fdcc 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	f7fe fdc9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8006a72:	2005      	movs	r0, #5
 8006a74:	f7fe fdc6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f7fe fdc3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8006a7e:	2084      	movs	r0, #132	; 0x84
 8006a80:	f7fe fdc0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a84:	2000      	movs	r0, #0
 8006a86:	f7fe fdbd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8006a8a:	20f0      	movs	r0, #240	; 0xf0
 8006a8c:	f7fe fdba 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a90:	2000      	movs	r0, #0
 8006a92:	f7fe fdb7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8006a96:	2018      	movs	r0, #24
 8006a98:	f7fe fdb4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	f7fe fdb1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8006aa2:	20a4      	movs	r0, #164	; 0xa4
 8006aa4:	f7fe fdae 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f7fe fdab 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8006aae:	2018      	movs	r0, #24
 8006ab0:	f7fe fda8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f7fe fda5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8006aba:	2050      	movs	r0, #80	; 0x50
 8006abc:	f7fe fda2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f7fe fd9f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8006ac6:	200c      	movs	r0, #12
 8006ac8:	f7fe fd9c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006acc:	2000      	movs	r0, #0
 8006ace:	f7fe fd99 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8006ad2:	2017      	movs	r0, #23
 8006ad4:	f7fe fd96 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f7fe fd93 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8006ade:	2095      	movs	r0, #149	; 0x95
 8006ae0:	f7fe fd90 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	f7fe fd8d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8006aea:	20f3      	movs	r0, #243	; 0xf3
 8006aec:	f7fe fd8a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006af0:	2000      	movs	r0, #0
 8006af2:	f7fe fd87 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8006af6:	20e6      	movs	r0, #230	; 0xe6
 8006af8:	f7fe fd84 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006afc:	2000      	movs	r0, #0
 8006afe:	f7fe fd81 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8006b02:	20c5      	movs	r0, #197	; 0xc5
 8006b04:	f7fe fd6e 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8006b08:	2032      	movs	r0, #50	; 0x32
 8006b0a:	f7fe fd7b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f7fe fd78 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8006b14:	2044      	movs	r0, #68	; 0x44
 8006b16:	f7fe fd75 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f7fe fd72 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8006b20:	2065      	movs	r0, #101	; 0x65
 8006b22:	f7fe fd6f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b26:	2000      	movs	r0, #0
 8006b28:	f7fe fd6c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8006b2c:	2076      	movs	r0, #118	; 0x76
 8006b2e:	f7fe fd69 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b32:	2000      	movs	r0, #0
 8006b34:	f7fe fd66 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8006b38:	2088      	movs	r0, #136	; 0x88
 8006b3a:	f7fe fd63 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b3e:	2000      	movs	r0, #0
 8006b40:	f7fe fd60 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8006b44:	20c6      	movs	r0, #198	; 0xc6
 8006b46:	f7fe fd4d 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8006b4a:	2020      	movs	r0, #32
 8006b4c:	f7fe fd5a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b50:	2000      	movs	r0, #0
 8006b52:	f7fe fd57 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8006b56:	2017      	movs	r0, #23
 8006b58:	f7fe fd54 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	f7fe fd51 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8006b62:	2001      	movs	r0, #1
 8006b64:	f7fe fd4e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f7fe fd4b 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8006b6e:	20c7      	movs	r0, #199	; 0xc7
 8006b70:	f7fe fd38 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7fe fd45 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	f7fe fd42 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b80:	2000      	movs	r0, #0
 8006b82:	f7fe fd3f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b86:	2000      	movs	r0, #0
 8006b88:	f7fe fd3c 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8006b8c:	20c8      	movs	r0, #200	; 0xc8
 8006b8e:	f7fe fd29 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8006b92:	2000      	movs	r0, #0
 8006b94:	f7fe fd36 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f7fe fd33 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	f7fe fd30 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f7fe fd2d 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8006baa:	20c9      	movs	r0, #201	; 0xc9
 8006bac:	f7fe fd1a 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f7fe fd27 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	f7fe fd24 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	f7fe fd21 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	f7fe fd1e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bc8:	2000      	movs	r0, #0
 8006bca:	f7fe fd1b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bce:	2000      	movs	r0, #0
 8006bd0:	f7fe fd18 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	f7fe fd15 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bda:	2000      	movs	r0, #0
 8006bdc:	f7fe fd12 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006be0:	2000      	movs	r0, #0
 8006be2:	f7fe fd0f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006be6:	2000      	movs	r0, #0
 8006be8:	f7fe fd0c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bec:	2000      	movs	r0, #0
 8006bee:	f7fe fd09 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	f7fe fd06 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bf8:	2000      	movs	r0, #0
 8006bfa:	f7fe fd03 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f7fe fd00 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c04:	2000      	movs	r0, #0
 8006c06:	f7fe fcfd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	f7fe fcfa 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 8006c10:	20e0      	movs	r0, #224	; 0xe0
 8006c12:	f7fe fce7 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8006c16:	2016      	movs	r0, #22
 8006c18:	f7fe fcf4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f7fe fcf1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8006c22:	201c      	movs	r0, #28
 8006c24:	f7fe fcee 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f7fe fceb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8006c2e:	2021      	movs	r0, #33	; 0x21
 8006c30:	f7fe fce8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c34:	2000      	movs	r0, #0
 8006c36:	f7fe fce5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8006c3a:	2036      	movs	r0, #54	; 0x36
 8006c3c:	f7fe fce2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c40:	2000      	movs	r0, #0
 8006c42:	f7fe fcdf 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 8006c46:	2046      	movs	r0, #70	; 0x46
 8006c48:	f7fe fcdc 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	f7fe fcd9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8006c52:	2052      	movs	r0, #82	; 0x52
 8006c54:	f7fe fcd6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c58:	2000      	movs	r0, #0
 8006c5a:	f7fe fcd3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8006c5e:	2064      	movs	r0, #100	; 0x64
 8006c60:	f7fe fcd0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c64:	2000      	movs	r0, #0
 8006c66:	f7fe fccd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8006c6a:	207a      	movs	r0, #122	; 0x7a
 8006c6c:	f7fe fcca 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c70:	2000      	movs	r0, #0
 8006c72:	f7fe fcc7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8006c76:	208b      	movs	r0, #139	; 0x8b
 8006c78:	f7fe fcc4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f7fe fcc1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8006c82:	2099      	movs	r0, #153	; 0x99
 8006c84:	f7fe fcbe 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c88:	2000      	movs	r0, #0
 8006c8a:	f7fe fcbb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8006c8e:	20a8      	movs	r0, #168	; 0xa8
 8006c90:	f7fe fcb8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006c94:	2000      	movs	r0, #0
 8006c96:	f7fe fcb5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8006c9a:	20b9      	movs	r0, #185	; 0xb9
 8006c9c:	f7fe fcb2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f7fe fcaf 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8006ca6:	20c4      	movs	r0, #196	; 0xc4
 8006ca8:	f7fe fcac 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006cac:	2000      	movs	r0, #0
 8006cae:	f7fe fca9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8006cb2:	20ca      	movs	r0, #202	; 0xca
 8006cb4:	f7fe fca6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006cb8:	2000      	movs	r0, #0
 8006cba:	f7fe fca3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8006cbe:	20d2      	movs	r0, #210	; 0xd2
 8006cc0:	f7fe fca0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	f7fe fc9d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8006cca:	20d9      	movs	r0, #217	; 0xd9
 8006ccc:	f7fe fc9a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	f7fe fc97 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8006cd6:	20e0      	movs	r0, #224	; 0xe0
 8006cd8:	f7fe fc94 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f7fe fc91 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8006ce2:	20f3      	movs	r0, #243	; 0xf3
 8006ce4:	f7fe fc8e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f7fe fc8b 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8006cee:	20e1      	movs	r0, #225	; 0xe1
 8006cf0:	f7fe fc78 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8006cf4:	2016      	movs	r0, #22
 8006cf6:	f7fe fc85 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	f7fe fc82 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8006d00:	201c      	movs	r0, #28
 8006d02:	f7fe fc7f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d06:	2000      	movs	r0, #0
 8006d08:	f7fe fc7c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8006d0c:	2022      	movs	r0, #34	; 0x22
 8006d0e:	f7fe fc79 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d12:	2000      	movs	r0, #0
 8006d14:	f7fe fc76 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8006d18:	2036      	movs	r0, #54	; 0x36
 8006d1a:	f7fe fc73 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f7fe fc70 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8006d24:	2045      	movs	r0, #69	; 0x45
 8006d26:	f7fe fc6d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d2a:	2000      	movs	r0, #0
 8006d2c:	f7fe fc6a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8006d30:	2052      	movs	r0, #82	; 0x52
 8006d32:	f7fe fc67 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d36:	2000      	movs	r0, #0
 8006d38:	f7fe fc64 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8006d3c:	2064      	movs	r0, #100	; 0x64
 8006d3e:	f7fe fc61 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d42:	2000      	movs	r0, #0
 8006d44:	f7fe fc5e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8006d48:	207a      	movs	r0, #122	; 0x7a
 8006d4a:	f7fe fc5b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d4e:	2000      	movs	r0, #0
 8006d50:	f7fe fc58 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8006d54:	208b      	movs	r0, #139	; 0x8b
 8006d56:	f7fe fc55 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f7fe fc52 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8006d60:	2099      	movs	r0, #153	; 0x99
 8006d62:	f7fe fc4f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d66:	2000      	movs	r0, #0
 8006d68:	f7fe fc4c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8006d6c:	20a8      	movs	r0, #168	; 0xa8
 8006d6e:	f7fe fc49 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7fe fc46 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8006d78:	20b9      	movs	r0, #185	; 0xb9
 8006d7a:	f7fe fc43 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d7e:	2000      	movs	r0, #0
 8006d80:	f7fe fc40 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8006d84:	20c4      	movs	r0, #196	; 0xc4
 8006d86:	f7fe fc3d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	f7fe fc3a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8006d90:	20ca      	movs	r0, #202	; 0xca
 8006d92:	f7fe fc37 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006d96:	2000      	movs	r0, #0
 8006d98:	f7fe fc34 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8006d9c:	20d2      	movs	r0, #210	; 0xd2
 8006d9e:	f7fe fc31 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006da2:	2000      	movs	r0, #0
 8006da4:	f7fe fc2e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8006da8:	20d8      	movs	r0, #216	; 0xd8
 8006daa:	f7fe fc2b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006dae:	2000      	movs	r0, #0
 8006db0:	f7fe fc28 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8006db4:	20e0      	movs	r0, #224	; 0xe0
 8006db6:	f7fe fc25 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006dba:	2000      	movs	r0, #0
 8006dbc:	f7fe fc22 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8006dc0:	20f3      	movs	r0, #243	; 0xf3
 8006dc2:	f7fe fc1f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	f7fe fc1c 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8006dcc:	20e2      	movs	r0, #226	; 0xe2
 8006dce:	f7fe fc09 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8006dd2:	2005      	movs	r0, #5
 8006dd4:	f7fe fc16 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006dd8:	2000      	movs	r0, #0
 8006dda:	f7fe fc13 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8006dde:	200b      	movs	r0, #11
 8006de0:	f7fe fc10 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006de4:	2000      	movs	r0, #0
 8006de6:	f7fe fc0d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8006dea:	201b      	movs	r0, #27
 8006dec:	f7fe fc0a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006df0:	2000      	movs	r0, #0
 8006df2:	f7fe fc07 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8006df6:	2034      	movs	r0, #52	; 0x34
 8006df8:	f7fe fc04 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	f7fe fc01 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8006e02:	2044      	movs	r0, #68	; 0x44
 8006e04:	f7fe fbfe 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e08:	2000      	movs	r0, #0
 8006e0a:	f7fe fbfb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 8006e0e:	204f      	movs	r0, #79	; 0x4f
 8006e10:	f7fe fbf8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e14:	2000      	movs	r0, #0
 8006e16:	f7fe fbf5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 8006e1a:	2061      	movs	r0, #97	; 0x61
 8006e1c:	f7fe fbf2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e20:	2000      	movs	r0, #0
 8006e22:	f7fe fbef 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 8006e26:	2079      	movs	r0, #121	; 0x79
 8006e28:	f7fe fbec 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7fe fbe9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8006e32:	2088      	movs	r0, #136	; 0x88
 8006e34:	f7fe fbe6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e38:	2000      	movs	r0, #0
 8006e3a:	f7fe fbe3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8006e3e:	2097      	movs	r0, #151	; 0x97
 8006e40:	f7fe fbe0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e44:	2000      	movs	r0, #0
 8006e46:	f7fe fbdd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8006e4a:	20a6      	movs	r0, #166	; 0xa6
 8006e4c:	f7fe fbda 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e50:	2000      	movs	r0, #0
 8006e52:	f7fe fbd7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8006e56:	20b7      	movs	r0, #183	; 0xb7
 8006e58:	f7fe fbd4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f7fe fbd1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8006e62:	20c2      	movs	r0, #194	; 0xc2
 8006e64:	f7fe fbce 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e68:	2000      	movs	r0, #0
 8006e6a:	f7fe fbcb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8006e6e:	20c7      	movs	r0, #199	; 0xc7
 8006e70:	f7fe fbc8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e74:	2000      	movs	r0, #0
 8006e76:	f7fe fbc5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8006e7a:	20d1      	movs	r0, #209	; 0xd1
 8006e7c:	f7fe fbc2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e80:	2000      	movs	r0, #0
 8006e82:	f7fe fbbf 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8006e86:	20d6      	movs	r0, #214	; 0xd6
 8006e88:	f7fe fbbc 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	f7fe fbb9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8006e92:	20dd      	movs	r0, #221	; 0xdd
 8006e94:	f7fe fbb6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006e98:	2000      	movs	r0, #0
 8006e9a:	f7fe fbb3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8006e9e:	20f3      	movs	r0, #243	; 0xf3
 8006ea0:	f7fe fbb0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	f7fe fbad 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8006eaa:	20e3      	movs	r0, #227	; 0xe3
 8006eac:	f7fe fb9a 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8006eb0:	2005      	movs	r0, #5
 8006eb2:	f7fe fba7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	f7fe fba4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8006ebc:	200a      	movs	r0, #10
 8006ebe:	f7fe fba1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ec2:	2000      	movs	r0, #0
 8006ec4:	f7fe fb9e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8006ec8:	201c      	movs	r0, #28
 8006eca:	f7fe fb9b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7fe fb98 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8006ed4:	2033      	movs	r0, #51	; 0x33
 8006ed6:	f7fe fb95 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006eda:	2000      	movs	r0, #0
 8006edc:	f7fe fb92 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8006ee0:	2044      	movs	r0, #68	; 0x44
 8006ee2:	f7fe fb8f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f7fe fb8c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8006eec:	2050      	movs	r0, #80	; 0x50
 8006eee:	f7fe fb89 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	f7fe fb86 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8006ef8:	2062      	movs	r0, #98	; 0x62
 8006efa:	f7fe fb83 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7fe fb80 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8006f04:	2078      	movs	r0, #120	; 0x78
 8006f06:	f7fe fb7d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f0a:	2000      	movs	r0, #0
 8006f0c:	f7fe fb7a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8006f10:	2088      	movs	r0, #136	; 0x88
 8006f12:	f7fe fb77 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f16:	2000      	movs	r0, #0
 8006f18:	f7fe fb74 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8006f1c:	2097      	movs	r0, #151	; 0x97
 8006f1e:	f7fe fb71 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f22:	2000      	movs	r0, #0
 8006f24:	f7fe fb6e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8006f28:	20a6      	movs	r0, #166	; 0xa6
 8006f2a:	f7fe fb6b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f7fe fb68 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8006f34:	20b7      	movs	r0, #183	; 0xb7
 8006f36:	f7fe fb65 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f7fe fb62 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8006f40:	20c2      	movs	r0, #194	; 0xc2
 8006f42:	f7fe fb5f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f46:	2000      	movs	r0, #0
 8006f48:	f7fe fb5c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8006f4c:	20c7      	movs	r0, #199	; 0xc7
 8006f4e:	f7fe fb59 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f52:	2000      	movs	r0, #0
 8006f54:	f7fe fb56 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8006f58:	20d1      	movs	r0, #209	; 0xd1
 8006f5a:	f7fe fb53 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f7fe fb50 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8006f64:	20d5      	movs	r0, #213	; 0xd5
 8006f66:	f7fe fb4d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	f7fe fb4a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8006f70:	20dd      	movs	r0, #221	; 0xdd
 8006f72:	f7fe fb47 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f76:	2000      	movs	r0, #0
 8006f78:	f7fe fb44 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8006f7c:	20f3      	movs	r0, #243	; 0xf3
 8006f7e:	f7fe fb41 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f82:	2000      	movs	r0, #0
 8006f84:	f7fe fb3e 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8006f88:	20e4      	movs	r0, #228	; 0xe4
 8006f8a:	f7fe fb2b 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8006f8e:	2001      	movs	r0, #1
 8006f90:	f7fe fb38 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006f94:	2000      	movs	r0, #0
 8006f96:	f7fe fb35 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	f7fe fb32 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	f7fe fb2f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8006fa6:	2002      	movs	r0, #2
 8006fa8:	f7fe fb2c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006fac:	2000      	movs	r0, #0
 8006fae:	f7fe fb29 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8006fb2:	202a      	movs	r0, #42	; 0x2a
 8006fb4:	f7fe fb26 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006fb8:	2000      	movs	r0, #0
 8006fba:	f7fe fb23 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8006fbe:	203c      	movs	r0, #60	; 0x3c
 8006fc0:	f7fe fb20 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	f7fe fb1d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8006fca:	204b      	movs	r0, #75	; 0x4b
 8006fcc:	f7fe fb1a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f7fe fb17 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8006fd6:	205d      	movs	r0, #93	; 0x5d
 8006fd8:	f7fe fb14 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f7fe fb11 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8006fe2:	2074      	movs	r0, #116	; 0x74
 8006fe4:	f7fe fb0e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f7fe fb0b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8006fee:	2084      	movs	r0, #132	; 0x84
 8006ff0:	f7fe fb08 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f7fe fb05 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8006ffa:	2093      	movs	r0, #147	; 0x93
 8006ffc:	f7fe fb02 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007000:	2000      	movs	r0, #0
 8007002:	f7fe faff 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8007006:	20a2      	movs	r0, #162	; 0xa2
 8007008:	f7fe fafc 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800700c:	2000      	movs	r0, #0
 800700e:	f7fe faf9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8007012:	20b3      	movs	r0, #179	; 0xb3
 8007014:	f7fe faf6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007018:	2000      	movs	r0, #0
 800701a:	f7fe faf3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 800701e:	20be      	movs	r0, #190	; 0xbe
 8007020:	f7fe faf0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007024:	2000      	movs	r0, #0
 8007026:	f7fe faed 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800702a:	20c4      	movs	r0, #196	; 0xc4
 800702c:	f7fe faea 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007030:	2000      	movs	r0, #0
 8007032:	f7fe fae7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8007036:	20cd      	movs	r0, #205	; 0xcd
 8007038:	f7fe fae4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800703c:	2000      	movs	r0, #0
 800703e:	f7fe fae1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8007042:	20d3      	movs	r0, #211	; 0xd3
 8007044:	f7fe fade 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007048:	2000      	movs	r0, #0
 800704a:	f7fe fadb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800704e:	20dd      	movs	r0, #221	; 0xdd
 8007050:	f7fe fad8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007054:	2000      	movs	r0, #0
 8007056:	f7fe fad5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800705a:	20f3      	movs	r0, #243	; 0xf3
 800705c:	f7fe fad2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007060:	2000      	movs	r0, #0
 8007062:	f7fe facf 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8007066:	20e5      	movs	r0, #229	; 0xe5
 8007068:	f7fe fabc 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800706c:	2000      	movs	r0, #0
 800706e:	f7fe fac9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007072:	2000      	movs	r0, #0
 8007074:	f7fe fac6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007078:	2000      	movs	r0, #0
 800707a:	f7fe fac3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800707e:	2000      	movs	r0, #0
 8007080:	f7fe fac0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8007084:	2002      	movs	r0, #2
 8007086:	f7fe fabd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800708a:	2000      	movs	r0, #0
 800708c:	f7fe faba 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8007090:	2029      	movs	r0, #41	; 0x29
 8007092:	f7fe fab7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007096:	2000      	movs	r0, #0
 8007098:	f7fe fab4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800709c:	203c      	movs	r0, #60	; 0x3c
 800709e:	f7fe fab1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80070a2:	2000      	movs	r0, #0
 80070a4:	f7fe faae 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 80070a8:	204b      	movs	r0, #75	; 0x4b
 80070aa:	f7fe faab 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80070ae:	2000      	movs	r0, #0
 80070b0:	f7fe faa8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80070b4:	205d      	movs	r0, #93	; 0x5d
 80070b6:	f7fe faa5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80070ba:	2000      	movs	r0, #0
 80070bc:	f7fe faa2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 80070c0:	2074      	movs	r0, #116	; 0x74
 80070c2:	f7fe fa9f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80070c6:	2000      	movs	r0, #0
 80070c8:	f7fe fa9c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80070cc:	2084      	movs	r0, #132	; 0x84
 80070ce:	f7fe fa99 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80070d2:	2000      	movs	r0, #0
 80070d4:	f7fe fa96 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80070d8:	2093      	movs	r0, #147	; 0x93
 80070da:	f7fe fa93 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80070de:	2000      	movs	r0, #0
 80070e0:	f7fe fa90 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80070e4:	20a2      	movs	r0, #162	; 0xa2
 80070e6:	f7fe fa8d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80070ea:	2000      	movs	r0, #0
 80070ec:	f7fe fa8a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80070f0:	20b3      	movs	r0, #179	; 0xb3
 80070f2:	f7fe fa87 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80070f6:	2000      	movs	r0, #0
 80070f8:	f7fe fa84 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80070fc:	20be      	movs	r0, #190	; 0xbe
 80070fe:	f7fe fa81 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007102:	2000      	movs	r0, #0
 8007104:	f7fe fa7e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8007108:	20c4      	movs	r0, #196	; 0xc4
 800710a:	f7fe fa7b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800710e:	2000      	movs	r0, #0
 8007110:	f7fe fa78 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8007114:	20cd      	movs	r0, #205	; 0xcd
 8007116:	f7fe fa75 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800711a:	2000      	movs	r0, #0
 800711c:	f7fe fa72 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8007120:	20d3      	movs	r0, #211	; 0xd3
 8007122:	f7fe fa6f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007126:	2000      	movs	r0, #0
 8007128:	f7fe fa6c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 800712c:	20dc      	movs	r0, #220	; 0xdc
 800712e:	f7fe fa69 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007132:	2000      	movs	r0, #0
 8007134:	f7fe fa66 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8007138:	20f3      	movs	r0, #243	; 0xf3
 800713a:	f7fe fa63 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800713e:	2000      	movs	r0, #0
 8007140:	f7fe fa60 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8007144:	20e6      	movs	r0, #230	; 0xe6
 8007146:	f7fe fa4d 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 800714a:	2011      	movs	r0, #17
 800714c:	f7fe fa5a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007150:	2000      	movs	r0, #0
 8007152:	f7fe fa57 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8007156:	2034      	movs	r0, #52	; 0x34
 8007158:	f7fe fa54 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800715c:	2000      	movs	r0, #0
 800715e:	f7fe fa51 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8007162:	2056      	movs	r0, #86	; 0x56
 8007164:	f7fe fa4e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007168:	2000      	movs	r0, #0
 800716a:	f7fe fa4b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 800716e:	2076      	movs	r0, #118	; 0x76
 8007170:	f7fe fa48 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007174:	2000      	movs	r0, #0
 8007176:	f7fe fa45 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800717a:	2077      	movs	r0, #119	; 0x77
 800717c:	f7fe fa42 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007180:	2000      	movs	r0, #0
 8007182:	f7fe fa3f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8007186:	2066      	movs	r0, #102	; 0x66
 8007188:	f7fe fa3c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800718c:	2000      	movs	r0, #0
 800718e:	f7fe fa39 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8007192:	2088      	movs	r0, #136	; 0x88
 8007194:	f7fe fa36 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007198:	2000      	movs	r0, #0
 800719a:	f7fe fa33 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800719e:	2099      	movs	r0, #153	; 0x99
 80071a0:	f7fe fa30 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80071a4:	2000      	movs	r0, #0
 80071a6:	f7fe fa2d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80071aa:	20bb      	movs	r0, #187	; 0xbb
 80071ac:	f7fe fa2a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80071b0:	2000      	movs	r0, #0
 80071b2:	f7fe fa27 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80071b6:	2099      	movs	r0, #153	; 0x99
 80071b8:	f7fe fa24 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80071bc:	2000      	movs	r0, #0
 80071be:	f7fe fa21 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80071c2:	2066      	movs	r0, #102	; 0x66
 80071c4:	f7fe fa1e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80071c8:	2000      	movs	r0, #0
 80071ca:	f7fe fa1b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80071ce:	2055      	movs	r0, #85	; 0x55
 80071d0:	f7fe fa18 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80071d4:	2000      	movs	r0, #0
 80071d6:	f7fe fa15 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80071da:	2055      	movs	r0, #85	; 0x55
 80071dc:	f7fe fa12 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80071e0:	2000      	movs	r0, #0
 80071e2:	f7fe fa0f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80071e6:	2045      	movs	r0, #69	; 0x45
 80071e8:	f7fe fa0c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80071ec:	2000      	movs	r0, #0
 80071ee:	f7fe fa09 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 80071f2:	2043      	movs	r0, #67	; 0x43
 80071f4:	f7fe fa06 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80071f8:	2000      	movs	r0, #0
 80071fa:	f7fe fa03 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80071fe:	2044      	movs	r0, #68	; 0x44
 8007200:	f7fe fa00 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007204:	2000      	movs	r0, #0
 8007206:	f7fe f9fd 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 800720a:	20e7      	movs	r0, #231	; 0xe7
 800720c:	f7fe f9ea 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8007210:	2032      	movs	r0, #50	; 0x32
 8007212:	f7fe f9f7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007216:	2000      	movs	r0, #0
 8007218:	f7fe f9f4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800721c:	2055      	movs	r0, #85	; 0x55
 800721e:	f7fe f9f1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007222:	2000      	movs	r0, #0
 8007224:	f7fe f9ee 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8007228:	2076      	movs	r0, #118	; 0x76
 800722a:	f7fe f9eb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800722e:	2000      	movs	r0, #0
 8007230:	f7fe f9e8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8007234:	2066      	movs	r0, #102	; 0x66
 8007236:	f7fe f9e5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800723a:	2000      	movs	r0, #0
 800723c:	f7fe f9e2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8007240:	2067      	movs	r0, #103	; 0x67
 8007242:	f7fe f9df 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007246:	2000      	movs	r0, #0
 8007248:	f7fe f9dc 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 800724c:	2067      	movs	r0, #103	; 0x67
 800724e:	f7fe f9d9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007252:	2000      	movs	r0, #0
 8007254:	f7fe f9d6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8007258:	2087      	movs	r0, #135	; 0x87
 800725a:	f7fe f9d3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800725e:	2000      	movs	r0, #0
 8007260:	f7fe f9d0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8007264:	2099      	movs	r0, #153	; 0x99
 8007266:	f7fe f9cd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800726a:	2000      	movs	r0, #0
 800726c:	f7fe f9ca 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8007270:	20bb      	movs	r0, #187	; 0xbb
 8007272:	f7fe f9c7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007276:	2000      	movs	r0, #0
 8007278:	f7fe f9c4 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800727c:	2099      	movs	r0, #153	; 0x99
 800727e:	f7fe f9c1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007282:	2000      	movs	r0, #0
 8007284:	f7fe f9be 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8007288:	2077      	movs	r0, #119	; 0x77
 800728a:	f7fe f9bb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800728e:	2000      	movs	r0, #0
 8007290:	f7fe f9b8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8007294:	2044      	movs	r0, #68	; 0x44
 8007296:	f7fe f9b5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800729a:	2000      	movs	r0, #0
 800729c:	f7fe f9b2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80072a0:	2056      	movs	r0, #86	; 0x56
 80072a2:	f7fe f9af 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80072a6:	2000      	movs	r0, #0
 80072a8:	f7fe f9ac 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80072ac:	2023      	movs	r0, #35	; 0x23
 80072ae:	f7fe f9a9 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80072b2:	2000      	movs	r0, #0
 80072b4:	f7fe f9a6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 80072b8:	2033      	movs	r0, #51	; 0x33
 80072ba:	f7fe f9a3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80072be:	2000      	movs	r0, #0
 80072c0:	f7fe f9a0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80072c4:	2045      	movs	r0, #69	; 0x45
 80072c6:	f7fe f99d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80072ca:	2000      	movs	r0, #0
 80072cc:	f7fe f99a 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 80072d0:	20e8      	movs	r0, #232	; 0xe8
 80072d2:	f7fe f987 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80072d6:	2000      	movs	r0, #0
 80072d8:	f7fe f994 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80072dc:	2000      	movs	r0, #0
 80072de:	f7fe f991 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80072e2:	2099      	movs	r0, #153	; 0x99
 80072e4:	f7fe f98e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80072e8:	2000      	movs	r0, #0
 80072ea:	f7fe f98b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80072ee:	2087      	movs	r0, #135	; 0x87
 80072f0:	f7fe f988 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80072f4:	2000      	movs	r0, #0
 80072f6:	f7fe f985 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80072fa:	2088      	movs	r0, #136	; 0x88
 80072fc:	f7fe f982 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007300:	2000      	movs	r0, #0
 8007302:	f7fe f97f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8007306:	2077      	movs	r0, #119	; 0x77
 8007308:	f7fe f97c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800730c:	2000      	movs	r0, #0
 800730e:	f7fe f979 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8007312:	2066      	movs	r0, #102	; 0x66
 8007314:	f7fe f976 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007318:	2000      	movs	r0, #0
 800731a:	f7fe f973 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800731e:	2088      	movs	r0, #136	; 0x88
 8007320:	f7fe f970 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007324:	2000      	movs	r0, #0
 8007326:	f7fe f96d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 800732a:	20aa      	movs	r0, #170	; 0xaa
 800732c:	f7fe f96a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007330:	2000      	movs	r0, #0
 8007332:	f7fe f967 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8007336:	20bb      	movs	r0, #187	; 0xbb
 8007338:	f7fe f964 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800733c:	2000      	movs	r0, #0
 800733e:	f7fe f961 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8007342:	2099      	movs	r0, #153	; 0x99
 8007344:	f7fe f95e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007348:	2000      	movs	r0, #0
 800734a:	f7fe f95b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800734e:	2066      	movs	r0, #102	; 0x66
 8007350:	f7fe f958 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007354:	2000      	movs	r0, #0
 8007356:	f7fe f955 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800735a:	2055      	movs	r0, #85	; 0x55
 800735c:	f7fe f952 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007360:	2000      	movs	r0, #0
 8007362:	f7fe f94f 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8007366:	2055      	movs	r0, #85	; 0x55
 8007368:	f7fe f94c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800736c:	2000      	movs	r0, #0
 800736e:	f7fe f949 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8007372:	2044      	movs	r0, #68	; 0x44
 8007374:	f7fe f946 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007378:	2000      	movs	r0, #0
 800737a:	f7fe f943 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800737e:	2044      	movs	r0, #68	; 0x44
 8007380:	f7fe f940 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007384:	2000      	movs	r0, #0
 8007386:	f7fe f93d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800738a:	2055      	movs	r0, #85	; 0x55
 800738c:	f7fe f93a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007390:	2000      	movs	r0, #0
 8007392:	f7fe f937 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8007396:	20e9      	movs	r0, #233	; 0xe9
 8007398:	f7fe f924 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800739c:	20aa      	movs	r0, #170	; 0xaa
 800739e:	f7fe f931 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073a2:	2000      	movs	r0, #0
 80073a4:	f7fe f92e 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073a8:	2000      	movs	r0, #0
 80073aa:	f7fe f92b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073ae:	2000      	movs	r0, #0
 80073b0:	f7fe f928 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 80073b4:	2000      	movs	r0, #0
 80073b6:	f7fe f915 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 80073ba:	20aa      	movs	r0, #170	; 0xaa
 80073bc:	f7fe f922 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 80073c0:	20cf      	movs	r0, #207	; 0xcf
 80073c2:	f7fe f90f 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80073c6:	2000      	movs	r0, #0
 80073c8:	f7fe f91c 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073cc:	2000      	movs	r0, #0
 80073ce:	f7fe f919 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073d2:	2000      	movs	r0, #0
 80073d4:	f7fe f916 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073d8:	2000      	movs	r0, #0
 80073da:	f7fe f913 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073de:	2000      	movs	r0, #0
 80073e0:	f7fe f910 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073e4:	2000      	movs	r0, #0
 80073e6:	f7fe f90d 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073ea:	2000      	movs	r0, #0
 80073ec:	f7fe f90a 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073f0:	2000      	movs	r0, #0
 80073f2:	f7fe f907 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073f6:	2000      	movs	r0, #0
 80073f8:	f7fe f904 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80073fc:	2000      	movs	r0, #0
 80073fe:	f7fe f901 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007402:	2000      	movs	r0, #0
 8007404:	f7fe f8fe 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007408:	2000      	movs	r0, #0
 800740a:	f7fe f8fb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800740e:	2000      	movs	r0, #0
 8007410:	f7fe f8f8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007414:	2000      	movs	r0, #0
 8007416:	f7fe f8f5 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800741a:	2000      	movs	r0, #0
 800741c:	f7fe f8f2 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007420:	2000      	movs	r0, #0
 8007422:	f7fe f8ef 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007426:	2000      	movs	r0, #0
 8007428:	f7fe f8ec 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 800742c:	20f0      	movs	r0, #240	; 0xf0
 800742e:	f7fe f8d9 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8007432:	2000      	movs	r0, #0
 8007434:	f7fe f8e6 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8007438:	2050      	movs	r0, #80	; 0x50
 800743a:	f7fe f8e3 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800743e:	2000      	movs	r0, #0
 8007440:	f7fe f8e0 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007444:	2000      	movs	r0, #0
 8007446:	f7fe f8dd 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800744a:	2000      	movs	r0, #0
 800744c:	f7fe f8da 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8007450:	20f3      	movs	r0, #243	; 0xf3
 8007452:	f7fe f8c7 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8007456:	2000      	movs	r0, #0
 8007458:	f7fe f8d4 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 800745c:	20f9      	movs	r0, #249	; 0xf9
 800745e:	f7fe f8c1 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8007462:	2006      	movs	r0, #6
 8007464:	f7fe f8ce 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8007468:	2010      	movs	r0, #16
 800746a:	f7fe f8cb 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 800746e:	2029      	movs	r0, #41	; 0x29
 8007470:	f7fe f8c8 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007474:	2000      	movs	r0, #0
 8007476:	f7fe f8c5 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 800747a:	203a      	movs	r0, #58	; 0x3a
 800747c:	f7fe f8b2 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8007480:	2055      	movs	r0, #85	; 0x55
 8007482:	f7fe f8bf 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8007486:	2011      	movs	r0, #17
 8007488:	f7fe f8ac 	bl	80055e4 <LCD_WR_REG>
 800748c:	4b12      	ldr	r3, [pc, #72]	; (80074d8 <LCD_Init+0x1554>)
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	3b01      	subs	r3, #1
 8007494:	d1fd      	bne.n	8007492 <LCD_Init+0x150e>
 8007496:	61bb      	str	r3, [r7, #24]
		_delay_ms(100);
		LCD_WR_REG(0x29);
 8007498:	2029      	movs	r0, #41	; 0x29
 800749a:	f7fe f8a3 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 800749e:	2035      	movs	r0, #53	; 0x35
 80074a0:	f7fe f8a0 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80074a4:	2000      	movs	r0, #0
 80074a6:	f7fe f8ad 	bl	8005604 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 80074aa:	2051      	movs	r0, #81	; 0x51
 80074ac:	f7fe f89a 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 80074b0:	20ff      	movs	r0, #255	; 0xff
 80074b2:	f7fe f8a7 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 80074b6:	2053      	movs	r0, #83	; 0x53
 80074b8:	f7fe f894 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 80074bc:	202c      	movs	r0, #44	; 0x2c
 80074be:	f7fe f8a1 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 80074c2:	2055      	movs	r0, #85	; 0x55
 80074c4:	f7fe f88e 	bl	80055e4 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 80074c8:	2082      	movs	r0, #130	; 0x82
 80074ca:	f7fe f89b 	bl	8005604 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80074ce:	202c      	movs	r0, #44	; 0x2c
 80074d0:	f7fe f888 	bl	80055e4 <LCD_WR_REG>
 80074d4:	f002 b8e5 	b.w	80096a2 <LCD_Init+0x371e>
 80074d8:	00557300 	.word	0x00557300
	}else if(lcddev.id==0x5510)
 80074dc:	4b03      	ldr	r3, [pc, #12]	; (80074ec <LCD_Init+0x1568>)
 80074de:	889b      	ldrh	r3, [r3, #4]
 80074e0:	f245 5210 	movw	r2, #21776	; 0x5510
 80074e4:	4293      	cmp	r3, r2
 80074e6:	f040 8785 	bne.w	80083f4 <LCD_Init+0x2470>
 80074ea:	e001      	b.n	80074f0 <LCD_Init+0x156c>
 80074ec:	20000508 	.word	0x20000508
	{
		LCD_WriteReg(0xF000,0x55);
 80074f0:	2155      	movs	r1, #85	; 0x55
 80074f2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80074f6:	f7fe f8a5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80074fa:	21aa      	movs	r1, #170	; 0xaa
 80074fc:	f24f 0001 	movw	r0, #61441	; 0xf001
 8007500:	f7fe f8a0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8007504:	2152      	movs	r1, #82	; 0x52
 8007506:	f24f 0002 	movw	r0, #61442	; 0xf002
 800750a:	f7fe f89b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 800750e:	2108      	movs	r1, #8
 8007510:	f24f 0003 	movw	r0, #61443	; 0xf003
 8007514:	f7fe f896 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8007518:	2101      	movs	r1, #1
 800751a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800751e:	f7fe f891 	bl	8005644 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8007522:	210d      	movs	r1, #13
 8007524:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8007528:	f7fe f88c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 800752c:	210d      	movs	r1, #13
 800752e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8007532:	f7fe f887 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8007536:	210d      	movs	r1, #13
 8007538:	f24b 0002 	movw	r0, #45058	; 0xb002
 800753c:	f7fe f882 	bl	8005644 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8007540:	2134      	movs	r1, #52	; 0x34
 8007542:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8007546:	f7fe f87d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 800754a:	2134      	movs	r1, #52	; 0x34
 800754c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8007550:	f7fe f878 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8007554:	2134      	movs	r1, #52	; 0x34
 8007556:	f24b 6002 	movw	r0, #46594	; 0xb602
 800755a:	f7fe f873 	bl	8005644 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 800755e:	210d      	movs	r1, #13
 8007560:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8007564:	f7fe f86e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8007568:	210d      	movs	r1, #13
 800756a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800756e:	f7fe f869 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8007572:	210d      	movs	r1, #13
 8007574:	f24b 1002 	movw	r0, #45314	; 0xb102
 8007578:	f7fe f864 	bl	8005644 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 800757c:	2134      	movs	r1, #52	; 0x34
 800757e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8007582:	f7fe f85f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8007586:	2134      	movs	r1, #52	; 0x34
 8007588:	f24b 7001 	movw	r0, #46849	; 0xb701
 800758c:	f7fe f85a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8007590:	2134      	movs	r1, #52	; 0x34
 8007592:	f24b 7002 	movw	r0, #46850	; 0xb702
 8007596:	f7fe f855 	bl	8005644 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 800759a:	2100      	movs	r1, #0
 800759c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80075a0:	f7fe f850 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 80075a4:	2100      	movs	r1, #0
 80075a6:	f24b 2001 	movw	r0, #45569	; 0xb201
 80075aa:	f7fe f84b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 80075ae:	2100      	movs	r1, #0
 80075b0:	f24b 2002 	movw	r0, #45570	; 0xb202
 80075b4:	f7fe f846 	bl	8005644 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 80075b8:	2124      	movs	r1, #36	; 0x24
 80075ba:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80075be:	f7fe f841 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 80075c2:	2124      	movs	r1, #36	; 0x24
 80075c4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80075c8:	f7fe f83c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 80075cc:	2124      	movs	r1, #36	; 0x24
 80075ce:	f64b 0002 	movw	r0, #47106	; 0xb802
 80075d2:	f7fe f837 	bl	8005644 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 80075d6:	2101      	movs	r1, #1
 80075d8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80075dc:	f7fe f832 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 80075e0:	210f      	movs	r1, #15
 80075e2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80075e6:	f7fe f82d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 80075ea:	210f      	movs	r1, #15
 80075ec:	f24b 3001 	movw	r0, #45825	; 0xb301
 80075f0:	f7fe f828 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 80075f4:	210f      	movs	r1, #15
 80075f6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80075fa:	f7fe f823 	bl	8005644 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 80075fe:	2134      	movs	r1, #52	; 0x34
 8007600:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8007604:	f7fe f81e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8007608:	2134      	movs	r1, #52	; 0x34
 800760a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800760e:	f7fe f819 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8007612:	2134      	movs	r1, #52	; 0x34
 8007614:	f64b 1002 	movw	r0, #47362	; 0xb902
 8007618:	f7fe f814 	bl	8005644 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 800761c:	2108      	movs	r1, #8
 800761e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8007622:	f7fe f80f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8007626:	2108      	movs	r1, #8
 8007628:	f24b 5001 	movw	r0, #46337	; 0xb501
 800762c:	f7fe f80a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8007630:	2108      	movs	r1, #8
 8007632:	f24b 5002 	movw	r0, #46338	; 0xb502
 8007636:	f7fe f805 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 800763a:	2103      	movs	r1, #3
 800763c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8007640:	f7fe f800 	bl	8005644 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8007644:	2124      	movs	r1, #36	; 0x24
 8007646:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800764a:	f7fd fffb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 800764e:	2124      	movs	r1, #36	; 0x24
 8007650:	f64b 2001 	movw	r0, #47617	; 0xba01
 8007654:	f7fd fff6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8007658:	2124      	movs	r1, #36	; 0x24
 800765a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800765e:	f7fd fff1 	bl	8005644 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8007662:	2100      	movs	r1, #0
 8007664:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8007668:	f7fd ffec 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 800766c:	2178      	movs	r1, #120	; 0x78
 800766e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8007672:	f7fd ffe7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8007676:	2100      	movs	r1, #0
 8007678:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800767c:	f7fd ffe2 	bl	8005644 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8007680:	2100      	movs	r1, #0
 8007682:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8007686:	f7fd ffdd 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 800768a:	2178      	movs	r1, #120	; 0x78
 800768c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8007690:	f7fd ffd8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8007694:	2100      	movs	r1, #0
 8007696:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800769a:	f7fd ffd3 	bl	8005644 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 800769e:	2100      	movs	r1, #0
 80076a0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80076a4:	f7fd ffce 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 80076a8:	2164      	movs	r1, #100	; 0x64
 80076aa:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80076ae:	f7fd ffc9 	bl	8005644 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 80076b2:	2100      	movs	r1, #0
 80076b4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80076b8:	f7fd ffc4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 80076bc:	2133      	movs	r1, #51	; 0x33
 80076be:	f24d 1001 	movw	r0, #53505	; 0xd101
 80076c2:	f7fd ffbf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 80076c6:	2100      	movs	r1, #0
 80076c8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80076cc:	f7fd ffba 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 80076d0:	2134      	movs	r1, #52	; 0x34
 80076d2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80076d6:	f7fd ffb5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 80076da:	2100      	movs	r1, #0
 80076dc:	f24d 1004 	movw	r0, #53508	; 0xd104
 80076e0:	f7fd ffb0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 80076e4:	213a      	movs	r1, #58	; 0x3a
 80076e6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80076ea:	f7fd ffab 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 80076ee:	2100      	movs	r1, #0
 80076f0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80076f4:	f7fd ffa6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 80076f8:	214a      	movs	r1, #74	; 0x4a
 80076fa:	f24d 1007 	movw	r0, #53511	; 0xd107
 80076fe:	f7fd ffa1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8007702:	2100      	movs	r1, #0
 8007704:	f24d 1008 	movw	r0, #53512	; 0xd108
 8007708:	f7fd ff9c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 800770c:	215c      	movs	r1, #92	; 0x5c
 800770e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8007712:	f7fd ff97 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8007716:	2100      	movs	r1, #0
 8007718:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800771c:	f7fd ff92 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8007720:	2181      	movs	r1, #129	; 0x81
 8007722:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8007726:	f7fd ff8d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 800772a:	2100      	movs	r1, #0
 800772c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8007730:	f7fd ff88 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8007734:	21a6      	movs	r1, #166	; 0xa6
 8007736:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800773a:	f7fd ff83 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 800773e:	2100      	movs	r1, #0
 8007740:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8007744:	f7fd ff7e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8007748:	21e5      	movs	r1, #229	; 0xe5
 800774a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800774e:	f7fd ff79 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8007752:	2101      	movs	r1, #1
 8007754:	f24d 1010 	movw	r0, #53520	; 0xd110
 8007758:	f7fd ff74 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 800775c:	2113      	movs	r1, #19
 800775e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8007762:	f7fd ff6f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8007766:	2101      	movs	r1, #1
 8007768:	f24d 1012 	movw	r0, #53522	; 0xd112
 800776c:	f7fd ff6a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8007770:	2154      	movs	r1, #84	; 0x54
 8007772:	f24d 1013 	movw	r0, #53523	; 0xd113
 8007776:	f7fd ff65 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 800777a:	2101      	movs	r1, #1
 800777c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8007780:	f7fd ff60 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8007784:	2182      	movs	r1, #130	; 0x82
 8007786:	f24d 1015 	movw	r0, #53525	; 0xd115
 800778a:	f7fd ff5b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 800778e:	2101      	movs	r1, #1
 8007790:	f24d 1016 	movw	r0, #53526	; 0xd116
 8007794:	f7fd ff56 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8007798:	21ca      	movs	r1, #202	; 0xca
 800779a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800779e:	f7fd ff51 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 80077a2:	2102      	movs	r1, #2
 80077a4:	f24d 1018 	movw	r0, #53528	; 0xd118
 80077a8:	f7fd ff4c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 80077ac:	2100      	movs	r1, #0
 80077ae:	f24d 1019 	movw	r0, #53529	; 0xd119
 80077b2:	f7fd ff47 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 80077b6:	2102      	movs	r1, #2
 80077b8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80077bc:	f7fd ff42 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 80077c0:	2101      	movs	r1, #1
 80077c2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80077c6:	f7fd ff3d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 80077ca:	2102      	movs	r1, #2
 80077cc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80077d0:	f7fd ff38 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 80077d4:	2134      	movs	r1, #52	; 0x34
 80077d6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80077da:	f7fd ff33 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 80077de:	2102      	movs	r1, #2
 80077e0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80077e4:	f7fd ff2e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 80077e8:	2167      	movs	r1, #103	; 0x67
 80077ea:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80077ee:	f7fd ff29 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 80077f2:	2102      	movs	r1, #2
 80077f4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80077f8:	f7fd ff24 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 80077fc:	2184      	movs	r1, #132	; 0x84
 80077fe:	f24d 1021 	movw	r0, #53537	; 0xd121
 8007802:	f7fd ff1f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8007806:	2102      	movs	r1, #2
 8007808:	f24d 1022 	movw	r0, #53538	; 0xd122
 800780c:	f7fd ff1a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8007810:	21a4      	movs	r1, #164	; 0xa4
 8007812:	f24d 1023 	movw	r0, #53539	; 0xd123
 8007816:	f7fd ff15 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 800781a:	2102      	movs	r1, #2
 800781c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8007820:	f7fd ff10 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8007824:	21b7      	movs	r1, #183	; 0xb7
 8007826:	f24d 1025 	movw	r0, #53541	; 0xd125
 800782a:	f7fd ff0b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 800782e:	2102      	movs	r1, #2
 8007830:	f24d 1026 	movw	r0, #53542	; 0xd126
 8007834:	f7fd ff06 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8007838:	21cf      	movs	r1, #207	; 0xcf
 800783a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800783e:	f7fd ff01 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8007842:	2102      	movs	r1, #2
 8007844:	f24d 1028 	movw	r0, #53544	; 0xd128
 8007848:	f7fd fefc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 800784c:	21de      	movs	r1, #222	; 0xde
 800784e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8007852:	f7fd fef7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8007856:	2102      	movs	r1, #2
 8007858:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800785c:	f7fd fef2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8007860:	21f2      	movs	r1, #242	; 0xf2
 8007862:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8007866:	f7fd feed 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 800786a:	2102      	movs	r1, #2
 800786c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8007870:	f7fd fee8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8007874:	21fe      	movs	r1, #254	; 0xfe
 8007876:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800787a:	f7fd fee3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 800787e:	2103      	movs	r1, #3
 8007880:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8007884:	f7fd fede 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8007888:	2110      	movs	r1, #16
 800788a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800788e:	f7fd fed9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8007892:	2103      	movs	r1, #3
 8007894:	f24d 1030 	movw	r0, #53552	; 0xd130
 8007898:	f7fd fed4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 800789c:	2133      	movs	r1, #51	; 0x33
 800789e:	f24d 1031 	movw	r0, #53553	; 0xd131
 80078a2:	f7fd fecf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 80078a6:	2103      	movs	r1, #3
 80078a8:	f24d 1032 	movw	r0, #53554	; 0xd132
 80078ac:	f7fd feca 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 80078b0:	216d      	movs	r1, #109	; 0x6d
 80078b2:	f24d 1033 	movw	r0, #53555	; 0xd133
 80078b6:	f7fd fec5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 80078ba:	2100      	movs	r1, #0
 80078bc:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80078c0:	f7fd fec0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 80078c4:	2133      	movs	r1, #51	; 0x33
 80078c6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80078ca:	f7fd febb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 80078ce:	2100      	movs	r1, #0
 80078d0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80078d4:	f7fd feb6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 80078d8:	2134      	movs	r1, #52	; 0x34
 80078da:	f24d 2003 	movw	r0, #53763	; 0xd203
 80078de:	f7fd feb1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 80078e2:	2100      	movs	r1, #0
 80078e4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80078e8:	f7fd feac 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 80078ec:	213a      	movs	r1, #58	; 0x3a
 80078ee:	f24d 2005 	movw	r0, #53765	; 0xd205
 80078f2:	f7fd fea7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 80078f6:	2100      	movs	r1, #0
 80078f8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80078fc:	f7fd fea2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8007900:	214a      	movs	r1, #74	; 0x4a
 8007902:	f24d 2007 	movw	r0, #53767	; 0xd207
 8007906:	f7fd fe9d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 800790a:	2100      	movs	r1, #0
 800790c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8007910:	f7fd fe98 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8007914:	215c      	movs	r1, #92	; 0x5c
 8007916:	f24d 2009 	movw	r0, #53769	; 0xd209
 800791a:	f7fd fe93 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 800791e:	2100      	movs	r1, #0
 8007920:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8007924:	f7fd fe8e 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8007928:	2181      	movs	r1, #129	; 0x81
 800792a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 800792e:	f7fd fe89 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8007932:	2100      	movs	r1, #0
 8007934:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8007938:	f7fd fe84 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 800793c:	21a6      	movs	r1, #166	; 0xa6
 800793e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8007942:	f7fd fe7f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8007946:	2100      	movs	r1, #0
 8007948:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800794c:	f7fd fe7a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8007950:	21e5      	movs	r1, #229	; 0xe5
 8007952:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8007956:	f7fd fe75 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 800795a:	2101      	movs	r1, #1
 800795c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8007960:	f7fd fe70 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8007964:	2113      	movs	r1, #19
 8007966:	f24d 2011 	movw	r0, #53777	; 0xd211
 800796a:	f7fd fe6b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 800796e:	2101      	movs	r1, #1
 8007970:	f24d 2012 	movw	r0, #53778	; 0xd212
 8007974:	f7fd fe66 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8007978:	2154      	movs	r1, #84	; 0x54
 800797a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800797e:	f7fd fe61 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8007982:	2101      	movs	r1, #1
 8007984:	f24d 2014 	movw	r0, #53780	; 0xd214
 8007988:	f7fd fe5c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 800798c:	2182      	movs	r1, #130	; 0x82
 800798e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8007992:	f7fd fe57 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8007996:	2101      	movs	r1, #1
 8007998:	f24d 2016 	movw	r0, #53782	; 0xd216
 800799c:	f7fd fe52 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 80079a0:	21ca      	movs	r1, #202	; 0xca
 80079a2:	f24d 2017 	movw	r0, #53783	; 0xd217
 80079a6:	f7fd fe4d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 80079aa:	2102      	movs	r1, #2
 80079ac:	f24d 2018 	movw	r0, #53784	; 0xd218
 80079b0:	f7fd fe48 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 80079b4:	2100      	movs	r1, #0
 80079b6:	f24d 2019 	movw	r0, #53785	; 0xd219
 80079ba:	f7fd fe43 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 80079be:	2102      	movs	r1, #2
 80079c0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80079c4:	f7fd fe3e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 80079c8:	2101      	movs	r1, #1
 80079ca:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80079ce:	f7fd fe39 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 80079d2:	2102      	movs	r1, #2
 80079d4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80079d8:	f7fd fe34 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 80079dc:	2134      	movs	r1, #52	; 0x34
 80079de:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80079e2:	f7fd fe2f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 80079e6:	2102      	movs	r1, #2
 80079e8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80079ec:	f7fd fe2a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 80079f0:	2167      	movs	r1, #103	; 0x67
 80079f2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80079f6:	f7fd fe25 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 80079fa:	2102      	movs	r1, #2
 80079fc:	f24d 2020 	movw	r0, #53792	; 0xd220
 8007a00:	f7fd fe20 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8007a04:	2184      	movs	r1, #132	; 0x84
 8007a06:	f24d 2021 	movw	r0, #53793	; 0xd221
 8007a0a:	f7fd fe1b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8007a0e:	2102      	movs	r1, #2
 8007a10:	f24d 2022 	movw	r0, #53794	; 0xd222
 8007a14:	f7fd fe16 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8007a18:	21a4      	movs	r1, #164	; 0xa4
 8007a1a:	f24d 2023 	movw	r0, #53795	; 0xd223
 8007a1e:	f7fd fe11 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8007a22:	2102      	movs	r1, #2
 8007a24:	f24d 2024 	movw	r0, #53796	; 0xd224
 8007a28:	f7fd fe0c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8007a2c:	21b7      	movs	r1, #183	; 0xb7
 8007a2e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8007a32:	f7fd fe07 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8007a36:	2102      	movs	r1, #2
 8007a38:	f24d 2026 	movw	r0, #53798	; 0xd226
 8007a3c:	f7fd fe02 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8007a40:	21cf      	movs	r1, #207	; 0xcf
 8007a42:	f24d 2027 	movw	r0, #53799	; 0xd227
 8007a46:	f7fd fdfd 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8007a50:	f7fd fdf8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8007a54:	21de      	movs	r1, #222	; 0xde
 8007a56:	f24d 2029 	movw	r0, #53801	; 0xd229
 8007a5a:	f7fd fdf3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8007a5e:	2102      	movs	r1, #2
 8007a60:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8007a64:	f7fd fdee 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8007a68:	21f2      	movs	r1, #242	; 0xf2
 8007a6a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8007a6e:	f7fd fde9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8007a72:	2102      	movs	r1, #2
 8007a74:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8007a78:	f7fd fde4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8007a7c:	21fe      	movs	r1, #254	; 0xfe
 8007a7e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8007a82:	f7fd fddf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8007a86:	2103      	movs	r1, #3
 8007a88:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8007a8c:	f7fd fdda 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8007a90:	2110      	movs	r1, #16
 8007a92:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8007a96:	f7fd fdd5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8007a9a:	2103      	movs	r1, #3
 8007a9c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8007aa0:	f7fd fdd0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8007aa4:	2133      	movs	r1, #51	; 0x33
 8007aa6:	f24d 2031 	movw	r0, #53809	; 0xd231
 8007aaa:	f7fd fdcb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8007aae:	2103      	movs	r1, #3
 8007ab0:	f24d 2032 	movw	r0, #53810	; 0xd232
 8007ab4:	f7fd fdc6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8007ab8:	216d      	movs	r1, #109	; 0x6d
 8007aba:	f24d 2033 	movw	r0, #53811	; 0xd233
 8007abe:	f7fd fdc1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8007ac8:	f7fd fdbc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8007acc:	2133      	movs	r1, #51	; 0x33
 8007ace:	f24d 3001 	movw	r0, #54017	; 0xd301
 8007ad2:	f7fd fdb7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	f24d 3002 	movw	r0, #54018	; 0xd302
 8007adc:	f7fd fdb2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8007ae0:	2134      	movs	r1, #52	; 0x34
 8007ae2:	f24d 3003 	movw	r0, #54019	; 0xd303
 8007ae6:	f7fd fdad 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8007aea:	2100      	movs	r1, #0
 8007aec:	f24d 3004 	movw	r0, #54020	; 0xd304
 8007af0:	f7fd fda8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8007af4:	213a      	movs	r1, #58	; 0x3a
 8007af6:	f24d 3005 	movw	r0, #54021	; 0xd305
 8007afa:	f7fd fda3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8007afe:	2100      	movs	r1, #0
 8007b00:	f24d 3006 	movw	r0, #54022	; 0xd306
 8007b04:	f7fd fd9e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8007b08:	214a      	movs	r1, #74	; 0x4a
 8007b0a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8007b0e:	f7fd fd99 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8007b12:	2100      	movs	r1, #0
 8007b14:	f24d 3008 	movw	r0, #54024	; 0xd308
 8007b18:	f7fd fd94 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8007b1c:	215c      	movs	r1, #92	; 0x5c
 8007b1e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8007b22:	f7fd fd8f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8007b26:	2100      	movs	r1, #0
 8007b28:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8007b2c:	f7fd fd8a 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8007b30:	2181      	movs	r1, #129	; 0x81
 8007b32:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8007b36:	f7fd fd85 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8007b40:	f7fd fd80 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8007b44:	21a6      	movs	r1, #166	; 0xa6
 8007b46:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8007b4a:	f7fd fd7b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8007b4e:	2100      	movs	r1, #0
 8007b50:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8007b54:	f7fd fd76 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8007b58:	21e5      	movs	r1, #229	; 0xe5
 8007b5a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8007b5e:	f7fd fd71 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8007b62:	2101      	movs	r1, #1
 8007b64:	f24d 3010 	movw	r0, #54032	; 0xd310
 8007b68:	f7fd fd6c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8007b6c:	2113      	movs	r1, #19
 8007b6e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8007b72:	f7fd fd67 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8007b76:	2101      	movs	r1, #1
 8007b78:	f24d 3012 	movw	r0, #54034	; 0xd312
 8007b7c:	f7fd fd62 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8007b80:	2154      	movs	r1, #84	; 0x54
 8007b82:	f24d 3013 	movw	r0, #54035	; 0xd313
 8007b86:	f7fd fd5d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8007b90:	f7fd fd58 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8007b94:	2182      	movs	r1, #130	; 0x82
 8007b96:	f24d 3015 	movw	r0, #54037	; 0xd315
 8007b9a:	f7fd fd53 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	f24d 3016 	movw	r0, #54038	; 0xd316
 8007ba4:	f7fd fd4e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8007ba8:	21ca      	movs	r1, #202	; 0xca
 8007baa:	f24d 3017 	movw	r0, #54039	; 0xd317
 8007bae:	f7fd fd49 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	f24d 3018 	movw	r0, #54040	; 0xd318
 8007bb8:	f7fd fd44 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	f24d 3019 	movw	r0, #54041	; 0xd319
 8007bc2:	f7fd fd3f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8007bcc:	f7fd fd3a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8007bd6:	f7fd fd35 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8007bda:	2102      	movs	r1, #2
 8007bdc:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8007be0:	f7fd fd30 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8007be4:	2134      	movs	r1, #52	; 0x34
 8007be6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8007bea:	f7fd fd2b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8007bee:	2102      	movs	r1, #2
 8007bf0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8007bf4:	f7fd fd26 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8007bf8:	2167      	movs	r1, #103	; 0x67
 8007bfa:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8007bfe:	f7fd fd21 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8007c02:	2102      	movs	r1, #2
 8007c04:	f24d 3020 	movw	r0, #54048	; 0xd320
 8007c08:	f7fd fd1c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8007c0c:	2184      	movs	r1, #132	; 0x84
 8007c0e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8007c12:	f7fd fd17 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8007c16:	2102      	movs	r1, #2
 8007c18:	f24d 3022 	movw	r0, #54050	; 0xd322
 8007c1c:	f7fd fd12 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8007c20:	21a4      	movs	r1, #164	; 0xa4
 8007c22:	f24d 3023 	movw	r0, #54051	; 0xd323
 8007c26:	f7fd fd0d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 8007c2a:	2102      	movs	r1, #2
 8007c2c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8007c30:	f7fd fd08 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8007c34:	21b7      	movs	r1, #183	; 0xb7
 8007c36:	f24d 3025 	movw	r0, #54053	; 0xd325
 8007c3a:	f7fd fd03 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 8007c3e:	2102      	movs	r1, #2
 8007c40:	f24d 3026 	movw	r0, #54054	; 0xd326
 8007c44:	f7fd fcfe 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8007c48:	21cf      	movs	r1, #207	; 0xcf
 8007c4a:	f24d 3027 	movw	r0, #54055	; 0xd327
 8007c4e:	f7fd fcf9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8007c52:	2102      	movs	r1, #2
 8007c54:	f24d 3028 	movw	r0, #54056	; 0xd328
 8007c58:	f7fd fcf4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8007c5c:	21de      	movs	r1, #222	; 0xde
 8007c5e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8007c62:	f7fd fcef 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8007c66:	2102      	movs	r1, #2
 8007c68:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8007c6c:	f7fd fcea 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8007c70:	21f2      	movs	r1, #242	; 0xf2
 8007c72:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8007c76:	f7fd fce5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8007c7a:	2102      	movs	r1, #2
 8007c7c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8007c80:	f7fd fce0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8007c84:	21fe      	movs	r1, #254	; 0xfe
 8007c86:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8007c8a:	f7fd fcdb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8007c8e:	2103      	movs	r1, #3
 8007c90:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8007c94:	f7fd fcd6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8007c98:	2110      	movs	r1, #16
 8007c9a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8007c9e:	f7fd fcd1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8007ca2:	2103      	movs	r1, #3
 8007ca4:	f24d 3030 	movw	r0, #54064	; 0xd330
 8007ca8:	f7fd fccc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8007cac:	2133      	movs	r1, #51	; 0x33
 8007cae:	f24d 3031 	movw	r0, #54065	; 0xd331
 8007cb2:	f7fd fcc7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8007cb6:	2103      	movs	r1, #3
 8007cb8:	f24d 3032 	movw	r0, #54066	; 0xd332
 8007cbc:	f7fd fcc2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8007cc0:	216d      	movs	r1, #109	; 0x6d
 8007cc2:	f24d 3033 	movw	r0, #54067	; 0xd333
 8007cc6:	f7fd fcbd 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8007cca:	2100      	movs	r1, #0
 8007ccc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8007cd0:	f7fd fcb8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8007cd4:	2133      	movs	r1, #51	; 0x33
 8007cd6:	f24d 4001 	movw	r0, #54273	; 0xd401
 8007cda:	f7fd fcb3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 8007cde:	2100      	movs	r1, #0
 8007ce0:	f24d 4002 	movw	r0, #54274	; 0xd402
 8007ce4:	f7fd fcae 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8007ce8:	2134      	movs	r1, #52	; 0x34
 8007cea:	f24d 4003 	movw	r0, #54275	; 0xd403
 8007cee:	f7fd fca9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	f24d 4004 	movw	r0, #54276	; 0xd404
 8007cf8:	f7fd fca4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8007cfc:	213a      	movs	r1, #58	; 0x3a
 8007cfe:	f24d 4005 	movw	r0, #54277	; 0xd405
 8007d02:	f7fd fc9f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 8007d06:	2100      	movs	r1, #0
 8007d08:	f24d 4006 	movw	r0, #54278	; 0xd406
 8007d0c:	f7fd fc9a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8007d10:	214a      	movs	r1, #74	; 0x4a
 8007d12:	f24d 4007 	movw	r0, #54279	; 0xd407
 8007d16:	f7fd fc95 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8007d20:	f7fd fc90 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8007d24:	215c      	movs	r1, #92	; 0x5c
 8007d26:	f24d 4009 	movw	r0, #54281	; 0xd409
 8007d2a:	f7fd fc8b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 8007d2e:	2100      	movs	r1, #0
 8007d30:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8007d34:	f7fd fc86 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 8007d38:	2181      	movs	r1, #129	; 0x81
 8007d3a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8007d3e:	f7fd fc81 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8007d42:	2100      	movs	r1, #0
 8007d44:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8007d48:	f7fd fc7c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 8007d4c:	21a6      	movs	r1, #166	; 0xa6
 8007d4e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8007d52:	f7fd fc77 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8007d56:	2100      	movs	r1, #0
 8007d58:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8007d5c:	f7fd fc72 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8007d60:	21e5      	movs	r1, #229	; 0xe5
 8007d62:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8007d66:	f7fd fc6d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8007d70:	f7fd fc68 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8007d74:	2113      	movs	r1, #19
 8007d76:	f24d 4011 	movw	r0, #54289	; 0xd411
 8007d7a:	f7fd fc63 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 8007d7e:	2101      	movs	r1, #1
 8007d80:	f24d 4012 	movw	r0, #54290	; 0xd412
 8007d84:	f7fd fc5e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8007d88:	2154      	movs	r1, #84	; 0x54
 8007d8a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8007d8e:	f7fd fc59 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8007d92:	2101      	movs	r1, #1
 8007d94:	f24d 4014 	movw	r0, #54292	; 0xd414
 8007d98:	f7fd fc54 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8007d9c:	2182      	movs	r1, #130	; 0x82
 8007d9e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8007da2:	f7fd fc4f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8007da6:	2101      	movs	r1, #1
 8007da8:	f24d 4016 	movw	r0, #54294	; 0xd416
 8007dac:	f7fd fc4a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8007db0:	21ca      	movs	r1, #202	; 0xca
 8007db2:	f24d 4017 	movw	r0, #54295	; 0xd417
 8007db6:	f7fd fc45 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8007dba:	2102      	movs	r1, #2
 8007dbc:	f24d 4018 	movw	r0, #54296	; 0xd418
 8007dc0:	f7fd fc40 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	f24d 4019 	movw	r0, #54297	; 0xd419
 8007dca:	f7fd fc3b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 8007dce:	2102      	movs	r1, #2
 8007dd0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8007dd4:	f7fd fc36 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8007dd8:	2101      	movs	r1, #1
 8007dda:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8007dde:	f7fd fc31 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8007de2:	2102      	movs	r1, #2
 8007de4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8007de8:	f7fd fc2c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8007dec:	2134      	movs	r1, #52	; 0x34
 8007dee:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8007df2:	f7fd fc27 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8007df6:	2102      	movs	r1, #2
 8007df8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8007dfc:	f7fd fc22 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8007e00:	2167      	movs	r1, #103	; 0x67
 8007e02:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8007e06:	f7fd fc1d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 8007e0a:	2102      	movs	r1, #2
 8007e0c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8007e10:	f7fd fc18 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8007e14:	2184      	movs	r1, #132	; 0x84
 8007e16:	f24d 4021 	movw	r0, #54305	; 0xd421
 8007e1a:	f7fd fc13 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 8007e1e:	2102      	movs	r1, #2
 8007e20:	f24d 4022 	movw	r0, #54306	; 0xd422
 8007e24:	f7fd fc0e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 8007e28:	21a4      	movs	r1, #164	; 0xa4
 8007e2a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8007e2e:	f7fd fc09 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8007e32:	2102      	movs	r1, #2
 8007e34:	f24d 4024 	movw	r0, #54308	; 0xd424
 8007e38:	f7fd fc04 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 8007e3c:	21b7      	movs	r1, #183	; 0xb7
 8007e3e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8007e42:	f7fd fbff 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8007e46:	2102      	movs	r1, #2
 8007e48:	f24d 4026 	movw	r0, #54310	; 0xd426
 8007e4c:	f7fd fbfa 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8007e50:	21cf      	movs	r1, #207	; 0xcf
 8007e52:	f24d 4027 	movw	r0, #54311	; 0xd427
 8007e56:	f7fd fbf5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 8007e5a:	2102      	movs	r1, #2
 8007e5c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8007e60:	f7fd fbf0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8007e64:	21de      	movs	r1, #222	; 0xde
 8007e66:	f24d 4029 	movw	r0, #54313	; 0xd429
 8007e6a:	f7fd fbeb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8007e6e:	2102      	movs	r1, #2
 8007e70:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8007e74:	f7fd fbe6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8007e78:	21f2      	movs	r1, #242	; 0xf2
 8007e7a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8007e7e:	f7fd fbe1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8007e82:	2102      	movs	r1, #2
 8007e84:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8007e88:	f7fd fbdc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8007e8c:	21fe      	movs	r1, #254	; 0xfe
 8007e8e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8007e92:	f7fd fbd7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8007e96:	2103      	movs	r1, #3
 8007e98:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8007e9c:	f7fd fbd2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8007ea0:	2110      	movs	r1, #16
 8007ea2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8007ea6:	f7fd fbcd 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8007eaa:	2103      	movs	r1, #3
 8007eac:	f24d 4030 	movw	r0, #54320	; 0xd430
 8007eb0:	f7fd fbc8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8007eb4:	2133      	movs	r1, #51	; 0x33
 8007eb6:	f24d 4031 	movw	r0, #54321	; 0xd431
 8007eba:	f7fd fbc3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8007ebe:	2103      	movs	r1, #3
 8007ec0:	f24d 4032 	movw	r0, #54322	; 0xd432
 8007ec4:	f7fd fbbe 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8007ec8:	216d      	movs	r1, #109	; 0x6d
 8007eca:	f24d 4033 	movw	r0, #54323	; 0xd433
 8007ece:	f7fd fbb9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8007ed8:	f7fd fbb4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8007edc:	2133      	movs	r1, #51	; 0x33
 8007ede:	f24d 5001 	movw	r0, #54529	; 0xd501
 8007ee2:	f7fd fbaf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8007eec:	f7fd fbaa 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8007ef0:	2134      	movs	r1, #52	; 0x34
 8007ef2:	f24d 5003 	movw	r0, #54531	; 0xd503
 8007ef6:	f7fd fba5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8007efa:	2100      	movs	r1, #0
 8007efc:	f24d 5004 	movw	r0, #54532	; 0xd504
 8007f00:	f7fd fba0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8007f04:	213a      	movs	r1, #58	; 0x3a
 8007f06:	f24d 5005 	movw	r0, #54533	; 0xd505
 8007f0a:	f7fd fb9b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8007f0e:	2100      	movs	r1, #0
 8007f10:	f24d 5006 	movw	r0, #54534	; 0xd506
 8007f14:	f7fd fb96 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8007f18:	214a      	movs	r1, #74	; 0x4a
 8007f1a:	f24d 5007 	movw	r0, #54535	; 0xd507
 8007f1e:	f7fd fb91 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8007f22:	2100      	movs	r1, #0
 8007f24:	f24d 5008 	movw	r0, #54536	; 0xd508
 8007f28:	f7fd fb8c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8007f2c:	215c      	movs	r1, #92	; 0x5c
 8007f2e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8007f32:	f7fd fb87 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8007f36:	2100      	movs	r1, #0
 8007f38:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8007f3c:	f7fd fb82 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8007f40:	2181      	movs	r1, #129	; 0x81
 8007f42:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8007f46:	f7fd fb7d 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8007f50:	f7fd fb78 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8007f54:	21a6      	movs	r1, #166	; 0xa6
 8007f56:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8007f5a:	f7fd fb73 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 8007f5e:	2100      	movs	r1, #0
 8007f60:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8007f64:	f7fd fb6e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8007f68:	21e5      	movs	r1, #229	; 0xe5
 8007f6a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8007f6e:	f7fd fb69 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8007f72:	2101      	movs	r1, #1
 8007f74:	f24d 5010 	movw	r0, #54544	; 0xd510
 8007f78:	f7fd fb64 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8007f7c:	2113      	movs	r1, #19
 8007f7e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8007f82:	f7fd fb5f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8007f86:	2101      	movs	r1, #1
 8007f88:	f24d 5012 	movw	r0, #54546	; 0xd512
 8007f8c:	f7fd fb5a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8007f90:	2154      	movs	r1, #84	; 0x54
 8007f92:	f24d 5013 	movw	r0, #54547	; 0xd513
 8007f96:	f7fd fb55 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8007fa0:	f7fd fb50 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8007fa4:	2182      	movs	r1, #130	; 0x82
 8007fa6:	f24d 5015 	movw	r0, #54549	; 0xd515
 8007faa:	f7fd fb4b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8007fae:	2101      	movs	r1, #1
 8007fb0:	f24d 5016 	movw	r0, #54550	; 0xd516
 8007fb4:	f7fd fb46 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8007fb8:	21ca      	movs	r1, #202	; 0xca
 8007fba:	f24d 5017 	movw	r0, #54551	; 0xd517
 8007fbe:	f7fd fb41 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8007fc2:	2102      	movs	r1, #2
 8007fc4:	f24d 5018 	movw	r0, #54552	; 0xd518
 8007fc8:	f7fd fb3c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8007fcc:	2100      	movs	r1, #0
 8007fce:	f24d 5019 	movw	r0, #54553	; 0xd519
 8007fd2:	f7fd fb37 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8007fdc:	f7fd fb32 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8007fe6:	f7fd fb2d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8007fea:	2102      	movs	r1, #2
 8007fec:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8007ff0:	f7fd fb28 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8007ff4:	2134      	movs	r1, #52	; 0x34
 8007ff6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8007ffa:	f7fd fb23 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8007ffe:	2102      	movs	r1, #2
 8008000:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8008004:	f7fd fb1e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8008008:	2167      	movs	r1, #103	; 0x67
 800800a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800800e:	f7fd fb19 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8008012:	2102      	movs	r1, #2
 8008014:	f24d 5020 	movw	r0, #54560	; 0xd520
 8008018:	f7fd fb14 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 800801c:	2184      	movs	r1, #132	; 0x84
 800801e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8008022:	f7fd fb0f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8008026:	2102      	movs	r1, #2
 8008028:	f24d 5022 	movw	r0, #54562	; 0xd522
 800802c:	f7fd fb0a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8008030:	21a4      	movs	r1, #164	; 0xa4
 8008032:	f24d 5023 	movw	r0, #54563	; 0xd523
 8008036:	f7fd fb05 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 800803a:	2102      	movs	r1, #2
 800803c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8008040:	f7fd fb00 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8008044:	21b7      	movs	r1, #183	; 0xb7
 8008046:	f24d 5025 	movw	r0, #54565	; 0xd525
 800804a:	f7fd fafb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 800804e:	2102      	movs	r1, #2
 8008050:	f24d 5026 	movw	r0, #54566	; 0xd526
 8008054:	f7fd faf6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8008058:	21cf      	movs	r1, #207	; 0xcf
 800805a:	f24d 5027 	movw	r0, #54567	; 0xd527
 800805e:	f7fd faf1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8008062:	2102      	movs	r1, #2
 8008064:	f24d 5028 	movw	r0, #54568	; 0xd528
 8008068:	f7fd faec 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 800806c:	21de      	movs	r1, #222	; 0xde
 800806e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8008072:	f7fd fae7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8008076:	2102      	movs	r1, #2
 8008078:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800807c:	f7fd fae2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8008080:	21f2      	movs	r1, #242	; 0xf2
 8008082:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8008086:	f7fd fadd 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 800808a:	2102      	movs	r1, #2
 800808c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8008090:	f7fd fad8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8008094:	21fe      	movs	r1, #254	; 0xfe
 8008096:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800809a:	f7fd fad3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800809e:	2103      	movs	r1, #3
 80080a0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80080a4:	f7fd face 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 80080a8:	2110      	movs	r1, #16
 80080aa:	f24d 502f 	movw	r0, #54575	; 0xd52f
 80080ae:	f7fd fac9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 80080b2:	2103      	movs	r1, #3
 80080b4:	f24d 5030 	movw	r0, #54576	; 0xd530
 80080b8:	f7fd fac4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 80080bc:	2133      	movs	r1, #51	; 0x33
 80080be:	f24d 5031 	movw	r0, #54577	; 0xd531
 80080c2:	f7fd fabf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 80080c6:	2103      	movs	r1, #3
 80080c8:	f24d 5032 	movw	r0, #54578	; 0xd532
 80080cc:	f7fd faba 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 80080d0:	216d      	movs	r1, #109	; 0x6d
 80080d2:	f24d 5033 	movw	r0, #54579	; 0xd533
 80080d6:	f7fd fab5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 80080da:	2100      	movs	r1, #0
 80080dc:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80080e0:	f7fd fab0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 80080e4:	2133      	movs	r1, #51	; 0x33
 80080e6:	f24d 6001 	movw	r0, #54785	; 0xd601
 80080ea:	f7fd faab 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 80080ee:	2100      	movs	r1, #0
 80080f0:	f24d 6002 	movw	r0, #54786	; 0xd602
 80080f4:	f7fd faa6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 80080f8:	2134      	movs	r1, #52	; 0x34
 80080fa:	f24d 6003 	movw	r0, #54787	; 0xd603
 80080fe:	f7fd faa1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8008102:	2100      	movs	r1, #0
 8008104:	f24d 6004 	movw	r0, #54788	; 0xd604
 8008108:	f7fd fa9c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 800810c:	213a      	movs	r1, #58	; 0x3a
 800810e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8008112:	f7fd fa97 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8008116:	2100      	movs	r1, #0
 8008118:	f24d 6006 	movw	r0, #54790	; 0xd606
 800811c:	f7fd fa92 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8008120:	214a      	movs	r1, #74	; 0x4a
 8008122:	f24d 6007 	movw	r0, #54791	; 0xd607
 8008126:	f7fd fa8d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 800812a:	2100      	movs	r1, #0
 800812c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8008130:	f7fd fa88 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8008134:	215c      	movs	r1, #92	; 0x5c
 8008136:	f24d 6009 	movw	r0, #54793	; 0xd609
 800813a:	f7fd fa83 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 800813e:	2100      	movs	r1, #0
 8008140:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8008144:	f7fd fa7e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8008148:	2181      	movs	r1, #129	; 0x81
 800814a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800814e:	f7fd fa79 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8008152:	2100      	movs	r1, #0
 8008154:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8008158:	f7fd fa74 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 800815c:	21a6      	movs	r1, #166	; 0xa6
 800815e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8008162:	f7fd fa6f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8008166:	2100      	movs	r1, #0
 8008168:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800816c:	f7fd fa6a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8008170:	21e5      	movs	r1, #229	; 0xe5
 8008172:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8008176:	f7fd fa65 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 800817a:	2101      	movs	r1, #1
 800817c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8008180:	f7fd fa60 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8008184:	2113      	movs	r1, #19
 8008186:	f24d 6011 	movw	r0, #54801	; 0xd611
 800818a:	f7fd fa5b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800818e:	2101      	movs	r1, #1
 8008190:	f24d 6012 	movw	r0, #54802	; 0xd612
 8008194:	f7fd fa56 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8008198:	2154      	movs	r1, #84	; 0x54
 800819a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800819e:	f7fd fa51 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 80081a2:	2101      	movs	r1, #1
 80081a4:	f24d 6014 	movw	r0, #54804	; 0xd614
 80081a8:	f7fd fa4c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 80081ac:	2182      	movs	r1, #130	; 0x82
 80081ae:	f24d 6015 	movw	r0, #54805	; 0xd615
 80081b2:	f7fd fa47 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 80081b6:	2101      	movs	r1, #1
 80081b8:	f24d 6016 	movw	r0, #54806	; 0xd616
 80081bc:	f7fd fa42 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 80081c0:	21ca      	movs	r1, #202	; 0xca
 80081c2:	f24d 6017 	movw	r0, #54807	; 0xd617
 80081c6:	f7fd fa3d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 80081ca:	2102      	movs	r1, #2
 80081cc:	f24d 6018 	movw	r0, #54808	; 0xd618
 80081d0:	f7fd fa38 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 80081d4:	2100      	movs	r1, #0
 80081d6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80081da:	f7fd fa33 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 80081de:	2102      	movs	r1, #2
 80081e0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80081e4:	f7fd fa2e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 80081e8:	2101      	movs	r1, #1
 80081ea:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80081ee:	f7fd fa29 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 80081f2:	2102      	movs	r1, #2
 80081f4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80081f8:	f7fd fa24 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 80081fc:	2134      	movs	r1, #52	; 0x34
 80081fe:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8008202:	f7fd fa1f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8008206:	2102      	movs	r1, #2
 8008208:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800820c:	f7fd fa1a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8008210:	2167      	movs	r1, #103	; 0x67
 8008212:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8008216:	f7fd fa15 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 800821a:	2102      	movs	r1, #2
 800821c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8008220:	f7fd fa10 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8008224:	2184      	movs	r1, #132	; 0x84
 8008226:	f24d 6021 	movw	r0, #54817	; 0xd621
 800822a:	f7fd fa0b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 800822e:	2102      	movs	r1, #2
 8008230:	f24d 6022 	movw	r0, #54818	; 0xd622
 8008234:	f7fd fa06 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8008238:	21a4      	movs	r1, #164	; 0xa4
 800823a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800823e:	f7fd fa01 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8008242:	2102      	movs	r1, #2
 8008244:	f24d 6024 	movw	r0, #54820	; 0xd624
 8008248:	f7fd f9fc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 800824c:	21b7      	movs	r1, #183	; 0xb7
 800824e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8008252:	f7fd f9f7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8008256:	2102      	movs	r1, #2
 8008258:	f24d 6026 	movw	r0, #54822	; 0xd626
 800825c:	f7fd f9f2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8008260:	21cf      	movs	r1, #207	; 0xcf
 8008262:	f24d 6027 	movw	r0, #54823	; 0xd627
 8008266:	f7fd f9ed 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 800826a:	2102      	movs	r1, #2
 800826c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8008270:	f7fd f9e8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8008274:	21de      	movs	r1, #222	; 0xde
 8008276:	f24d 6029 	movw	r0, #54825	; 0xd629
 800827a:	f7fd f9e3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 800827e:	2102      	movs	r1, #2
 8008280:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8008284:	f7fd f9de 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8008288:	21f2      	movs	r1, #242	; 0xf2
 800828a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800828e:	f7fd f9d9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8008292:	2102      	movs	r1, #2
 8008294:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8008298:	f7fd f9d4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 800829c:	21fe      	movs	r1, #254	; 0xfe
 800829e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80082a2:	f7fd f9cf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 80082a6:	2103      	movs	r1, #3
 80082a8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80082ac:	f7fd f9ca 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 80082b0:	2110      	movs	r1, #16
 80082b2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80082b6:	f7fd f9c5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 80082ba:	2103      	movs	r1, #3
 80082bc:	f24d 6030 	movw	r0, #54832	; 0xd630
 80082c0:	f7fd f9c0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 80082c4:	2133      	movs	r1, #51	; 0x33
 80082c6:	f24d 6031 	movw	r0, #54833	; 0xd631
 80082ca:	f7fd f9bb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 80082ce:	2103      	movs	r1, #3
 80082d0:	f24d 6032 	movw	r0, #54834	; 0xd632
 80082d4:	f7fd f9b6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 80082d8:	216d      	movs	r1, #109	; 0x6d
 80082da:	f24d 6033 	movw	r0, #54835	; 0xd633
 80082de:	f7fd f9b1 	bl	8005644 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 80082e2:	2155      	movs	r1, #85	; 0x55
 80082e4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80082e8:	f7fd f9ac 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80082ec:	21aa      	movs	r1, #170	; 0xaa
 80082ee:	f24f 0001 	movw	r0, #61441	; 0xf001
 80082f2:	f7fd f9a7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80082f6:	2152      	movs	r1, #82	; 0x52
 80082f8:	f24f 0002 	movw	r0, #61442	; 0xf002
 80082fc:	f7fd f9a2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8008300:	2108      	movs	r1, #8
 8008302:	f24f 0003 	movw	r0, #61443	; 0xf003
 8008306:	f7fd f99d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 800830a:	2100      	movs	r1, #0
 800830c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8008310:	f7fd f998 	bl	8005644 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8008314:	21cc      	movs	r1, #204	; 0xcc
 8008316:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800831a:	f7fd f993 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800831e:	2100      	movs	r1, #0
 8008320:	f24b 1001 	movw	r0, #45313	; 0xb101
 8008324:	f7fd f98e 	bl	8005644 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8008328:	2105      	movs	r1, #5
 800832a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800832e:	f7fd f989 	bl	8005644 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8008332:	2170      	movs	r1, #112	; 0x70
 8008334:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8008338:	f7fd f984 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 800833c:	2170      	movs	r1, #112	; 0x70
 800833e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8008342:	f7fd f97f 	bl	8005644 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8008346:	2101      	movs	r1, #1
 8008348:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800834c:	f7fd f97a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8008350:	2103      	movs	r1, #3
 8008352:	f64b 0001 	movw	r0, #47105	; 0xb801
 8008356:	f7fd f975 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 800835a:	2103      	movs	r1, #3
 800835c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8008360:	f7fd f970 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8008364:	2103      	movs	r1, #3
 8008366:	f64b 0003 	movw	r0, #47107	; 0xb803
 800836a:	f7fd f96b 	bl	8005644 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 800836e:	2102      	movs	r1, #2
 8008370:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8008374:	f7fd f966 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8008378:	2100      	movs	r1, #0
 800837a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800837e:	f7fd f961 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8008382:	2100      	movs	r1, #0
 8008384:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8008388:	f7fd f95c 	bl	8005644 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 800838c:	21d0      	movs	r1, #208	; 0xd0
 800838e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8008392:	f7fd f957 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8008396:	2102      	movs	r1, #2
 8008398:	f64c 1001 	movw	r0, #51457	; 0xc901
 800839c:	f7fd f952 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 80083a0:	2150      	movs	r1, #80	; 0x50
 80083a2:	f64c 1002 	movw	r0, #51458	; 0xc902
 80083a6:	f7fd f94d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 80083aa:	2150      	movs	r1, #80	; 0x50
 80083ac:	f64c 1003 	movw	r0, #51459	; 0xc903
 80083b0:	f7fd f948 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 80083b4:	2150      	movs	r1, #80	; 0x50
 80083b6:	f64c 1004 	movw	r0, #51460	; 0xc904
 80083ba:	f7fd f943 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 80083be:	2100      	movs	r1, #0
 80083c0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80083c4:	f7fd f93e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 80083c8:	2155      	movs	r1, #85	; 0x55
 80083ca:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80083ce:	f7fd f939 	bl	8005644 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80083d2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80083d6:	f7fd f905 	bl	80055e4 <LCD_WR_REG>
 80083da:	f64d 23c0 	movw	r3, #56000	; 0xdac0
 80083de:	61fb      	str	r3, [r7, #28]
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	d1fd      	bne.n	80083e2 <LCD_Init+0x245e>
 80083e6:	61fb      	str	r3, [r7, #28]
		_delay_ms(1);
		LCD_WR_REG(0x2900);
 80083e8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80083ec:	f7fd f8fa 	bl	80055e4 <LCD_WR_REG>
 80083f0:	f001 b957 	b.w	80096a2 <LCD_Init+0x371e>
	}else if(lcddev.id==0x9325)//9325
 80083f4:	4b6e      	ldr	r3, [pc, #440]	; (80085b0 <LCD_Init+0x262c>)
 80083f6:	889b      	ldrh	r3, [r3, #4]
 80083f8:	f249 3225 	movw	r2, #37669	; 0x9325
 80083fc:	4293      	cmp	r3, r2
 80083fe:	f040 80d9 	bne.w	80085b4 <LCD_Init+0x2630>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 8008402:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8008406:	20e5      	movs	r0, #229	; 0xe5
 8008408:	f7fd f91c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 800840c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008410:	2001      	movs	r0, #1
 8008412:	f7fd f917 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8008416:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800841a:	2002      	movs	r0, #2
 800841c:	f7fd f912 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 8008420:	f241 0130 	movw	r1, #4144	; 0x1030
 8008424:	2003      	movs	r0, #3
 8008426:	f7fd f90d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 800842a:	2100      	movs	r1, #0
 800842c:	2004      	movs	r0, #4
 800842e:	f7fd f909 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8008432:	f240 2102 	movw	r1, #514	; 0x202
 8008436:	2008      	movs	r0, #8
 8008438:	f7fd f904 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 800843c:	2100      	movs	r1, #0
 800843e:	2009      	movs	r0, #9
 8008440:	f7fd f900 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 8008444:	2100      	movs	r1, #0
 8008446:	200a      	movs	r0, #10
 8008448:	f7fd f8fc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 800844c:	2100      	movs	r1, #0
 800844e:	200c      	movs	r0, #12
 8008450:	f7fd f8f8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 8008454:	2100      	movs	r1, #0
 8008456:	200d      	movs	r0, #13
 8008458:	f7fd f8f4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 800845c:	2100      	movs	r1, #0
 800845e:	200f      	movs	r0, #15
 8008460:	f7fd f8f0 	bl	8005644 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 8008464:	2100      	movs	r1, #0
 8008466:	2010      	movs	r0, #16
 8008468:	f7fd f8ec 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 800846c:	2107      	movs	r1, #7
 800846e:	2011      	movs	r0, #17
 8008470:	f7fd f8e8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8008474:	2100      	movs	r1, #0
 8008476:	2012      	movs	r0, #18
 8008478:	f7fd f8e4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 800847c:	2100      	movs	r1, #0
 800847e:	2013      	movs	r0, #19
 8008480:	f7fd f8e0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 8008484:	2100      	movs	r1, #0
 8008486:	2007      	movs	r0, #7
 8008488:	f7fd f8dc 	bl	8005644 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 800848c:	f241 6190 	movw	r1, #5776	; 0x1690
 8008490:	2010      	movs	r0, #16
 8008492:	f7fd f8d7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 8008496:	f240 2127 	movw	r1, #551	; 0x227
 800849a:	2011      	movs	r0, #17
 800849c:	f7fd f8d2 	bl	8005644 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 80084a0:	219d      	movs	r1, #157	; 0x9d
 80084a2:	2012      	movs	r0, #18
 80084a4:	f7fd f8ce 	bl	8005644 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 80084a8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80084ac:	2013      	movs	r0, #19
 80084ae:	f7fd f8c9 	bl	8005644 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 80084b2:	2125      	movs	r1, #37	; 0x25
 80084b4:	2029      	movs	r0, #41	; 0x29
 80084b6:	f7fd f8c5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 80084ba:	210d      	movs	r1, #13
 80084bc:	202b      	movs	r0, #43	; 0x2b
 80084be:	f7fd f8c1 	bl	8005644 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 80084c2:	2107      	movs	r1, #7
 80084c4:	2030      	movs	r0, #48	; 0x30
 80084c6:	f7fd f8bd 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 80084ca:	f240 3103 	movw	r1, #771	; 0x303
 80084ce:	2031      	movs	r0, #49	; 0x31
 80084d0:	f7fd f8b8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 80084d4:	2103      	movs	r1, #3
 80084d6:	2032      	movs	r0, #50	; 0x32
 80084d8:	f7fd f8b4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 80084dc:	f240 2106 	movw	r1, #518	; 0x206
 80084e0:	2035      	movs	r0, #53	; 0x35
 80084e2:	f7fd f8af 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 80084e6:	2108      	movs	r1, #8
 80084e8:	2036      	movs	r0, #54	; 0x36
 80084ea:	f7fd f8ab 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 80084ee:	f240 4106 	movw	r1, #1030	; 0x406
 80084f2:	2037      	movs	r0, #55	; 0x37
 80084f4:	f7fd f8a6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 80084f8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80084fc:	2038      	movs	r0, #56	; 0x38
 80084fe:	f7fd f8a1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 8008502:	2107      	movs	r1, #7
 8008504:	2039      	movs	r0, #57	; 0x39
 8008506:	f7fd f89d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 800850a:	f240 6102 	movw	r1, #1538	; 0x602
 800850e:	203c      	movs	r0, #60	; 0x3c
 8008510:	f7fd f898 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 8008514:	2108      	movs	r1, #8
 8008516:	203d      	movs	r0, #61	; 0x3d
 8008518:	f7fd f894 	bl	8005644 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 800851c:	2100      	movs	r1, #0
 800851e:	2050      	movs	r0, #80	; 0x50
 8008520:	f7fd f890 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 8008524:	21ef      	movs	r1, #239	; 0xef
 8008526:	2051      	movs	r0, #81	; 0x51
 8008528:	f7fd f88c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 800852c:	2100      	movs	r1, #0
 800852e:	2052      	movs	r0, #82	; 0x52
 8008530:	f7fd f888 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 8008534:	f240 113f 	movw	r1, #319	; 0x13f
 8008538:	2053      	movs	r0, #83	; 0x53
 800853a:	f7fd f883 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 800853e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8008542:	2060      	movs	r0, #96	; 0x60
 8008544:	f7fd f87e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8008548:	2101      	movs	r1, #1
 800854a:	2061      	movs	r0, #97	; 0x61
 800854c:	f7fd f87a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 8008550:	2100      	movs	r1, #0
 8008552:	206a      	movs	r0, #106	; 0x6a
 8008554:	f7fd f876 	bl	8005644 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 8008558:	2100      	movs	r1, #0
 800855a:	2080      	movs	r0, #128	; 0x80
 800855c:	f7fd f872 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8008560:	2100      	movs	r1, #0
 8008562:	2081      	movs	r0, #129	; 0x81
 8008564:	f7fd f86e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 8008568:	2100      	movs	r1, #0
 800856a:	2082      	movs	r0, #130	; 0x82
 800856c:	f7fd f86a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8008570:	2100      	movs	r1, #0
 8008572:	2083      	movs	r0, #131	; 0x83
 8008574:	f7fd f866 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 8008578:	2100      	movs	r1, #0
 800857a:	2084      	movs	r0, #132	; 0x84
 800857c:	f7fd f862 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8008580:	2100      	movs	r1, #0
 8008582:	2085      	movs	r0, #133	; 0x85
 8008584:	f7fd f85e 	bl	8005644 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8008588:	2110      	movs	r1, #16
 800858a:	2090      	movs	r0, #144	; 0x90
 800858c:	f7fd f85a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8008590:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008594:	2092      	movs	r0, #146	; 0x92
 8008596:	f7fd f855 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 800859a:	f240 1133 	movw	r1, #307	; 0x133
 800859e:	2007      	movs	r0, #7
 80085a0:	f7fd f850 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 80085a4:	2122      	movs	r1, #34	; 0x22
 80085a6:	2000      	movs	r0, #0
 80085a8:	f7fd f84c 	bl	8005644 <LCD_WriteReg>
 80085ac:	f001 b879 	b.w	80096a2 <LCD_Init+0x371e>
 80085b0:	20000508 	.word	0x20000508
	}else if(lcddev.id==0x9328)//ILI9328   OK
 80085b4:	4b86      	ldr	r3, [pc, #536]	; (80087d0 <LCD_Init+0x284c>)
 80085b6:	889b      	ldrh	r3, [r3, #4]
 80085b8:	f249 3228 	movw	r2, #37672	; 0x9328
 80085bc:	4293      	cmp	r3, r2
 80085be:	f040 810b 	bne.w	80087d8 <LCD_Init+0x2854>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 80085c2:	f241 018f 	movw	r1, #4239	; 0x108f
 80085c6:	20ec      	movs	r0, #236	; 0xec
 80085c8:	f7fd f83c 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 80085cc:	f241 2134 	movw	r1, #4660	; 0x1234
 80085d0:	20ef      	movs	r0, #239	; 0xef
 80085d2:	f7fd f837 	bl	8005644 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//Р вЂ™РЎвЂ”Р вЂ™Р вЂћР вЂњРІР‚В Р вЂњРўвЂ�Р вЂњРІР‚С›Р вЂњРЎв„ўР вЂ™Р вЂ Р вЂ™РЎвЂ”Р вЂњР вЂ°Р вЂ™Р’В±Р вЂњРІР‚вЂњР вЂњРІР‚Сљ
        LCD_WriteReg(0x0001,0x0100);
 80085d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085da:	2001      	movs	r0, #1
 80085dc:	f7fd f832 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//Р вЂ™Р’ВµР вЂњР’В§Р вЂњРІР‚СњР вЂ™РўвЂ�Р вЂ™РЎвЂ”Р вЂ™Р вЂћР вЂњРІР‚В Р вЂњРўвЂ�
 80085e0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80085e4:	2002      	movs	r0, #2
 80085e6:	f7fd f82d 	bl	8005644 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D Р вЂњРІР‚СћР вЂњР вЂ¦Р вЂ™РЎвЂ“Р вЂ™Р в‚¬Р вЂ™РЎвЂўР вЂњР РЉР вЂњРІР‚СљР вЂњРЎвЂњР вЂњРІР‚СћР вЂњРЎС›Р вЂ™РЎвЂ�Р вЂњР’В¶.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 80085ea:	f241 0130 	movw	r1, #4144	; 0x1030
 80085ee:	2003      	movs	r0, #3
 80085f0:	f7fd f828 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 80085f4:	2100      	movs	r1, #0
 80085f6:	2004      	movs	r0, #4
 80085f8:	f7fd f824 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 80085fc:	f240 2102 	movw	r1, #514	; 0x202
 8008600:	2008      	movs	r0, #8
 8008602:	f7fd f81f 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 8008606:	2100      	movs	r1, #0
 8008608:	2009      	movs	r0, #9
 800860a:	f7fd f81b 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 800860e:	2100      	movs	r1, #0
 8008610:	200a      	movs	r0, #10
 8008612:	f7fd f817 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 8008616:	2101      	movs	r1, #1
 8008618:	200c      	movs	r0, #12
 800861a:	f7fd f813 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 800861e:	2100      	movs	r1, #0
 8008620:	200d      	movs	r0, #13
 8008622:	f7fd f80f 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 8008626:	2100      	movs	r1, #0
 8008628:	200f      	movs	r0, #15
 800862a:	f7fd f80b 	bl	8005644 <LCD_WriteReg>
		//Р вЂ™Р’ВµР вЂњР’В§Р вЂњРІР‚СњР вЂ™РўвЂ�Р вЂњРІР‚В¦Р вЂњР’В¤Р вЂњРІР‚вЂњР вЂњРЎвЂњ
        LCD_WriteReg(0x0010,0x0000);
 800862e:	2100      	movs	r1, #0
 8008630:	2010      	movs	r0, #16
 8008632:	f7fd f807 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 8008636:	2107      	movs	r1, #7
 8008638:	2011      	movs	r0, #17
 800863a:	f7fd f803 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 800863e:	2100      	movs	r1, #0
 8008640:	2012      	movs	r0, #18
 8008642:	f7fc ffff 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 8008646:	2100      	movs	r1, #0
 8008648:	2013      	movs	r0, #19
 800864a:	f7fc fffb 	bl	8005644 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 800864e:	2101      	movs	r1, #1
 8008650:	2007      	movs	r0, #7
 8008652:	f7fc fff7 	bl	8005644 <LCD_WriteReg>
 8008656:	4b5f      	ldr	r3, [pc, #380]	; (80087d4 <LCD_Init+0x2850>)
 8008658:	637b      	str	r3, [r7, #52]	; 0x34
 800865a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865c:	3b01      	subs	r3, #1
 800865e:	d1fd      	bne.n	800865c <LCD_Init+0x26d8>
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
       	_delay_ms(50);
        LCD_WriteReg(0x0010,0x1490);
 8008662:	f241 4190 	movw	r1, #5264	; 0x1490
 8008666:	2010      	movs	r0, #16
 8008668:	f7fc ffec 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 800866c:	f240 2127 	movw	r1, #551	; 0x227
 8008670:	2011      	movs	r0, #17
 8008672:	f7fc ffe7 	bl	8005644 <LCD_WriteReg>
 8008676:	4b57      	ldr	r3, [pc, #348]	; (80087d4 <LCD_Init+0x2850>)
 8008678:	633b      	str	r3, [r7, #48]	; 0x30
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	3b01      	subs	r3, #1
 800867e:	d1fd      	bne.n	800867c <LCD_Init+0x26f8>
 8008680:	633b      	str	r3, [r7, #48]	; 0x30
        _delay_ms(50);
        LCD_WriteReg(0x0012,0x008A);
 8008682:	218a      	movs	r1, #138	; 0x8a
 8008684:	2012      	movs	r0, #18
 8008686:	f7fc ffdd 	bl	8005644 <LCD_WriteReg>
 800868a:	4b52      	ldr	r3, [pc, #328]	; (80087d4 <LCD_Init+0x2850>)
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	3b01      	subs	r3, #1
 8008692:	d1fd      	bne.n	8008690 <LCD_Init+0x270c>
 8008694:	62fb      	str	r3, [r7, #44]	; 0x2c
        _delay_ms(50);
        LCD_WriteReg(0x0013,0x1a00);
 8008696:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800869a:	2013      	movs	r0, #19
 800869c:	f7fc ffd2 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 80086a0:	2106      	movs	r1, #6
 80086a2:	2029      	movs	r0, #41	; 0x29
 80086a4:	f7fc ffce 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 80086a8:	210d      	movs	r1, #13
 80086aa:	202b      	movs	r0, #43	; 0x2b
 80086ac:	f7fc ffca 	bl	8005644 <LCD_WriteReg>
 80086b0:	4b48      	ldr	r3, [pc, #288]	; (80087d4 <LCD_Init+0x2850>)
 80086b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	3b01      	subs	r3, #1
 80086b8:	d1fd      	bne.n	80086b6 <LCD_Init+0x2732>
 80086ba:	62bb      	str	r3, [r7, #40]	; 0x28
        _delay_ms(50);
        LCD_WriteReg(0x0020,0x0000);
 80086bc:	2100      	movs	r1, #0
 80086be:	2020      	movs	r0, #32
 80086c0:	f7fc ffc0 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 80086c4:	2100      	movs	r1, #0
 80086c6:	2021      	movs	r0, #33	; 0x21
 80086c8:	f7fc ffbc 	bl	8005644 <LCD_WriteReg>
 80086cc:	4b41      	ldr	r3, [pc, #260]	; (80087d4 <LCD_Init+0x2850>)
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	3b01      	subs	r3, #1
 80086d4:	d1fd      	bne.n	80086d2 <LCD_Init+0x274e>
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
		_delay_ms(50);
		//Р вЂњРІвЂћСћР вЂ™Р’В¤Р вЂњРІР‚С™Р вЂњР’В­Р вЂњРЎвЂ™Р вЂ™Р в‚¬Р вЂњРІР‚СћР вЂњР вЂ¦
        LCD_WriteReg(0x0030,0x0000);
 80086d8:	2100      	movs	r1, #0
 80086da:	2030      	movs	r0, #48	; 0x30
 80086dc:	f7fc ffb2 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 80086e0:	f240 6104 	movw	r1, #1540	; 0x604
 80086e4:	2031      	movs	r0, #49	; 0x31
 80086e6:	f7fc ffad 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 80086ea:	f240 3105 	movw	r1, #773	; 0x305
 80086ee:	2032      	movs	r0, #50	; 0x32
 80086f0:	f7fc ffa8 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 80086f4:	2100      	movs	r1, #0
 80086f6:	2035      	movs	r0, #53	; 0x35
 80086f8:	f7fc ffa4 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 80086fc:	f640 4109 	movw	r1, #3081	; 0xc09
 8008700:	2036      	movs	r0, #54	; 0x36
 8008702:	f7fc ff9f 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8008706:	f44f 7101 	mov.w	r1, #516	; 0x204
 800870a:	2037      	movs	r0, #55	; 0x37
 800870c:	f7fc ff9a 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 8008710:	f240 3101 	movw	r1, #769	; 0x301
 8008714:	2038      	movs	r0, #56	; 0x38
 8008716:	f7fc ff95 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 800871a:	f240 7107 	movw	r1, #1799	; 0x707
 800871e:	2039      	movs	r0, #57	; 0x39
 8008720:	f7fc ff90 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 8008724:	2100      	movs	r1, #0
 8008726:	203c      	movs	r0, #60	; 0x3c
 8008728:	f7fc ff8c 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 800872c:	f640 210a 	movw	r1, #2570	; 0xa0a
 8008730:	203d      	movs	r0, #61	; 0x3d
 8008732:	f7fc ff87 	bl	8005644 <LCD_WriteReg>
 8008736:	4b27      	ldr	r3, [pc, #156]	; (80087d4 <LCD_Init+0x2850>)
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	3b01      	subs	r3, #1
 800873e:	d1fd      	bne.n	800873c <LCD_Init+0x27b8>
 8008740:	623b      	str	r3, [r7, #32]
        _delay_ms(50);
        LCD_WriteReg(0x0050,0x0000); //Р вЂњРІР‚в„–Р вЂ™Р’В®Р вЂњРІР‚В Р вЂ™Р вЂ¦GRAMР вЂњРІР‚В Р вЂњР’В°Р вЂњР вЂ°Р вЂ™РЎпїЅР вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚вЂњР вЂњРЎвЂњ
 8008742:	2100      	movs	r1, #0
 8008744:	2050      	movs	r0, #80	; 0x50
 8008746:	f7fc ff7d 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //Р вЂњРІР‚в„–Р вЂ™Р’В®Р вЂњРІР‚В Р вЂ™Р вЂ¦GRAMР вЂњРІР‚вЂњР вЂњРІР‚СћР вЂњРІР‚вЂњР вЂ™РІвЂћвЂ“Р вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚вЂњР вЂњРЎвЂњ
 800874a:	21ef      	movs	r1, #239	; 0xef
 800874c:	2051      	movs	r0, #81	; 0x51
 800874e:	f7fc ff79 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //Р вЂ™РўвЂ�Р вЂ™РІвЂћвЂ“Р вЂњРІР‚вЂњР вЂ™Р’В±GRAMР вЂњРІР‚В Р вЂњР’В°Р вЂњР вЂ°Р вЂ™РЎпїЅР вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚вЂњР вЂњРЎвЂњ
 8008752:	2100      	movs	r1, #0
 8008754:	2052      	movs	r0, #82	; 0x52
 8008756:	f7fc ff75 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //Р вЂ™РўвЂ�Р вЂ™РІвЂћвЂ“Р вЂњРІР‚вЂњР вЂ™Р’В±GRAMР вЂњРІР‚вЂњР вЂњРІР‚СћР вЂњРІР‚вЂњР вЂ™РІвЂћвЂ“Р вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚вЂњР вЂњРЎвЂњ
 800875a:	f240 113f 	movw	r1, #319	; 0x13f
 800875e:	2053      	movs	r0, #83	; 0x53
 8008760:	f7fc ff70 	bl	8005644 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8008764:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8008768:	2060      	movs	r0, #96	; 0x60
 800876a:	f7fc ff6b 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 800876e:	2101      	movs	r1, #1
 8008770:	2061      	movs	r0, #97	; 0x61
 8008772:	f7fc ff67 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8008776:	2100      	movs	r1, #0
 8008778:	206a      	movs	r0, #106	; 0x6a
 800877a:	f7fc ff63 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 800877e:	2100      	movs	r1, #0
 8008780:	2080      	movs	r0, #128	; 0x80
 8008782:	f7fc ff5f 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8008786:	2100      	movs	r1, #0
 8008788:	2081      	movs	r0, #129	; 0x81
 800878a:	f7fc ff5b 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 800878e:	2100      	movs	r1, #0
 8008790:	2082      	movs	r0, #130	; 0x82
 8008792:	f7fc ff57 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8008796:	2100      	movs	r1, #0
 8008798:	2083      	movs	r0, #131	; 0x83
 800879a:	f7fc ff53 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 800879e:	2100      	movs	r1, #0
 80087a0:	2084      	movs	r0, #132	; 0x84
 80087a2:	f7fc ff4f 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 80087a6:	2100      	movs	r1, #0
 80087a8:	2085      	movs	r0, #133	; 0x85
 80087aa:	f7fc ff4b 	bl	8005644 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 80087ae:	2110      	movs	r1, #16
 80087b0:	2090      	movs	r0, #144	; 0x90
 80087b2:	f7fc ff47 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 80087b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80087ba:	2092      	movs	r0, #146	; 0x92
 80087bc:	f7fc ff42 	bl	8005644 <LCD_WriteReg>
        //Р вЂ™РЎвЂ”Р вЂ™Р вЂћР вЂњРІР‚В Р вЂњРўвЂ�Р вЂњР РЏР вЂњРІР‚СњР вЂњР вЂ°Р вЂ™РЎвЂўР вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњ
        LCD_WriteReg(0x0007,0x0133);
 80087c0:	f240 1133 	movw	r1, #307	; 0x133
 80087c4:	2007      	movs	r0, #7
 80087c6:	f7fc ff3d 	bl	8005644 <LCD_WriteReg>
 80087ca:	f000 bf6a 	b.w	80096a2 <LCD_Init+0x371e>
 80087ce:	bf00      	nop
 80087d0:	20000508 	.word	0x20000508
 80087d4:	002ab980 	.word	0x002ab980
	}else if(lcddev.id==0x9320)//Р вЂ™Р вЂ Р вЂњРЎС›Р вЂњР вЂ°Р вЂњРІР‚СњOK.
 80087d8:	4bd7      	ldr	r3, [pc, #860]	; (8008b38 <LCD_Init+0x2bb4>)
 80087da:	889b      	ldrh	r3, [r3, #4]
 80087dc:	f249 3220 	movw	r2, #37664	; 0x9320
 80087e0:	4293      	cmp	r3, r2
 80087e2:	f040 80b3 	bne.w	800894c <LCD_Init+0x29c8>
	{
		LCD_WriteReg(0x00,0x0000);
 80087e6:	2100      	movs	r1, #0
 80087e8:	2000      	movs	r0, #0
 80087ea:	f7fc ff2b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 80087ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80087f2:	2001      	movs	r0, #1
 80087f4:	f7fc ff26 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 80087f8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80087fc:	2002      	movs	r0, #2
 80087fe:	f7fc ff21 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 8008802:	f241 0130 	movw	r1, #4144	; 0x1030
 8008806:	2003      	movs	r0, #3
 8008808:	f7fc ff1c 	bl	8005644 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 800880c:	2100      	movs	r1, #0
 800880e:	2004      	movs	r0, #4
 8008810:	f7fc ff18 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 8008814:	f240 2102 	movw	r1, #514	; 0x202
 8008818:	2008      	movs	r0, #8
 800881a:	f7fc ff13 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 800881e:	2100      	movs	r1, #0
 8008820:	2009      	movs	r0, #9
 8008822:	f7fc ff0f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 8008826:	2100      	movs	r1, #0
 8008828:	200a      	movs	r0, #10
 800882a:	f7fc ff0b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 800882e:	2101      	movs	r1, #1
 8008830:	200c      	movs	r0, #12
 8008832:	f7fc ff07 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 8008836:	2100      	movs	r1, #0
 8008838:	200d      	movs	r0, #13
 800883a:	f7fc ff03 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 800883e:	2100      	movs	r1, #0
 8008840:	200f      	movs	r0, #15
 8008842:	f7fc feff 	bl	8005644 <LCD_WriteReg>
 8008846:	4bbd      	ldr	r3, [pc, #756]	; (8008b3c <LCD_Init+0x2bb8>)
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800884a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884c:	3b01      	subs	r3, #1
 800884e:	d1fd      	bne.n	800884c <LCD_Init+0x28c8>
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
		_delay_ms(50);
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 8008852:	f240 1101 	movw	r1, #257	; 0x101
 8008856:	2007      	movs	r0, #7
 8008858:	f7fc fef4 	bl	8005644 <LCD_WriteReg>
 800885c:	4bb7      	ldr	r3, [pc, #732]	; (8008b3c <LCD_Init+0x2bb8>)
 800885e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	3b01      	subs	r3, #1
 8008864:	d1fd      	bne.n	8008862 <LCD_Init+0x28de>
 8008866:	63bb      	str	r3, [r7, #56]	; 0x38
		_delay_ms(50);
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 8008868:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800886c:	2010      	movs	r0, #16
 800886e:	f7fc fee9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8008872:	2107      	movs	r1, #7
 8008874:	2011      	movs	r0, #17
 8008876:	f7fc fee5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 800887a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800887e:	2012      	movs	r0, #18
 8008880:	f7fc fee0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8008884:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8008888:	2013      	movs	r0, #19
 800888a:	f7fc fedb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 800888e:	2100      	movs	r1, #0
 8008890:	2029      	movs	r0, #41	; 0x29
 8008892:	f7fc fed7 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8008896:	f244 0110 	movw	r1, #16400	; 0x4010
 800889a:	202b      	movs	r0, #43	; 0x2b
 800889c:	f7fc fed2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 80088a0:	2100      	movs	r1, #0
 80088a2:	2050      	movs	r0, #80	; 0x50
 80088a4:	f7fc fece 	bl	8005644 <LCD_WriteReg>
		//Р вЂњРІР‚в„–Р вЂ™Р’В®Р вЂњРІР‚В Р вЂ™Р вЂ¦GRAMР вЂњРІР‚вЂњР вЂњРІР‚СћР вЂњРІР‚вЂњР вЂ™РІвЂћвЂ“Р вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚вЂњР вЂњРЎвЂњSet X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 80088a8:	21ef      	movs	r1, #239	; 0xef
 80088aa:	2051      	movs	r0, #81	; 0x51
 80088ac:	f7fc feca 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 80088b0:	2100      	movs	r1, #0
 80088b2:	2052      	movs	r0, #82	; 0x52
 80088b4:	f7fc fec6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 80088b8:	f240 113f 	movw	r1, #319	; 0x13f
 80088bc:	2053      	movs	r0, #83	; 0x53
 80088be:	f7fc fec1 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 80088c2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80088c6:	2060      	movs	r0, #96	; 0x60
 80088c8:	f7fc febc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 80088cc:	2101      	movs	r1, #1
 80088ce:	2061      	movs	r0, #97	; 0x61
 80088d0:	f7fc feb8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 80088d4:	2100      	movs	r1, #0
 80088d6:	206a      	movs	r0, #106	; 0x6a
 80088d8:	f7fc feb4 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 80088dc:	2100      	movs	r1, #0
 80088de:	2080      	movs	r0, #128	; 0x80
 80088e0:	f7fc feb0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 80088e4:	2100      	movs	r1, #0
 80088e6:	2081      	movs	r0, #129	; 0x81
 80088e8:	f7fc feac 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 80088ec:	2100      	movs	r1, #0
 80088ee:	2082      	movs	r0, #130	; 0x82
 80088f0:	f7fc fea8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 80088f4:	2100      	movs	r1, #0
 80088f6:	2083      	movs	r0, #131	; 0x83
 80088f8:	f7fc fea4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 80088fc:	2100      	movs	r1, #0
 80088fe:	2084      	movs	r0, #132	; 0x84
 8008900:	f7fc fea0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8008904:	2100      	movs	r1, #0
 8008906:	2085      	movs	r0, #133	; 0x85
 8008908:	f7fc fe9c 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 800890c:	2110      	movs	r1, #16
 800890e:	2090      	movs	r0, #144	; 0x90
 8008910:	f7fc fe98 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8008914:	2100      	movs	r1, #0
 8008916:	2092      	movs	r0, #146	; 0x92
 8008918:	f7fc fe94 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 800891c:	2101      	movs	r1, #1
 800891e:	2093      	movs	r0, #147	; 0x93
 8008920:	f7fc fe90 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8008924:	f44f 7188 	mov.w	r1, #272	; 0x110
 8008928:	2095      	movs	r0, #149	; 0x95
 800892a:	f7fc fe8b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 800892e:	2100      	movs	r1, #0
 8008930:	2097      	movs	r0, #151	; 0x97
 8008932:	f7fc fe87 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 8008936:	2100      	movs	r1, #0
 8008938:	2098      	movs	r0, #152	; 0x98
 800893a:	f7fc fe83 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 800893e:	f240 1173 	movw	r1, #371	; 0x173
 8008942:	2007      	movs	r0, #7
 8008944:	f7fc fe7e 	bl	8005644 <LCD_WriteReg>
 8008948:	f000 beab 	b.w	80096a2 <LCD_Init+0x371e>
	}else if(lcddev.id==0X9331)//OK |/|/|
 800894c:	4b7a      	ldr	r3, [pc, #488]	; (8008b38 <LCD_Init+0x2bb4>)
 800894e:	889b      	ldrh	r3, [r3, #4]
 8008950:	f249 3231 	movw	r2, #37681	; 0x9331
 8008954:	4293      	cmp	r3, r2
 8008956:	f040 80f5 	bne.w	8008b44 <LCD_Init+0x2bc0>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 800895a:	f241 0114 	movw	r1, #4116	; 0x1014
 800895e:	20e7      	movs	r0, #231	; 0xe7
 8008960:	f7fc fe70 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8008964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008968:	2001      	movs	r0, #1
 800896a:	f7fc fe6b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 800896e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008972:	2002      	movs	r0, #2
 8008974:	f7fc fe66 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8008978:	f241 0138 	movw	r1, #4152	; 0x1038
 800897c:	2003      	movs	r0, #3
 800897e:	f7fc fe61 	bl	8005644 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8008982:	f240 2102 	movw	r1, #514	; 0x202
 8008986:	2008      	movs	r0, #8
 8008988:	f7fc fe5c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800898c:	2100      	movs	r1, #0
 800898e:	2009      	movs	r0, #9
 8008990:	f7fc fe58 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8008994:	2100      	movs	r1, #0
 8008996:	200a      	movs	r0, #10
 8008998:	f7fc fe54 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800899c:	2100      	movs	r1, #0
 800899e:	200c      	movs	r0, #12
 80089a0:	f7fc fe50 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80089a4:	2100      	movs	r1, #0
 80089a6:	200d      	movs	r0, #13
 80089a8:	f7fc fe4c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80089ac:	2100      	movs	r1, #0
 80089ae:	200f      	movs	r0, #15
 80089b0:	f7fc fe48 	bl	8005644 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80089b4:	2100      	movs	r1, #0
 80089b6:	2010      	movs	r0, #16
 80089b8:	f7fc fe44 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80089bc:	2107      	movs	r1, #7
 80089be:	2011      	movs	r0, #17
 80089c0:	f7fc fe40 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80089c4:	2100      	movs	r1, #0
 80089c6:	2012      	movs	r0, #18
 80089c8:	f7fc fe3c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80089cc:	2100      	movs	r1, #0
 80089ce:	2013      	movs	r0, #19
 80089d0:	f7fc fe38 	bl	8005644 <LCD_WriteReg>
 80089d4:	4b5a      	ldr	r3, [pc, #360]	; (8008b40 <LCD_Init+0x2bbc>)
 80089d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089da:	3b01      	subs	r3, #1
 80089dc:	d1fd      	bne.n	80089da <LCD_Init+0x2a56>
 80089de:	64fb      	str	r3, [r7, #76]	; 0x4c
		_delay_ms(200); // Dis-charge capacitor power voltage
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80089e0:	f241 6190 	movw	r1, #5776	; 0x1690
 80089e4:	2010      	movs	r0, #16
 80089e6:	f7fc fe2d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80089ea:	f240 2127 	movw	r1, #551	; 0x227
 80089ee:	2011      	movs	r0, #17
 80089f0:	f7fc fe28 	bl	8005644 <LCD_WriteReg>
 80089f4:	4b51      	ldr	r3, [pc, #324]	; (8008b3c <LCD_Init+0x2bb8>)
 80089f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80089f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089fa:	3b01      	subs	r3, #1
 80089fc:	d1fd      	bne.n	80089fa <LCD_Init+0x2a76>
 80089fe:	64bb      	str	r3, [r7, #72]	; 0x48
		_delay_ms(50); // Delay 50ms
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8008a00:	210c      	movs	r1, #12
 8008a02:	2012      	movs	r0, #18
 8008a04:	f7fc fe1e 	bl	8005644 <LCD_WriteReg>
 8008a08:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <LCD_Init+0x2bb8>)
 8008a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	d1fd      	bne.n	8008a0e <LCD_Init+0x2a8a>
 8008a12:	647b      	str	r3, [r7, #68]	; 0x44
		_delay_ms(50); // Delay 50ms
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8008a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a18:	2013      	movs	r0, #19
 8008a1a:	f7fc fe13 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8008a1e:	2111      	movs	r1, #17
 8008a20:	2029      	movs	r0, #41	; 0x29
 8008a22:	f7fc fe0f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8008a26:	210b      	movs	r1, #11
 8008a28:	202b      	movs	r0, #43	; 0x2b
 8008a2a:	f7fc fe0b 	bl	8005644 <LCD_WriteReg>
 8008a2e:	4b43      	ldr	r3, [pc, #268]	; (8008b3c <LCD_Init+0x2bb8>)
 8008a30:	643b      	str	r3, [r7, #64]	; 0x40
 8008a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a34:	3b01      	subs	r3, #1
 8008a36:	d1fd      	bne.n	8008a34 <LCD_Init+0x2ab0>
 8008a38:	643b      	str	r3, [r7, #64]	; 0x40
		_delay_ms(50); // Delay 50ms
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	2020      	movs	r0, #32
 8008a3e:	f7fc fe01 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8008a42:	f240 113f 	movw	r1, #319	; 0x13f
 8008a46:	2021      	movs	r0, #33	; 0x21
 8008a48:	f7fc fdfc 	bl	8005644 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	2030      	movs	r0, #48	; 0x30
 8008a50:	f7fc fdf8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8008a54:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008a58:	2031      	movs	r0, #49	; 0x31
 8008a5a:	f7fc fdf3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8008a5e:	2100      	movs	r1, #0
 8008a60:	2032      	movs	r0, #50	; 0x32
 8008a62:	f7fc fdef 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8008a66:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008a6a:	2035      	movs	r0, #53	; 0x35
 8008a6c:	f7fc fdea 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8008a70:	f241 610a 	movw	r1, #5642	; 0x160a
 8008a74:	2036      	movs	r0, #54	; 0x36
 8008a76:	f7fc fde5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8008a7a:	f240 7107 	movw	r1, #1799	; 0x707
 8008a7e:	2037      	movs	r0, #55	; 0x37
 8008a80:	f7fc fde0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8008a84:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008a88:	2038      	movs	r0, #56	; 0x38
 8008a8a:	f7fc fddb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8008a8e:	f240 7107 	movw	r1, #1799	; 0x707
 8008a92:	2039      	movs	r0, #57	; 0x39
 8008a94:	f7fc fdd6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8008a98:	f240 4102 	movw	r1, #1026	; 0x402
 8008a9c:	203c      	movs	r0, #60	; 0x3c
 8008a9e:	f7fc fdd1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8008aa2:	f640 410f 	movw	r1, #3087	; 0xc0f
 8008aa6:	203d      	movs	r0, #61	; 0x3d
 8008aa8:	f7fc fdcc 	bl	8005644 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8008aac:	2100      	movs	r1, #0
 8008aae:	2050      	movs	r0, #80	; 0x50
 8008ab0:	f7fc fdc8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8008ab4:	21ef      	movs	r1, #239	; 0xef
 8008ab6:	2051      	movs	r0, #81	; 0x51
 8008ab8:	f7fc fdc4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8008abc:	2100      	movs	r1, #0
 8008abe:	2052      	movs	r0, #82	; 0x52
 8008ac0:	f7fc fdc0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8008ac4:	f240 113f 	movw	r1, #319	; 0x13f
 8008ac8:	2053      	movs	r0, #83	; 0x53
 8008aca:	f7fc fdbb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8008ace:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8008ad2:	2060      	movs	r0, #96	; 0x60
 8008ad4:	f7fc fdb6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8008ad8:	2101      	movs	r1, #1
 8008ada:	2061      	movs	r0, #97	; 0x61
 8008adc:	f7fc fdb2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	206a      	movs	r0, #106	; 0x6a
 8008ae4:	f7fc fdae 	bl	8005644 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8008ae8:	2100      	movs	r1, #0
 8008aea:	2080      	movs	r0, #128	; 0x80
 8008aec:	f7fc fdaa 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8008af0:	2100      	movs	r1, #0
 8008af2:	2081      	movs	r0, #129	; 0x81
 8008af4:	f7fc fda6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8008af8:	2100      	movs	r1, #0
 8008afa:	2082      	movs	r0, #130	; 0x82
 8008afc:	f7fc fda2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8008b00:	2100      	movs	r1, #0
 8008b02:	2083      	movs	r0, #131	; 0x83
 8008b04:	f7fc fd9e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8008b08:	2100      	movs	r1, #0
 8008b0a:	2084      	movs	r0, #132	; 0x84
 8008b0c:	f7fc fd9a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8008b10:	2100      	movs	r1, #0
 8008b12:	2085      	movs	r0, #133	; 0x85
 8008b14:	f7fc fd96 	bl	8005644 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8008b18:	2110      	movs	r1, #16
 8008b1a:	2090      	movs	r0, #144	; 0x90
 8008b1c:	f7fc fd92 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8008b20:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008b24:	2092      	movs	r0, #146	; 0x92
 8008b26:	f7fc fd8d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8008b2a:	f240 1133 	movw	r1, #307	; 0x133
 8008b2e:	2007      	movs	r0, #7
 8008b30:	f7fc fd88 	bl	8005644 <LCD_WriteReg>
 8008b34:	f000 bdb5 	b.w	80096a2 <LCD_Init+0x371e>
 8008b38:	20000508 	.word	0x20000508
 8008b3c:	002ab980 	.word	0x002ab980
 8008b40:	00aae600 	.word	0x00aae600
	}else if(lcddev.id==0x5408)
 8008b44:	4b57      	ldr	r3, [pc, #348]	; (8008ca4 <LCD_Init+0x2d20>)
 8008b46:	889b      	ldrh	r3, [r3, #4]
 8008b48:	f245 4208 	movw	r2, #21512	; 0x5408
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	f040 80af 	bne.w	8008cb0 <LCD_Init+0x2d2c>
	{
		LCD_WriteReg(0x01,0x0100);
 8008b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b56:	2001      	movs	r0, #1
 8008b58:	f7fc fd74 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 8008b5c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8008b60:	2002      	movs	r0, #2
 8008b62:	f7fc fd6f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry ModeР вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњ
 8008b66:	f241 0130 	movw	r1, #4144	; 0x1030
 8008b6a:	2003      	movs	r0, #3
 8008b6c:	f7fc fd6a 	bl	8005644 <LCD_WriteReg>
		//Р вЂњРІР‚вЂњР вЂ™РЎвЂ�Р вЂњРІР‚СћР вЂњР’В«Р вЂ™РўвЂ�Р вЂњРІР‚СљР вЂњРІР‚вЂќР вЂњРЎвЂ“Р вЂњРІР‚вЂњР вЂњР С“Р вЂњРІР‚СљР вЂњРІР‚в„ўР вЂњРІР‚вЂќР вЂњРІР‚СњР вЂњРІР‚В°Р вЂњР РЏР вЂ™Р’В¶Р вЂњРЎвЂ�Р вЂњР РЏР вЂњРІР‚С™Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂњРІР‚вЂќР вЂњРІР‚СњР вЂ™Р’В¶Р вЂ™Р вЂЎР вЂњРІР‚СњР вЂњР’В¶Р вЂњРІР‚С›Р вЂ™Р в‚¬Р вЂњР вЂ°Р вЂ™Р вЂ¦
		//Normal Mode(Window Mode disable)
		//RGBР вЂ™РЎвЂ�Р вЂњР’В±Р вЂњР вЂ°Р вЂ™Р вЂ¦
		//16Р вЂњР вЂ№Р вЂ™Р’В»Р вЂњР вЂ°Р вЂњР вЂ¦Р вЂ™РЎвЂўР вЂњРЎСљ2Р вЂ™РўвЂ�Р вЂњР вЂ№Р вЂ™РўвЂ�Р вЂ™Р’В«Р вЂњР вЂ°Р вЂњР’В¤Р вЂ™Р’ВµР вЂњРІР‚С›8Р вЂњРІР‚вЂќР вЂњРЎС™Р вЂњР РЏР вЂњРЎСџР вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњ
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8008b70:	2100      	movs	r1, #0
 8008b72:	2004      	movs	r0, #4
 8008b74:	f7fc fd66 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 8008b78:	f240 2107 	movw	r1, #519	; 0x207
 8008b7c:	2008      	movs	r0, #8
 8008b7e:	f7fc fd61 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8008b82:	2100      	movs	r1, #0
 8008b84:	2009      	movs	r0, #9
 8008b86:	f7fc fd5d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	200a      	movs	r0, #10
 8008b8e:	f7fc fd59 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8008b92:	2100      	movs	r1, #0
 8008b94:	200c      	movs	r0, #12
 8008b96:	f7fc fd55 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	200d      	movs	r0, #13
 8008b9e:	f7fc fd51 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	200f      	movs	r0, #15
 8008ba6:	f7fc fd4d 	bl	8005644 <LCD_WriteReg>
 8008baa:	4b3f      	ldr	r3, [pc, #252]	; (8008ca8 <LCD_Init+0x2d24>)
 8008bac:	657b      	str	r3, [r7, #84]	; 0x54
 8008bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	d1fd      	bne.n	8008bb0 <LCD_Init+0x2c2c>
 8008bb4:	657b      	str	r3, [r7, #84]	; 0x54
 		_delay_ms(20);
		//TFT Р вЂњРІР‚в„ўР вЂ™РЎвЂќР вЂ™РЎвЂўР вЂ™Р’В§Р вЂ™Р вЂ Р вЂњР вЂ°Р вЂњРІР‚В°Р вЂ™Р’В«Р вЂњР РЉР вЂ™РЎпїЅР вЂњР РЏР вЂњР’В±Р вЂњР РЏР вЂњРІР‚СњР вЂњР вЂ°Р вЂ™РЎвЂўР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂ™Р’В·Р вЂ™Р Рѓ14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8008bb6:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8008bba:	2010      	movs	r0, #16
 8008bbc:	f7fc fd42 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	2011      	movs	r0, #17
 8008bc4:	f7fc fd3e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8008bc8:	2101      	movs	r1, #1
 8008bca:	2017      	movs	r0, #23
 8008bcc:	f7fc fd3a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 8008bd0:	f44f 719c 	mov.w	r1, #312	; 0x138
 8008bd4:	2012      	movs	r0, #18
 8008bd6:	f7fc fd35 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8008bda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008bde:	2013      	movs	r0, #19
 8008be0:	f7fc fd30 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 8008be4:	2109      	movs	r1, #9
 8008be6:	2029      	movs	r0, #41	; 0x29
 8008be8:	f7fc fd2c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8008bec:	2109      	movs	r1, #9
 8008bee:	202a      	movs	r0, #42	; 0x2a
 8008bf0:	f7fc fd28 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	20a4      	movs	r0, #164	; 0xa4
 8008bf8:	f7fc fd24 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂ™Р вЂ Р вЂњРІвЂћСћР вЂњРІР‚вЂќР вЂњР’В·Р вЂ™РўвЂ�Р вЂ™Р’В°Р вЂ™РЎвЂ”Р вЂњРЎв„ўР вЂ™Р’ВµР вЂњРІР‚С›XР вЂњРІР‚вЂњР вЂњР Р‹Р вЂ™РЎвЂ”Р вЂ™Р вЂћР вЂњР вЂ°Р вЂ™РЎпїЅР вЂњР С“Р вЂњРЎвЂ™
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	2050      	movs	r0, #80	; 0x50
 8008c00:	f7fc fd20 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂ™Р вЂ Р вЂњРІвЂћСћР вЂњРІР‚вЂќР вЂњР’В·Р вЂ™РўвЂ�Р вЂ™Р’В°Р вЂ™РЎвЂ”Р вЂњРЎв„ўР вЂ™Р’ВµР вЂњРІР‚С›XР вЂњРІР‚вЂњР вЂњР Р‹Р вЂ™Р вЂ¦Р вЂњР Р‹Р вЂњР вЂ°Р вЂњРЎвЂ�Р вЂњР С“Р вЂњРЎвЂ™
 8008c04:	21ef      	movs	r1, #239	; 0xef
 8008c06:	2051      	movs	r0, #81	; 0x51
 8008c08:	f7fc fd1c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂ™Р вЂ Р вЂњРІвЂћСћР вЂњРІР‚вЂќР вЂњР’В·Р вЂ™РўвЂ�Р вЂ™Р’В°Р вЂ™РЎвЂ”Р вЂњРЎв„ўР вЂ™Р’ВµР вЂњРІР‚С›YР вЂњРІР‚вЂњР вЂњР Р‹Р вЂ™РЎвЂ”Р вЂ™Р вЂћР вЂњР вЂ°Р вЂ™РЎпїЅР вЂњРЎвЂ™Р вЂњРЎвЂ™
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	2052      	movs	r0, #82	; 0x52
 8008c10:	f7fc fd18 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂ™Р вЂ Р вЂњРІвЂћСћР вЂњРІР‚вЂќР вЂњР’В·Р вЂ™РўвЂ�Р вЂ™Р’В°Р вЂ™РЎвЂ”Р вЂњРЎв„ўР вЂ™Р’ВµР вЂњРІР‚С›YР вЂњРІР‚вЂњР вЂњР Р‹Р вЂ™Р вЂ¦Р вЂњР Р‹Р вЂњР вЂ°Р вЂњРЎвЂ�Р вЂњРЎвЂ™Р вЂњРЎвЂ™
 8008c14:	f240 113f 	movw	r1, #319	; 0x13f
 8008c18:	2053      	movs	r0, #83	; 0x53
 8008c1a:	f7fc fd13 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8008c1e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8008c22:	2060      	movs	r0, #96	; 0x60
 8008c24:	f7fc fd0e 	bl	8005644 <LCD_WriteReg>
		//Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂњРІР‚В Р вЂњР С“Р вЂњРІР‚С›Р вЂ™Р’В»Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂ™Р’ВµР вЂњР в‚¬Р вЂњР вЂ°Р вЂњР вЂ¦Р вЂњРІР‚в„ўР вЂњРІР‚СњР вЂ™РЎпїЅР вЂ™Р’В°Р вЂњРІР‚В°Р вЂ™Р РѓР вЂњРЎвЂњР вЂњР РѓР вЂ™Р’ВµР вЂњРІР‚С›Р вЂњРІР‚В Р вЂњР’В°Р вЂњР вЂ°Р вЂ™РЎпїЅР вЂњРЎвЂ™Р вЂњРЎвЂ™
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 8008c28:	2101      	movs	r1, #1
 8008c2a:	2061      	movs	r0, #97	; 0x61
 8008c2c:	f7fc fd0a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 8008c30:	2100      	movs	r1, #0
 8008c32:	206a      	movs	r0, #106	; 0x6a
 8008c34:	f7fc fd06 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position Р вЂ™Р РѓC Partial Display 1
 8008c38:	2100      	movs	r1, #0
 8008c3a:	2080      	movs	r0, #128	; 0x80
 8008c3c:	f7fc fd02 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start Р вЂ™Р РѓC Partial Display 1
 8008c40:	2100      	movs	r1, #0
 8008c42:	2081      	movs	r0, #129	; 0x81
 8008c44:	f7fc fcfe 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 8008c48:	2100      	movs	r1, #0
 8008c4a:	2082      	movs	r0, #130	; 0x82
 8008c4c:	f7fc fcfa 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position Р вЂ™Р РѓC Partial Display 2
 8008c50:	2100      	movs	r1, #0
 8008c52:	2083      	movs	r0, #131	; 0x83
 8008c54:	f7fc fcf6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start Р вЂ™Р РѓC Partial Display 2
 8008c58:	2100      	movs	r1, #0
 8008c5a:	2084      	movs	r0, #132	; 0x84
 8008c5c:	f7fc fcf2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End Р вЂ™Р РѓC Partail Display2
 8008c60:	2100      	movs	r1, #0
 8008c62:	2085      	movs	r0, #133	; 0x85
 8008c64:	f7fc fcee 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 8008c68:	2113      	movs	r1, #19
 8008c6a:	2090      	movs	r0, #144	; 0x90
 8008c6c:	f7fc fcea 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 8008c70:	2100      	movs	r1, #0
 8008c72:	2092      	movs	r0, #146	; 0x92
 8008c74:	f7fc fce6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8008c78:	2103      	movs	r1, #3
 8008c7a:	2093      	movs	r0, #147	; 0x93
 8008c7c:	f7fc fce2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 8008c80:	f44f 7188 	mov.w	r1, #272	; 0x110
 8008c84:	2095      	movs	r0, #149	; 0x95
 8008c86:	f7fc fcdd 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 8008c8a:	f240 1173 	movw	r1, #371	; 0x173
 8008c8e:	2007      	movs	r0, #7
 8008c90:	f7fc fcd8 	bl	8005644 <LCD_WriteReg>
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <LCD_Init+0x2d28>)
 8008c96:	653b      	str	r3, [r7, #80]	; 0x50
 8008c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	d1fd      	bne.n	8008c9a <LCD_Init+0x2d16>
 8008c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008ca0:	f000 bcff 	b.w	80096a2 <LCD_Init+0x371e>
 8008ca4:	20000508 	.word	0x20000508
 8008ca8:	00111700 	.word	0x00111700
 8008cac:	002ab980 	.word	0x002ab980
		_delay_ms(50);
	}
	else if(lcddev.id==0x1505)//OK
 8008cb0:	4b95      	ldr	r3, [pc, #596]	; (8008f08 <LCD_Init+0x2f84>)
 8008cb2:	889b      	ldrh	r3, [r3, #4]
 8008cb4:	f241 5205 	movw	r2, #5381	; 0x1505
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	f040 812b 	bne.w	8008f14 <LCD_Init+0x2f90>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	2007      	movs	r0, #7
 8008cc2:	f7fc fcbf 	bl	8005644 <LCD_WriteReg>
 8008cc6:	4b91      	ldr	r3, [pc, #580]	; (8008f0c <LCD_Init+0x2f88>)
 8008cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	d1fd      	bne.n	8008ccc <LCD_Init+0x2d48>
 8008cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
        _delay_ms(50);
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8008cd2:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008cd6:	2012      	movs	r0, #18
 8008cd8:	f7fc fcb4 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 8008cdc:	2101      	movs	r1, #1
 8008cde:	20a4      	movs	r0, #164	; 0xa4
 8008ce0:	f7fc fcb0 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8008ce4:	210f      	movs	r1, #15
 8008ce6:	2008      	movs	r0, #8
 8008ce8:	f7fc fcac 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 8008cec:	2108      	movs	r1, #8
 8008cee:	200a      	movs	r0, #10
 8008cf0:	f7fc fca8 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8008cf4:	2108      	movs	r1, #8
 8008cf6:	200d      	movs	r0, #13
 8008cf8:	f7fc fca4 	bl	8005644 <LCD_WriteReg>
  		//Р вЂњРІвЂћСћР вЂ™Р’В¤Р вЂњРІР‚С™Р вЂњР’В­Р вЂњРЎвЂ™Р вЂ™Р в‚¬Р вЂњРІР‚СћР вЂњР вЂ¦
        LCD_WriteReg(0x0030,0x0707);
 8008cfc:	f240 7107 	movw	r1, #1799	; 0x707
 8008d00:	2030      	movs	r0, #48	; 0x30
 8008d02:	f7fc fc9f 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8008d06:	2107      	movs	r1, #7
 8008d08:	2031      	movs	r0, #49	; 0x31
 8008d0a:	f7fc fc9b 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8008d0e:	f240 6103 	movw	r1, #1539	; 0x603
 8008d12:	2032      	movs	r0, #50	; 0x32
 8008d14:	f7fc fc96 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 8008d18:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8008d1c:	2033      	movs	r0, #51	; 0x33
 8008d1e:	f7fc fc91 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8008d22:	f240 2102 	movw	r1, #514	; 0x202
 8008d26:	2034      	movs	r0, #52	; 0x34
 8008d28:	f7fc fc8c 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	2035      	movs	r0, #53	; 0x35
 8008d30:	f7fc fc88 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8008d34:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8008d38:	2036      	movs	r0, #54	; 0x36
 8008d3a:	f7fc fc83 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 8008d3e:	f240 7107 	movw	r1, #1799	; 0x707
 8008d42:	2037      	movs	r0, #55	; 0x37
 8008d44:	f7fc fc7e 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 8008d48:	2100      	movs	r1, #0
 8008d4a:	2038      	movs	r0, #56	; 0x38
 8008d4c:	f7fc fc7a 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 8008d50:	2100      	movs	r1, #0
 8008d52:	2039      	movs	r0, #57	; 0x39
 8008d54:	f7fc fc76 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 8008d58:	f240 7107 	movw	r1, #1799	; 0x707
 8008d5c:	203a      	movs	r0, #58	; 0x3a
 8008d5e:	f7fc fc71 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 8008d62:	2100      	movs	r1, #0
 8008d64:	203b      	movs	r0, #59	; 0x3b
 8008d66:	f7fc fc6d 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 8008d6a:	2107      	movs	r1, #7
 8008d6c:	203c      	movs	r0, #60	; 0x3c
 8008d6e:	f7fc fc69 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 8008d72:	2100      	movs	r1, #0
 8008d74:	203d      	movs	r0, #61	; 0x3d
 8008d76:	f7fc fc65 	bl	8005644 <LCD_WriteReg>
 8008d7a:	4b64      	ldr	r3, [pc, #400]	; (8008f0c <LCD_Init+0x2f88>)
 8008d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d80:	3b01      	subs	r3, #1
 8008d82:	d1fd      	bne.n	8008d80 <LCD_Init+0x2dfc>
 8008d84:	66bb      	str	r3, [r7, #104]	; 0x68
        _delay_ms(50);
        LCD_WriteReg(0x0007,0x0001);
 8008d86:	2101      	movs	r1, #1
 8008d88:	2007      	movs	r0, #7
 8008d8a:	f7fc fc5b 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//Р вЂ™РЎвЂ”Р вЂ™Р вЂћР вЂњРІР‚В Р вЂњРўвЂ�Р вЂ™Р’ВµР вЂњР’В§Р вЂњРІР‚СњР вЂ™РўвЂ�
 8008d8e:	2101      	movs	r1, #1
 8008d90:	2017      	movs	r0, #23
 8008d92:	f7fc fc57 	bl	8005644 <LCD_WriteReg>
 8008d96:	4b5d      	ldr	r3, [pc, #372]	; (8008f0c <LCD_Init+0x2f88>)
 8008d98:	667b      	str	r3, [r7, #100]	; 0x64
 8008d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	d1fd      	bne.n	8008d9c <LCD_Init+0x2e18>
 8008da0:	667b      	str	r3, [r7, #100]	; 0x64
        _delay_ms(50);
  		//Р вЂ™Р’ВµР вЂњР’В§Р вЂњРІР‚СњР вЂ™РўвЂ�Р вЂњРІР‚В¦Р вЂњР’В¤Р вЂњРІР‚вЂњР вЂњРЎвЂњ
        LCD_WriteReg(0x0010,0x17A0);
 8008da2:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8008da6:	2010      	movs	r0, #16
 8008da8:	f7fc fc4c 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8008dac:	f240 2117 	movw	r1, #535	; 0x217
 8008db0:	2011      	movs	r0, #17
 8008db2:	f7fc fc47 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8008db6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8008dba:	2012      	movs	r0, #18
 8008dbc:	f7fc fc42 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8008dc0:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8008dc4:	2013      	movs	r0, #19
 8008dc6:	f7fc fc3d 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 8008dca:	2100      	movs	r1, #0
 8008dcc:	202a      	movs	r0, #42	; 0x2a
 8008dce:	f7fc fc39 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8008dd2:	210a      	movs	r1, #10
 8008dd4:	2029      	movs	r0, #41	; 0x29
 8008dd6:	f7fc fc35 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 8008dda:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8008dde:	2012      	movs	r0, #18
 8008de0:	f7fc fc30 	bl	8005644 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 8008de4:	2100      	movs	r1, #0
 8008de6:	2050      	movs	r0, #80	; 0x50
 8008de8:	f7fc fc2c 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 8008dec:	21ef      	movs	r1, #239	; 0xef
 8008dee:	2051      	movs	r0, #81	; 0x51
 8008df0:	f7fc fc28 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 8008df4:	2100      	movs	r1, #0
 8008df6:	2052      	movs	r0, #82	; 0x52
 8008df8:	f7fc fc24 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 8008dfc:	f240 113f 	movw	r1, #319	; 0x13f
 8008e00:	2053      	movs	r0, #83	; 0x53
 8008e02:	f7fc fc1f 	bl	8005644 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 8008e06:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8008e0a:	2060      	movs	r0, #96	; 0x60
 8008e0c:	f7fc fc1a 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8008e10:	2101      	movs	r1, #1
 8008e12:	2061      	movs	r0, #97	; 0x61
 8008e14:	f7fc fc16 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 8008e18:	2100      	movs	r1, #0
 8008e1a:	206a      	movs	r0, #106	; 0x6a
 8008e1c:	f7fc fc12 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8008e20:	2100      	movs	r1, #0
 8008e22:	2080      	movs	r0, #128	; 0x80
 8008e24:	f7fc fc0e 	bl	8005644 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 8008e28:	2100      	movs	r1, #0
 8008e2a:	2081      	movs	r0, #129	; 0x81
 8008e2c:	f7fc fc0a 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8008e30:	2100      	movs	r1, #0
 8008e32:	2082      	movs	r0, #130	; 0x82
 8008e34:	f7fc fc06 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8008e38:	2100      	movs	r1, #0
 8008e3a:	2083      	movs	r0, #131	; 0x83
 8008e3c:	f7fc fc02 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8008e40:	2100      	movs	r1, #0
 8008e42:	2084      	movs	r0, #132	; 0x84
 8008e44:	f7fc fbfe 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8008e48:	2100      	movs	r1, #0
 8008e4a:	2085      	movs	r0, #133	; 0x85
 8008e4c:	f7fc fbfa 	bl	8005644 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8008e50:	2113      	movs	r1, #19
 8008e52:	2090      	movs	r0, #144	; 0x90
 8008e54:	f7fc fbf6 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 8008e58:	f44f 7140 	mov.w	r1, #768	; 0x300
 8008e5c:	2092      	movs	r0, #146	; 0x92
 8008e5e:	f7fc fbf1 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 8008e62:	2105      	movs	r1, #5
 8008e64:	2093      	movs	r0, #147	; 0x93
 8008e66:	f7fc fbed 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	2095      	movs	r0, #149	; 0x95
 8008e6e:	f7fc fbe9 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 8008e72:	2100      	movs	r1, #0
 8008e74:	2097      	movs	r0, #151	; 0x97
 8008e76:	f7fc fbe5 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	2098      	movs	r0, #152	; 0x98
 8008e7e:	f7fc fbe1 	bl	8005644 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 8008e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e86:	2001      	movs	r0, #1
 8008e88:	f7fc fbdc 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 8008e8c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8008e90:	2002      	movs	r0, #2
 8008e92:	f7fc fbd7 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//Р вЂњРІР‚В°Р вЂ™Р РѓР вЂњРЎвЂњР вЂњР РѓР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂњР РЏР вЂњР вЂ  Р вЂњРІР‚В°Р вЂњР РЏ->Р вЂњР РЏР вЂњРІР‚С™  Р вЂњРІР‚вЂќР вЂњРЎвЂ“->Р вЂњРІР‚СљР вЂњРІР‚в„ў
 8008e96:	f241 0138 	movw	r1, #4152	; 0x1038
 8008e9a:	2003      	movs	r0, #3
 8008e9c:	f7fc fbd2 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	2004      	movs	r0, #4
 8008ea4:	f7fc fbce 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	200c      	movs	r0, #12
 8008eac:	f7fc fbca 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	200f      	movs	r0, #15
 8008eb4:	f7fc fbc6 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 8008eb8:	2100      	movs	r1, #0
 8008eba:	2020      	movs	r0, #32
 8008ebc:	f7fc fbc2 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	2021      	movs	r0, #33	; 0x21
 8008ec4:	f7fc fbbe 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 8008ec8:	2121      	movs	r1, #33	; 0x21
 8008eca:	2007      	movs	r0, #7
 8008ecc:	f7fc fbba 	bl	8005644 <LCD_WriteReg>
 8008ed0:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <LCD_Init+0x2f8c>)
 8008ed2:	663b      	str	r3, [r7, #96]	; 0x60
 8008ed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	d1fd      	bne.n	8008ed6 <LCD_Init+0x2f52>
 8008eda:	663b      	str	r3, [r7, #96]	; 0x60
        _delay_ms(20);
        LCD_WriteReg(0x0007,0x0061);
 8008edc:	2161      	movs	r1, #97	; 0x61
 8008ede:	2007      	movs	r0, #7
 8008ee0:	f7fc fbb0 	bl	8005644 <LCD_WriteReg>
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	; (8008f10 <LCD_Init+0x2f8c>)
 8008ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eea:	3b01      	subs	r3, #1
 8008eec:	d1fd      	bne.n	8008eea <LCD_Init+0x2f66>
 8008eee:	65fb      	str	r3, [r7, #92]	; 0x5c
        _delay_ms(20);
        LCD_WriteReg(0x0007,0x0173);
 8008ef0:	f240 1173 	movw	r1, #371	; 0x173
 8008ef4:	2007      	movs	r0, #7
 8008ef6:	f7fc fba5 	bl	8005644 <LCD_WriteReg>
 8008efa:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <LCD_Init+0x2f8c>)
 8008efc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f00:	3b01      	subs	r3, #1
 8008f02:	d1fd      	bne.n	8008f00 <LCD_Init+0x2f7c>
 8008f04:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f06:	e3cc      	b.n	80096a2 <LCD_Init+0x371e>
 8008f08:	20000508 	.word	0x20000508
 8008f0c:	002ab980 	.word	0x002ab980
 8008f10:	00111700 	.word	0x00111700
        _delay_ms(20);
	}else if(lcddev.id==0xB505)
 8008f14:	4b93      	ldr	r3, [pc, #588]	; (8009164 <LCD_Init+0x31e0>)
 8008f16:	889b      	ldrh	r3, [r3, #4]
 8008f18:	f24b 5205 	movw	r2, #46341	; 0xb505
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	f040 8125 	bne.w	800916c <LCD_Init+0x31e8>
	{
		LCD_WriteReg(0x0000,0x0000);
 8008f22:	2100      	movs	r1, #0
 8008f24:	2000      	movs	r0, #0
 8008f26:	f7fc fb8d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	f7fc fb89 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8008f32:	2100      	movs	r1, #0
 8008f34:	2000      	movs	r0, #0
 8008f36:	f7fc fb85 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f7fc fb81 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8008f42:	2101      	movs	r1, #1
 8008f44:	20a4      	movs	r0, #164	; 0xa4
 8008f46:	f7fc fb7d 	bl	8005644 <LCD_WriteReg>
 8008f4a:	4b87      	ldr	r3, [pc, #540]	; (8009168 <LCD_Init+0x31e4>)
 8008f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008f50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f54:	3b01      	subs	r3, #1
 8008f56:	d1fd      	bne.n	8008f54 <LCD_Init+0x2fd0>
 8008f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		_delay_ms(20);
		LCD_WriteReg(0x0060,0x2700);
 8008f5c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8008f60:	2060      	movs	r0, #96	; 0x60
 8008f62:	f7fc fb6f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8008f66:	f240 2102 	movw	r1, #514	; 0x202
 8008f6a:	2008      	movs	r0, #8
 8008f6c:	f7fc fb6a 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8008f70:	f44f 7105 	mov.w	r1, #532	; 0x214
 8008f74:	2030      	movs	r0, #48	; 0x30
 8008f76:	f7fc fb65 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 8008f7a:	f243 7115 	movw	r1, #14101	; 0x3715
 8008f7e:	2031      	movs	r0, #49	; 0x31
 8008f80:	f7fc fb60 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8008f84:	f240 6104 	movw	r1, #1540	; 0x604
 8008f88:	2032      	movs	r0, #50	; 0x32
 8008f8a:	f7fc fb5b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 8008f8e:	f640 6116 	movw	r1, #3606	; 0xe16
 8008f92:	2033      	movs	r0, #51	; 0x33
 8008f94:	f7fc fb56 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 8008f98:	f242 2111 	movw	r1, #8721	; 0x2211
 8008f9c:	2034      	movs	r0, #52	; 0x34
 8008f9e:	f7fc fb51 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 8008fa2:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8008fa6:	2035      	movs	r0, #53	; 0x35
 8008fa8:	f7fc fb4c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 8008fac:	f248 5107 	movw	r1, #34055	; 0x8507
 8008fb0:	2036      	movs	r0, #54	; 0x36
 8008fb2:	f7fc fb47 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 8008fb6:	f241 4107 	movw	r1, #5127	; 0x1407
 8008fba:	2037      	movs	r0, #55	; 0x37
 8008fbc:	f7fc fb42 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8008fc0:	f241 4103 	movw	r1, #5123	; 0x1403
 8008fc4:	2038      	movs	r0, #56	; 0x38
 8008fc6:	f7fc fb3d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 8008fca:	2120      	movs	r1, #32
 8008fcc:	2039      	movs	r0, #57	; 0x39
 8008fce:	f7fc fb39 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 8008fd2:	211a      	movs	r1, #26
 8008fd4:	2090      	movs	r0, #144	; 0x90
 8008fd6:	f7fc fb35 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 8008fda:	2100      	movs	r1, #0
 8008fdc:	2010      	movs	r0, #16
 8008fde:	f7fc fb31 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8008fe2:	2107      	movs	r1, #7
 8008fe4:	2011      	movs	r0, #17
 8008fe6:	f7fc fb2d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8008fea:	2100      	movs	r1, #0
 8008fec:	2012      	movs	r0, #18
 8008fee:	f7fc fb29 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	2013      	movs	r0, #19
 8008ff6:	f7fc fb25 	bl	8005644 <LCD_WriteReg>
 8008ffa:	4b5b      	ldr	r3, [pc, #364]	; (8009168 <LCD_Init+0x31e4>)
 8008ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009004:	3b01      	subs	r3, #1
 8009006:	d1fd      	bne.n	8009004 <LCD_Init+0x3080>
 8009008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		_delay_ms(20);

		LCD_WriteReg(0x0010,0x0730);
 800900c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8009010:	2010      	movs	r0, #16
 8009012:	f7fc fb17 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 8009016:	f240 1137 	movw	r1, #311	; 0x137
 800901a:	2011      	movs	r0, #17
 800901c:	f7fc fb12 	bl	8005644 <LCD_WriteReg>
 8009020:	4b51      	ldr	r3, [pc, #324]	; (8009168 <LCD_Init+0x31e4>)
 8009022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800902a:	3b01      	subs	r3, #1
 800902c:	d1fd      	bne.n	800902a <LCD_Init+0x30a6>
 800902e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		_delay_ms(20);

		LCD_WriteReg(0x0012,0x01b8);
 8009032:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8009036:	2012      	movs	r0, #18
 8009038:	f7fc fb04 	bl	8005644 <LCD_WriteReg>
 800903c:	4b4a      	ldr	r3, [pc, #296]	; (8009168 <LCD_Init+0x31e4>)
 800903e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009040:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009042:	3b01      	subs	r3, #1
 8009044:	d1fd      	bne.n	8009042 <LCD_Init+0x30be>
 8009046:	67fb      	str	r3, [r7, #124]	; 0x7c
		_delay_ms(20);

		LCD_WriteReg(0x0013,0x0f00);
 8009048:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800904c:	2013      	movs	r0, #19
 800904e:	f7fc faf9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8009052:	2180      	movs	r1, #128	; 0x80
 8009054:	202a      	movs	r0, #42	; 0x2a
 8009056:	f7fc faf5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 800905a:	2148      	movs	r1, #72	; 0x48
 800905c:	2029      	movs	r0, #41	; 0x29
 800905e:	f7fc faf1 	bl	8005644 <LCD_WriteReg>
 8009062:	4b41      	ldr	r3, [pc, #260]	; (8009168 <LCD_Init+0x31e4>)
 8009064:	67bb      	str	r3, [r7, #120]	; 0x78
 8009066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009068:	3b01      	subs	r3, #1
 800906a:	d1fd      	bne.n	8009068 <LCD_Init+0x30e4>
 800906c:	67bb      	str	r3, [r7, #120]	; 0x78
		_delay_ms(20);

		LCD_WriteReg(0x0001,0x0100);
 800906e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009072:	2001      	movs	r0, #1
 8009074:	f7fc fae6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8009078:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800907c:	2002      	movs	r0, #2
 800907e:	f7fc fae1 	bl	8005644 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//Р вЂњРІР‚В°Р вЂ™Р РѓР вЂњРЎвЂњР вЂњР РѓР вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂњР РЏР вЂњР вЂ  Р вЂњРІР‚В°Р вЂњР РЏ->Р вЂњР РЏР вЂњРІР‚С™  Р вЂњРІР‚вЂќР вЂњРЎвЂ“->Р вЂњРІР‚СљР вЂњРІР‚в„ў
 8009082:	f241 0138 	movw	r1, #4152	; 0x1038
 8009086:	2003      	movs	r0, #3
 8009088:	f7fc fadc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 800908c:	f240 2102 	movw	r1, #514	; 0x202
 8009090:	2008      	movs	r0, #8
 8009092:	f7fc fad7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 8009096:	2100      	movs	r1, #0
 8009098:	200a      	movs	r0, #10
 800909a:	f7fc fad3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 800909e:	2100      	movs	r1, #0
 80090a0:	200c      	movs	r0, #12
 80090a2:	f7fc facf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 80090a6:	2100      	movs	r1, #0
 80090a8:	200d      	movs	r0, #13
 80090aa:	f7fc facb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 80090ae:	2130      	movs	r1, #48	; 0x30
 80090b0:	200e      	movs	r0, #14
 80090b2:	f7fc fac7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 80090b6:	2100      	movs	r1, #0
 80090b8:	2050      	movs	r0, #80	; 0x50
 80090ba:	f7fc fac3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 80090be:	21ef      	movs	r1, #239	; 0xef
 80090c0:	2051      	movs	r0, #81	; 0x51
 80090c2:	f7fc fabf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80090c6:	2100      	movs	r1, #0
 80090c8:	2052      	movs	r0, #82	; 0x52
 80090ca:	f7fc fabb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 80090ce:	f240 113f 	movw	r1, #319	; 0x13f
 80090d2:	2053      	movs	r0, #83	; 0x53
 80090d4:	f7fc fab6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 80090d8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80090dc:	2060      	movs	r0, #96	; 0x60
 80090de:	f7fc fab1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80090e2:	2101      	movs	r1, #1
 80090e4:	2061      	movs	r0, #97	; 0x61
 80090e6:	f7fc faad 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 80090ea:	2100      	movs	r1, #0
 80090ec:	206a      	movs	r0, #106	; 0x6a
 80090ee:	f7fc faa9 	bl	8005644 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 80090f2:	2111      	movs	r1, #17
 80090f4:	2090      	movs	r0, #144	; 0x90
 80090f6:	f7fc faa5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 80090fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80090fe:	2092      	movs	r0, #146	; 0x92
 8009100:	f7fc faa0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 8009104:	f240 4102 	movw	r1, #1026	; 0x402
 8009108:	2093      	movs	r0, #147	; 0x93
 800910a:	f7fc fa9b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 800910e:	2102      	movs	r1, #2
 8009110:	2094      	movs	r0, #148	; 0x94
 8009112:	f7fc fa97 	bl	8005644 <LCD_WriteReg>
 8009116:	4b14      	ldr	r3, [pc, #80]	; (8009168 <LCD_Init+0x31e4>)
 8009118:	677b      	str	r3, [r7, #116]	; 0x74
 800911a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800911c:	3b01      	subs	r3, #1
 800911e:	d1fd      	bne.n	800911c <LCD_Init+0x3198>
 8009120:	677b      	str	r3, [r7, #116]	; 0x74
		_delay_ms(20);

		LCD_WriteReg(0x0007,0x0001);
 8009122:	2101      	movs	r1, #1
 8009124:	2007      	movs	r0, #7
 8009126:	f7fc fa8d 	bl	8005644 <LCD_WriteReg>
 800912a:	4b0f      	ldr	r3, [pc, #60]	; (8009168 <LCD_Init+0x31e4>)
 800912c:	673b      	str	r3, [r7, #112]	; 0x70
 800912e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009130:	3b01      	subs	r3, #1
 8009132:	d1fd      	bne.n	8009130 <LCD_Init+0x31ac>
 8009134:	673b      	str	r3, [r7, #112]	; 0x70
		_delay_ms(20);
		LCD_WriteReg(0x0007,0x0061);
 8009136:	2161      	movs	r1, #97	; 0x61
 8009138:	2007      	movs	r0, #7
 800913a:	f7fc fa83 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 800913e:	f240 1173 	movw	r1, #371	; 0x173
 8009142:	2007      	movs	r0, #7
 8009144:	f7fc fa7e 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 8009148:	2100      	movs	r1, #0
 800914a:	2020      	movs	r0, #32
 800914c:	f7fc fa7a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 8009150:	2100      	movs	r1, #0
 8009152:	2021      	movs	r0, #33	; 0x21
 8009154:	f7fc fa76 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 8009158:	2122      	movs	r1, #34	; 0x22
 800915a:	2000      	movs	r0, #0
 800915c:	f7fc fa72 	bl	8005644 <LCD_WriteReg>
 8009160:	e29f      	b.n	80096a2 <LCD_Init+0x371e>
 8009162:	bf00      	nop
 8009164:	20000508 	.word	0x20000508
 8009168:	00111700 	.word	0x00111700
	}else if(lcddev.id==0xC505)
 800916c:	4b76      	ldr	r3, [pc, #472]	; (8009348 <LCD_Init+0x33c4>)
 800916e:	889b      	ldrh	r3, [r3, #4]
 8009170:	f24c 5205 	movw	r2, #50437	; 0xc505
 8009174:	4293      	cmp	r3, r2
 8009176:	f040 80ed 	bne.w	8009354 <LCD_Init+0x33d0>
	{
		LCD_WriteReg(0x0000,0x0000);
 800917a:	2100      	movs	r1, #0
 800917c:	2000      	movs	r0, #0
 800917e:	f7fc fa61 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8009182:	2100      	movs	r1, #0
 8009184:	2000      	movs	r0, #0
 8009186:	f7fc fa5d 	bl	8005644 <LCD_WriteReg>
 800918a:	4b70      	ldr	r3, [pc, #448]	; (800934c <LCD_Init+0x33c8>)
 800918c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009194:	3b01      	subs	r3, #1
 8009196:	d1fd      	bne.n	8009194 <LCD_Init+0x3210>
 8009198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		_delay_ms(20);
		LCD_WriteReg(0x0000,0x0000);
 800919c:	2100      	movs	r1, #0
 800919e:	2000      	movs	r0, #0
 80091a0:	f7fc fa50 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80091a4:	2100      	movs	r1, #0
 80091a6:	2000      	movs	r0, #0
 80091a8:	f7fc fa4c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80091ac:	2100      	movs	r1, #0
 80091ae:	2000      	movs	r0, #0
 80091b0:	f7fc fa48 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80091b4:	2100      	movs	r1, #0
 80091b6:	2000      	movs	r0, #0
 80091b8:	f7fc fa44 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 80091bc:	2101      	movs	r1, #1
 80091be:	20a4      	movs	r0, #164	; 0xa4
 80091c0:	f7fc fa40 	bl	8005644 <LCD_WriteReg>
 80091c4:	4b61      	ldr	r3, [pc, #388]	; (800934c <LCD_Init+0x33c8>)
 80091c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091ce:	3b01      	subs	r3, #1
 80091d0:	d1fd      	bne.n	80091ce <LCD_Init+0x324a>
 80091d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		_delay_ms(20);
		LCD_WriteReg(0x0060,0x2700);
 80091d6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80091da:	2060      	movs	r0, #96	; 0x60
 80091dc:	f7fc fa32 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 80091e0:	f640 0106 	movw	r1, #2054	; 0x806
 80091e4:	2008      	movs	r0, #8
 80091e6:	f7fc fa2d 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 80091ea:	f240 7103 	movw	r1, #1795	; 0x703
 80091ee:	2030      	movs	r0, #48	; 0x30
 80091f0:	f7fc fa28 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 80091f4:	2101      	movs	r1, #1
 80091f6:	2031      	movs	r0, #49	; 0x31
 80091f8:	f7fc fa24 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 80091fc:	2104      	movs	r1, #4
 80091fe:	2032      	movs	r0, #50	; 0x32
 8009200:	f7fc fa20 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 8009204:	f44f 7181 	mov.w	r1, #258	; 0x102
 8009208:	2033      	movs	r0, #51	; 0x33
 800920a:	f7fc fa1b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 800920e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8009212:	2034      	movs	r0, #52	; 0x34
 8009214:	f7fc fa16 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 8009218:	f240 1103 	movw	r1, #259	; 0x103
 800921c:	2035      	movs	r0, #53	; 0x35
 800921e:	f7fc fa11 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 8009222:	211f      	movs	r1, #31
 8009224:	2036      	movs	r0, #54	; 0x36
 8009226:	f7fc fa0d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 800922a:	f240 7103 	movw	r1, #1795	; 0x703
 800922e:	2037      	movs	r0, #55	; 0x37
 8009230:	f7fc fa08 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 8009234:	2101      	movs	r1, #1
 8009236:	2038      	movs	r0, #56	; 0x38
 8009238:	f7fc fa04 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 800923c:	2104      	movs	r1, #4
 800923e:	2039      	movs	r0, #57	; 0x39
 8009240:	f7fc fa00 	bl	8005644 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8009244:	2115      	movs	r1, #21
 8009246:	2090      	movs	r0, #144	; 0x90
 8009248:	f7fc f9fc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 800924c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8009250:	2010      	movs	r0, #16
 8009252:	f7fc f9f7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 8009256:	f240 2147 	movw	r1, #583	; 0x247
 800925a:	2011      	movs	r0, #17
 800925c:	f7fc f9f2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8009260:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8009264:	2012      	movs	r0, #18
 8009266:	f7fc f9ed 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800926a:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800926e:	2013      	movs	r0, #19
 8009270:	f7fc f9e8 	bl	8005644 <LCD_WriteReg>
 8009274:	4b36      	ldr	r3, [pc, #216]	; (8009350 <LCD_Init+0x33cc>)
 8009276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800927a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800927e:	3b01      	subs	r3, #1
 8009280:	d1fd      	bne.n	800927e <LCD_Init+0x32fa>
 8009282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		_delay_ms(120);
		LCD_WriteReg(0x0001, 0x0100);
 8009286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800928a:	2001      	movs	r0, #1
 800928c:	f7fc f9da 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8009290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009294:	2002      	movs	r0, #2
 8009296:	f7fc f9d5 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800929a:	f241 0130 	movw	r1, #4144	; 0x1030
 800929e:	2003      	movs	r0, #3
 80092a0:	f7fc f9d0 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 80092a4:	2108      	movs	r1, #8
 80092a6:	200a      	movs	r0, #10
 80092a8:	f7fc f9cc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80092ac:	2100      	movs	r1, #0
 80092ae:	200c      	movs	r0, #12
 80092b0:	f7fc f9c8 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 80092b4:	2120      	movs	r1, #32
 80092b6:	200e      	movs	r0, #14
 80092b8:	f7fc f9c4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80092bc:	2100      	movs	r1, #0
 80092be:	200f      	movs	r0, #15
 80092c0:	f7fc f9c0 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 80092c4:	2100      	movs	r1, #0
 80092c6:	2020      	movs	r0, #32
 80092c8:	f7fc f9bc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80092cc:	2100      	movs	r1, #0
 80092ce:	2021      	movs	r0, #33	; 0x21
 80092d0:	f7fc f9b8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 80092d4:	213d      	movs	r1, #61	; 0x3d
 80092d6:	202a      	movs	r0, #42	; 0x2a
 80092d8:	f7fc f9b4 	bl	8005644 <LCD_WriteReg>
 80092dc:	4b1b      	ldr	r3, [pc, #108]	; (800934c <LCD_Init+0x33c8>)
 80092de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092e6:	3b01      	subs	r3, #1
 80092e8:	d1fd      	bne.n	80092e6 <LCD_Init+0x3362>
 80092ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		_delay_ms(20);
		LCD_WriteReg(0x0029, 0x002d);
 80092ee:	212d      	movs	r1, #45	; 0x2d
 80092f0:	2029      	movs	r0, #41	; 0x29
 80092f2:	f7fc f9a7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80092f6:	2100      	movs	r1, #0
 80092f8:	2050      	movs	r0, #80	; 0x50
 80092fa:	f7fc f9a3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80092fe:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8009302:	2051      	movs	r0, #81	; 0x51
 8009304:	f7fc f99e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8009308:	2100      	movs	r1, #0
 800930a:	2052      	movs	r0, #82	; 0x52
 800930c:	f7fc f99a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8009310:	f240 113f 	movw	r1, #319	; 0x13f
 8009314:	2053      	movs	r0, #83	; 0x53
 8009316:	f7fc f995 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800931a:	2100      	movs	r1, #0
 800931c:	2061      	movs	r0, #97	; 0x61
 800931e:	f7fc f991 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8009322:	2100      	movs	r1, #0
 8009324:	206a      	movs	r0, #106	; 0x6a
 8009326:	f7fc f98d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 800932a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800932e:	2092      	movs	r0, #146	; 0x92
 8009330:	f7fc f988 	bl	8005644 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 8009334:	2105      	movs	r1, #5
 8009336:	2093      	movs	r0, #147	; 0x93
 8009338:	f7fc f984 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 800933c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009340:	2007      	movs	r0, #7
 8009342:	f7fc f97f 	bl	8005644 <LCD_WriteReg>
 8009346:	e1ac      	b.n	80096a2 <LCD_Init+0x371e>
 8009348:	20000508 	.word	0x20000508
 800934c:	00111700 	.word	0x00111700
 8009350:	00668a00 	.word	0x00668a00
	}else if(lcddev.id==0x4531)//OK |/|/|
 8009354:	4bda      	ldr	r3, [pc, #872]	; (80096c0 <LCD_Init+0x373c>)
 8009356:	889b      	ldrh	r3, [r3, #4]
 8009358:	f244 5231 	movw	r2, #17713	; 0x4531
 800935c:	4293      	cmp	r3, r2
 800935e:	f040 80d8 	bne.w	8009512 <LCD_Init+0x358e>
	{
		LCD_WriteReg(0X00,0X0001);
 8009362:	2101      	movs	r1, #1
 8009364:	2000      	movs	r0, #0
 8009366:	f7fc f96d 	bl	8005644 <LCD_WriteReg>
 800936a:	4bd6      	ldr	r3, [pc, #856]	; (80096c4 <LCD_Init+0x3740>)
 800936c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009374:	3b01      	subs	r3, #1
 8009376:	d1fd      	bne.n	8009374 <LCD_Init+0x33f0>
 8009378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		_delay_ms(10);
		LCD_WriteReg(0X10,0X1628);
 800937c:	f241 6128 	movw	r1, #5672	; 0x1628
 8009380:	2010      	movs	r0, #16
 8009382:	f7fc f95f 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 8009386:	210e      	movs	r1, #14
 8009388:	2012      	movs	r0, #18
 800938a:	f7fc f95b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 800938e:	f640 2139 	movw	r1, #2617	; 0xa39
 8009392:	2013      	movs	r0, #19
 8009394:	f7fc f956 	bl	8005644 <LCD_WriteReg>
 8009398:	4bca      	ldr	r3, [pc, #808]	; (80096c4 <LCD_Init+0x3740>)
 800939a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800939e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80093a2:	3b01      	subs	r3, #1
 80093a4:	d1fd      	bne.n	80093a2 <LCD_Init+0x341e>
 80093a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		_delay_ms(10);
		LCD_WriteReg(0X11,0X0040);
 80093aa:	2140      	movs	r1, #64	; 0x40
 80093ac:	2011      	movs	r0, #17
 80093ae:	f7fc f949 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 80093b2:	2150      	movs	r1, #80	; 0x50
 80093b4:	2015      	movs	r0, #21
 80093b6:	f7fc f945 	bl	8005644 <LCD_WriteReg>
 80093ba:	4bc2      	ldr	r3, [pc, #776]	; (80096c4 <LCD_Init+0x3740>)
 80093bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80093c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80093c4:	3b01      	subs	r3, #1
 80093c6:	d1fd      	bne.n	80093c4 <LCD_Init+0x3440>
 80093c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		_delay_ms(10);
		LCD_WriteReg(0X12,0X001e);//16
 80093cc:	211e      	movs	r1, #30
 80093ce:	2012      	movs	r0, #18
 80093d0:	f7fc f938 	bl	8005644 <LCD_WriteReg>
 80093d4:	4bbb      	ldr	r3, [pc, #748]	; (80096c4 <LCD_Init+0x3740>)
 80093d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80093de:	3b01      	subs	r3, #1
 80093e0:	d1fd      	bne.n	80093de <LCD_Init+0x345a>
 80093e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		_delay_ms(10);
		LCD_WriteReg(0X10,0X1620);
 80093e6:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80093ea:	2010      	movs	r0, #16
 80093ec:	f7fc f92a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 80093f0:	f642 2139 	movw	r1, #10809	; 0x2a39
 80093f4:	2013      	movs	r0, #19
 80093f6:	f7fc f925 	bl	8005644 <LCD_WriteReg>
 80093fa:	4bb2      	ldr	r3, [pc, #712]	; (80096c4 <LCD_Init+0x3740>)
 80093fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009404:	3b01      	subs	r3, #1
 8009406:	d1fd      	bne.n	8009404 <LCD_Init+0x3480>
 8009408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		_delay_ms(10);
		LCD_WriteReg(0X01,0X0100);
 800940c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009410:	2001      	movs	r0, #1
 8009412:	f7fc f917 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8009416:	f44f 7140 	mov.w	r1, #768	; 0x300
 800941a:	2002      	movs	r0, #2
 800941c:	f7fc f912 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//Р вЂ™РЎвЂ�Р вЂњРІР‚С›Р вЂ™Р’В±Р вЂњР’В¤Р вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂњР РЏР вЂњР вЂ Р вЂ™Р’ВµР вЂњРІР‚С›
 8009420:	f241 0138 	movw	r1, #4152	; 0x1038
 8009424:	2003      	movs	r0, #3
 8009426:	f7fc f90d 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 800942a:	f240 2102 	movw	r1, #514	; 0x202
 800942e:	2008      	movs	r0, #8
 8009430:	f7fc f908 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8009434:	2108      	movs	r1, #8
 8009436:	200a      	movs	r0, #10
 8009438:	f7fc f904 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 800943c:	2100      	movs	r1, #0
 800943e:	2030      	movs	r0, #48	; 0x30
 8009440:	f7fc f900 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8009444:	f240 4102 	movw	r1, #1026	; 0x402
 8009448:	2031      	movs	r0, #49	; 0x31
 800944a:	f7fc f8fb 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 800944e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8009452:	2032      	movs	r0, #50	; 0x32
 8009454:	f7fc f8f6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 8009458:	f240 5103 	movw	r1, #1283	; 0x503
 800945c:	2033      	movs	r0, #51	; 0x33
 800945e:	f7fc f8f1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 8009462:	f44f 7182 	mov.w	r1, #260	; 0x104
 8009466:	2034      	movs	r0, #52	; 0x34
 8009468:	f7fc f8ec 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 800946c:	f240 3101 	movw	r1, #769	; 0x301
 8009470:	2035      	movs	r0, #53	; 0x35
 8009472:	f7fc f8e7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8009476:	f240 7107 	movw	r1, #1799	; 0x707
 800947a:	2036      	movs	r0, #54	; 0x36
 800947c:	f7fc f8e2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8009480:	f240 3105 	movw	r1, #773	; 0x305
 8009484:	2037      	movs	r0, #55	; 0x37
 8009486:	f7fc f8dd 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 800948a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800948e:	2038      	movs	r0, #56	; 0x38
 8009490:	f7fc f8d8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 8009494:	f640 710b 	movw	r1, #3851	; 0xf0b
 8009498:	2039      	movs	r0, #57	; 0x39
 800949a:	f7fc f8d3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 800949e:	2102      	movs	r1, #2
 80094a0:	2041      	movs	r0, #65	; 0x41
 80094a2:	f7fc f8cf 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 80094a6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80094aa:	2060      	movs	r0, #96	; 0x60
 80094ac:	f7fc f8ca 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 80094b0:	2101      	movs	r1, #1
 80094b2:	2061      	movs	r0, #97	; 0x61
 80094b4:	f7fc f8c6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 80094b8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80094bc:	2090      	movs	r0, #144	; 0x90
 80094be:	f7fc f8c1 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 80094c2:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80094c6:	2092      	movs	r0, #146	; 0x92
 80094c8:	f7fc f8bc 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 80094cc:	2104      	movs	r1, #4
 80094ce:	2093      	movs	r0, #147	; 0x93
 80094d0:	f7fc f8b8 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 80094d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80094d8:	20a0      	movs	r0, #160	; 0xa0
 80094da:	f7fc f8b3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 80094de:	2101      	movs	r1, #1
 80094e0:	2007      	movs	r0, #7
 80094e2:	f7fc f8af 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 80094e6:	2121      	movs	r1, #33	; 0x21
 80094e8:	2007      	movs	r0, #7
 80094ea:	f7fc f8ab 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 80094ee:	2123      	movs	r1, #35	; 0x23
 80094f0:	2007      	movs	r0, #7
 80094f2:	f7fc f8a7 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 80094f6:	2133      	movs	r1, #51	; 0x33
 80094f8:	2007      	movs	r0, #7
 80094fa:	f7fc f8a3 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 80094fe:	f240 1133 	movw	r1, #307	; 0x133
 8009502:	2007      	movs	r0, #7
 8009504:	f7fc f89e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 8009508:	2100      	movs	r1, #0
 800950a:	20a0      	movs	r0, #160	; 0xa0
 800950c:	f7fc f89a 	bl	8005644 <LCD_WriteReg>
 8009510:	e0c7      	b.n	80096a2 <LCD_Init+0x371e>
	}else if(lcddev.id==0x4535)
 8009512:	4b6b      	ldr	r3, [pc, #428]	; (80096c0 <LCD_Init+0x373c>)
 8009514:	889b      	ldrh	r3, [r3, #4]
 8009516:	f244 5235 	movw	r2, #17717	; 0x4535
 800951a:	4293      	cmp	r3, r2
 800951c:	f040 80c1 	bne.w	80096a2 <LCD_Init+0x371e>
	{
		LCD_WriteReg(0X15,0X0030);
 8009520:	2130      	movs	r1, #48	; 0x30
 8009522:	2015      	movs	r0, #21
 8009524:	f7fc f88e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 8009528:	2110      	movs	r1, #16
 800952a:	209a      	movs	r0, #154	; 0x9a
 800952c:	f7fc f88a 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8009530:	2120      	movs	r1, #32
 8009532:	2011      	movs	r0, #17
 8009534:	f7fc f886 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 8009538:	f243 4128 	movw	r1, #13352	; 0x3428
 800953c:	2010      	movs	r0, #16
 800953e:	f7fc f881 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 8009542:	2102      	movs	r1, #2
 8009544:	2012      	movs	r0, #18
 8009546:	f7fc f87d 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 800954a:	f241 0138 	movw	r1, #4152	; 0x1038
 800954e:	2013      	movs	r0, #19
 8009550:	f7fc f878 	bl	8005644 <LCD_WriteReg>
 8009554:	4b5c      	ldr	r3, [pc, #368]	; (80096c8 <LCD_Init+0x3744>)
 8009556:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800955a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800955e:	3b01      	subs	r3, #1
 8009560:	d1fd      	bne.n	800955e <LCD_Init+0x35da>
 8009562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		_delay_ms(40);
		LCD_WriteReg(0X12,0X0012);//16
 8009566:	2112      	movs	r1, #18
 8009568:	2012      	movs	r0, #18
 800956a:	f7fc f86b 	bl	8005644 <LCD_WriteReg>
 800956e:	4b56      	ldr	r3, [pc, #344]	; (80096c8 <LCD_Init+0x3744>)
 8009570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009574:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009578:	3b01      	subs	r3, #1
 800957a:	d1fd      	bne.n	8009578 <LCD_Init+0x35f4>
 800957c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		_delay_ms(40);
  		LCD_WriteReg(0X10,0X3420);
 8009580:	f243 4120 	movw	r1, #13344	; 0x3420
 8009584:	2010      	movs	r0, #16
 8009586:	f7fc f85d 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 800958a:	f243 0138 	movw	r1, #12344	; 0x3038
 800958e:	2013      	movs	r0, #19
 8009590:	f7fc f858 	bl	8005644 <LCD_WriteReg>
 8009594:	4b4d      	ldr	r3, [pc, #308]	; (80096cc <LCD_Init+0x3748>)
 8009596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800959a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800959e:	3b01      	subs	r3, #1
 80095a0:	d1fd      	bne.n	800959e <LCD_Init+0x361a>
 80095a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		_delay_ms(70);
		LCD_WriteReg(0X30,0X0000);
 80095a6:	2100      	movs	r1, #0
 80095a8:	2030      	movs	r0, #48	; 0x30
 80095aa:	f7fc f84b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80095ae:	f240 4102 	movw	r1, #1026	; 0x402
 80095b2:	2031      	movs	r0, #49	; 0x31
 80095b4:	f7fc f846 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 80095b8:	f240 3107 	movw	r1, #775	; 0x307
 80095bc:	2032      	movs	r0, #50	; 0x32
 80095be:	f7fc f841 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 80095c2:	f44f 7141 	mov.w	r1, #772	; 0x304
 80095c6:	2033      	movs	r0, #51	; 0x33
 80095c8:	f7fc f83c 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 80095cc:	2104      	movs	r1, #4
 80095ce:	2034      	movs	r0, #52	; 0x34
 80095d0:	f7fc f838 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 80095d4:	f240 4101 	movw	r1, #1025	; 0x401
 80095d8:	2035      	movs	r0, #53	; 0x35
 80095da:	f7fc f833 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 80095de:	f240 7107 	movw	r1, #1799	; 0x707
 80095e2:	2036      	movs	r0, #54	; 0x36
 80095e4:	f7fc f82e 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80095e8:	f240 3105 	movw	r1, #773	; 0x305
 80095ec:	2037      	movs	r0, #55	; 0x37
 80095ee:	f7fc f829 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 80095f2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80095f6:	2038      	movs	r0, #56	; 0x38
 80095f8:	f7fc f824 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 80095fc:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8009600:	2039      	movs	r0, #57	; 0x39
 8009602:	f7fc f81f 	bl	8005644 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 8009606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800960a:	2001      	movs	r0, #1
 800960c:	f7fc f81a 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8009610:	f44f 7140 	mov.w	r1, #768	; 0x300
 8009614:	2002      	movs	r0, #2
 8009616:	f7fc f815 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//Р вЂ™РЎвЂ�Р вЂњРІР‚С›Р вЂ™Р’В±Р вЂњР’В¤Р вЂ™Р’В·Р вЂ™Р вЂ¦Р вЂњР РЏР вЂњР вЂ Р вЂ™Р’ВµР вЂњРІР‚С›
 800961a:	f241 0130 	movw	r1, #4144	; 0x1030
 800961e:	2003      	movs	r0, #3
 8009620:	f7fc f810 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8009624:	f640 0108 	movw	r1, #2056	; 0x808
 8009628:	2008      	movs	r0, #8
 800962a:	f7fc f80b 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 800962e:	2108      	movs	r1, #8
 8009630:	200a      	movs	r0, #10
 8009632:	f7fc f807 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 8009636:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800963a:	2060      	movs	r0, #96	; 0x60
 800963c:	f7fc f802 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8009640:	2101      	movs	r1, #1
 8009642:	2061      	movs	r0, #97	; 0x61
 8009644:	f7fb fffe 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 8009648:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800964c:	2090      	movs	r0, #144	; 0x90
 800964e:	f7fb fff9 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8009652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009656:	2092      	movs	r0, #146	; 0x92
 8009658:	f7fb fff4 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 800965c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009660:	2093      	movs	r0, #147	; 0x93
 8009662:	f7fb ffef 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 8009666:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800966a:	20a0      	movs	r0, #160	; 0xa0
 800966c:	f7fb ffea 	bl	8005644 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 8009670:	2110      	movs	r1, #16
 8009672:	20a3      	movs	r0, #163	; 0xa3
 8009674:	f7fb ffe6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8009678:	2101      	movs	r1, #1
 800967a:	2007      	movs	r0, #7
 800967c:	f7fb ffe2 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8009680:	2121      	movs	r1, #33	; 0x21
 8009682:	2007      	movs	r0, #7
 8009684:	f7fb ffde 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8009688:	2123      	movs	r1, #35	; 0x23
 800968a:	2007      	movs	r0, #7
 800968c:	f7fb ffda 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8009690:	2133      	movs	r1, #51	; 0x33
 8009692:	2007      	movs	r0, #7
 8009694:	f7fb ffd6 	bl	8005644 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8009698:	f240 1133 	movw	r1, #307	; 0x133
 800969c:	2007      	movs	r0, #7
 800969e:	f7fb ffd1 	bl	8005644 <LCD_WriteReg>
	}
	LCD_Display_Dir(0);
 80096a2:	2000      	movs	r0, #0
 80096a4:	f7fc fb92 	bl	8005dcc <LCD_Display_Dir>
	LCD_LED=1;
 80096a8:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <LCD_Init+0x374c>)
 80096aa:	2201      	movs	r2, #1
 80096ac:	601a      	str	r2, [r3, #0]
	LCD_Clear(White);
 80096ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80096b2:	f000 f80f 	bl	80096d4 <LCD_Clear>
}
 80096b6:	bf00      	nop
 80096b8:	37c0      	adds	r7, #192	; 0xc0
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000508 	.word	0x20000508
 80096c4:	00088b80 	.word	0x00088b80
 80096c8:	00222e00 	.word	0x00222e00
 80096cc:	003bd080 	.word	0x003bd080
 80096d0:	42408284 	.word	0x42408284

080096d4 <LCD_Clear>:

void LCD_Clear(uint16_t color)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 80096e2:	4b21      	ldr	r3, [pc, #132]	; (8009768 <LCD_Clear+0x94>)
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//Р вЂ™Р’ВµР вЂњРЎвЂњР вЂ™Р’ВµР вЂ™Р вЂ¦Р вЂњРІР‚вЂќР вЂњРЎС™Р вЂ™Р’ВµР вЂњР в‚¬Р вЂњР вЂ°Р вЂњР вЂ¦
 80096e8:	4b1f      	ldr	r3, [pc, #124]	; (8009768 <LCD_Clear+0x94>)
 80096ea:	885b      	ldrh	r3, [r3, #2]
 80096ec:	461a      	mov	r2, r3
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	fb02 f303 	mul.w	r3, r2, r3
 80096f4:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804Р вЂ™РЎвЂќР вЂњР Р‹Р вЂњРІР‚В Р вЂњР С“Р вЂ™Р’ВµР вЂњРІР‚С›Р вЂњР вЂ°Р вЂ™Р’В±Р вЂ™РЎвЂќР вЂњР вЂ Р вЂњР Р‰Р вЂњРїС—Р…Р вЂњР вЂ°Р вЂњРЎС›Р вЂ™РўвЂ�Р вЂ™Р’В¦Р вЂњР вЂљР вЂњР’В­
 80096f6:	4b1c      	ldr	r3, [pc, #112]	; (8009768 <LCD_Clear+0x94>)
 80096f8:	889b      	ldrh	r3, [r3, #4]
 80096fa:	f646 0204 	movw	r2, #26628	; 0x6804
 80096fe:	4293      	cmp	r3, r2
 8009700:	d11a      	bne.n	8009738 <LCD_Clear+0x64>
 8009702:	4b19      	ldr	r3, [pc, #100]	; (8009768 <LCD_Clear+0x94>)
 8009704:	799b      	ldrb	r3, [r3, #6]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d116      	bne.n	8009738 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 800970a:	4b17      	ldr	r3, [pc, #92]	; (8009768 <LCD_Clear+0x94>)
 800970c:	2200      	movs	r2, #0
 800970e:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8009710:	4b15      	ldr	r3, [pc, #84]	; (8009768 <LCD_Clear+0x94>)
 8009712:	222a      	movs	r2, #42	; 0x2a
 8009714:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <LCD_Clear+0x94>)
 8009718:	222b      	movs	r2, #43	; 0x2b
 800971a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂ™РІвЂћвЂ“Р вЂњРЎС›Р вЂ™Р’В±Р вЂњР вЂћР вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚вЂњР вЂњРЎвЂњ
 800971c:	2100      	movs	r1, #0
 800971e:	2000      	movs	r0, #0
 8009720:	f7fb ffce 	bl	80056c0 <LCD_SetCursor>
 		lcddev.dir=1;
 8009724:	4b10      	ldr	r3, [pc, #64]	; (8009768 <LCD_Clear+0x94>)
 8009726:	2201      	movs	r2, #1
 8009728:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 800972a:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <LCD_Clear+0x94>)
 800972c:	222b      	movs	r2, #43	; 0x2b
 800972e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8009730:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <LCD_Clear+0x94>)
 8009732:	222a      	movs	r2, #42	; 0x2a
 8009734:	819a      	strh	r2, [r3, #12]
 8009736:	e003      	b.n	8009740 <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//Р вЂњРІР‚В°Р вЂњР РѓР вЂњРІР‚вЂњР вЂњРЎвЂњР вЂ™РІвЂћвЂ“Р вЂњРЎС›Р вЂ™Р’В±Р вЂњР вЂћР вЂњР вЂ№Р вЂ™Р’В»Р вЂњРІР‚вЂњР вЂњРЎвЂњ
 8009738:	2100      	movs	r1, #0
 800973a:	2000      	movs	r0, #0
 800973c:	f7fb ffc0 	bl	80056c0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//Р вЂ™РЎвЂ”Р вЂ™Р вЂћР вЂњР вЂ°Р вЂ™РЎпїЅР вЂњРЎвЂ™Р вЂ™РўвЂ�Р вЂњРІвЂљВ¬Р вЂњР’В«GRAM
 8009740:	f7fb ffae 	bl	80056a0 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	e005      	b.n	8009756 <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 800974a:	4a08      	ldr	r2, [pc, #32]	; (800976c <LCD_Clear+0x98>)
 800974c:	88fb      	ldrh	r3, [r7, #6]
 800974e:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3301      	adds	r3, #1
 8009754:	60fb      	str	r3, [r7, #12]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	429a      	cmp	r2, r3
 800975c:	d3f5      	bcc.n	800974a <LCD_Clear+0x76>
	}
}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000508 	.word	0x20000508
 800976c:	6007fffe 	.word	0x6007fffe

08009770 <LCD_DrawLine>:
		for(j=0;j<width;j++)LCD->LCD_RAM=color[i*width+j];
	}
}

void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8009770:	b590      	push	{r4, r7, lr}
 8009772:	b08d      	sub	sp, #52	; 0x34
 8009774:	af00      	add	r7, sp, #0
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	4611      	mov	r1, r2
 800977c:	461a      	mov	r2, r3
 800977e:	4623      	mov	r3, r4
 8009780:	80fb      	strh	r3, [r7, #6]
 8009782:	4603      	mov	r3, r0
 8009784:	80bb      	strh	r3, [r7, #4]
 8009786:	460b      	mov	r3, r1
 8009788:	807b      	strh	r3, [r7, #2]
 800978a:	4613      	mov	r3, r2
 800978c:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 800978e:	2300      	movs	r3, #0
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
 8009792:	2300      	movs	r3, #0
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8009796:	887a      	ldrh	r2, [r7, #2]
 8009798:	88fb      	ldrh	r3, [r7, #6]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 800979e:	883a      	ldrh	r2, [r7, #0]
 80097a0:	88bb      	ldrh	r3, [r7, #4]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80097a6:	88fb      	ldrh	r3, [r7, #6]
 80097a8:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80097aa:	88bb      	ldrh	r3, [r7, #4]
 80097ac:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	dd02      	ble.n	80097ba <LCD_DrawLine+0x4a>
 80097b4:	2301      	movs	r3, #1
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	e00b      	b.n	80097d2 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;
 80097ba:	6a3b      	ldr	r3, [r7, #32]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d102      	bne.n	80097c6 <LCD_DrawLine+0x56>
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	e005      	b.n	80097d2 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	425b      	negs	r3, r3
 80097d0:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dd02      	ble.n	80097de <LCD_DrawLine+0x6e>
 80097d8:	2301      	movs	r3, #1
 80097da:	613b      	str	r3, [r7, #16]
 80097dc:	e00b      	b.n	80097f6 <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d102      	bne.n	80097ea <LCD_DrawLine+0x7a>
 80097e4:	2300      	movs	r3, #0
 80097e6:	613b      	str	r3, [r7, #16]
 80097e8:	e005      	b.n	80097f6 <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 80097ea:	f04f 33ff 	mov.w	r3, #4294967295
 80097ee:	613b      	str	r3, [r7, #16]
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	425b      	negs	r3, r3
 80097f4:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x;
 80097f6:	6a3a      	ldr	r2, [r7, #32]
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	dd02      	ble.n	8009804 <LCD_DrawLine+0x94>
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	61bb      	str	r3, [r7, #24]
 8009802:	e001      	b.n	8009808 <LCD_DrawLine+0x98>
	else distance=delta_y;
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )
 8009808:	2300      	movs	r3, #0
 800980a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800980c:	e02b      	b.n	8009866 <LCD_DrawLine+0xf6>
	{
		LCD_Fast_DrawPoint(uRow, uCol, color);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	b29b      	uxth	r3, r3
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	b291      	uxth	r1, r2
 8009816:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800981a:	4618      	mov	r0, r3
 800981c:	f7fc fa0a 	bl	8005c34 <LCD_Fast_DrawPoint>
		xerr+=delta_x ;
 8009820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	4413      	add	r3, r2
 8009826:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 8009828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	4413      	add	r3, r2
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8009830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	429a      	cmp	r2, r3
 8009836:	dd07      	ble.n	8009848 <LCD_DrawLine+0xd8>
		{
			xerr-=distance;
 8009838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	4413      	add	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8009848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	429a      	cmp	r2, r3
 800984e:	dd07      	ble.n	8009860 <LCD_DrawLine+0xf0>
		{
			yerr-=distance;
 8009850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	4413      	add	r3, r2
 800985e:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )
 8009860:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009862:	3301      	adds	r3, #1
 8009864:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009866:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	3301      	adds	r3, #1
 800986c:	429a      	cmp	r2, r3
 800986e:	ddce      	ble.n	800980e <LCD_DrawLine+0x9e>
		}
	}
}
 8009870:	bf00      	nop
 8009872:	3734      	adds	r7, #52	; 0x34
 8009874:	46bd      	mov	sp, r7
 8009876:	bd90      	pop	{r4, r7, pc}

08009878 <LCD_VLine>:

void LCD_VLine(uint16_t x0, uint16_t y0, uint16_t h, uint16_t color)
{
 8009878:	b590      	push	{r4, r7, lr}
 800987a:	b085      	sub	sp, #20
 800987c:	af02      	add	r7, sp, #8
 800987e:	4604      	mov	r4, r0
 8009880:	4608      	mov	r0, r1
 8009882:	4611      	mov	r1, r2
 8009884:	461a      	mov	r2, r3
 8009886:	4623      	mov	r3, r4
 8009888:	80fb      	strh	r3, [r7, #6]
 800988a:	4603      	mov	r3, r0
 800988c:	80bb      	strh	r3, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	807b      	strh	r3, [r7, #2]
 8009892:	4613      	mov	r3, r2
 8009894:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x0, y0, x0, y0+h, color);
 8009896:	88ba      	ldrh	r2, [r7, #4]
 8009898:	887b      	ldrh	r3, [r7, #2]
 800989a:	4413      	add	r3, r2
 800989c:	b29c      	uxth	r4, r3
 800989e:	88fa      	ldrh	r2, [r7, #6]
 80098a0:	88b9      	ldrh	r1, [r7, #4]
 80098a2:	88f8      	ldrh	r0, [r7, #6]
 80098a4:	883b      	ldrh	r3, [r7, #0]
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4623      	mov	r3, r4
 80098aa:	f7ff ff61 	bl	8009770 <LCD_DrawLine>
}
 80098ae:	bf00      	nop
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd90      	pop	{r4, r7, pc}
	...

080098b8 <LCD_PutChar>:
		}
	}
}

void LCD_PutChar(uint16_t x, uint16_t y, uint8_t num, unsigned short fontColor, unsigned short fontBkColor)
{
 80098b8:	b590      	push	{r4, r7, lr}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	4611      	mov	r1, r2
 80098c4:	461a      	mov	r2, r3
 80098c6:	4623      	mov	r3, r4
 80098c8:	80fb      	strh	r3, [r7, #6]
 80098ca:	4603      	mov	r3, r0
 80098cc:	80bb      	strh	r3, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
 80098d2:	4613      	mov	r3, r2
 80098d4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,t1,t;
	uint16_t y0=y;
 80098d6:	88bb      	ldrh	r3, [r7, #4]
 80098d8:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(FONT_SIZE/8+((FONT_SIZE%8)?1:0))*(FONT_SIZE/2);
 80098da:	2310      	movs	r3, #16
 80098dc:	727b      	strb	r3, [r7, #9]
	num=num-' ';
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	3b20      	subs	r3, #32
 80098e2:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 80098e4:	2300      	movs	r3, #0
 80098e6:	737b      	strb	r3, [r7, #13]
 80098e8:	e041      	b.n	800996e <LCD_PutChar+0xb6>
	{
		if(FONT_SIZE==12)temp=asc2_1206[num][t];
		else if(FONT_SIZE==16)temp=asc2_1608[num][t];
 80098ea:	78fa      	ldrb	r2, [r7, #3]
 80098ec:	7b7b      	ldrb	r3, [r7, #13]
 80098ee:	4924      	ldr	r1, [pc, #144]	; (8009980 <LCD_PutChar+0xc8>)
 80098f0:	0112      	lsls	r2, r2, #4
 80098f2:	440a      	add	r2, r1
 80098f4:	4413      	add	r3, r2
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	73fb      	strb	r3, [r7, #15]
		else if(FONT_SIZE==24)temp=asc2_2412[num][t];
		else return;

		for(t1=0;t1<8;t1++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	73bb      	strb	r3, [r7, #14]
 80098fe:	e02e      	b.n	800995e <LCD_PutChar+0xa6>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x, y, fontColor);
 8009900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009904:	2b00      	cmp	r3, #0
 8009906:	da06      	bge.n	8009916 <LCD_PutChar+0x5e>
 8009908:	883a      	ldrh	r2, [r7, #0]
 800990a:	88b9      	ldrh	r1, [r7, #4]
 800990c:	88fb      	ldrh	r3, [r7, #6]
 800990e:	4618      	mov	r0, r3
 8009910:	f7fc f990 	bl	8005c34 <LCD_Fast_DrawPoint>
 8009914:	e005      	b.n	8009922 <LCD_PutChar+0x6a>
			else LCD_Fast_DrawPoint(x, y, fontBkColor);
 8009916:	8c3a      	ldrh	r2, [r7, #32]
 8009918:	88b9      	ldrh	r1, [r7, #4]
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	4618      	mov	r0, r3
 800991e:	f7fc f989 	bl	8005c34 <LCD_Fast_DrawPoint>
			temp<<=1;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	73fb      	strb	r3, [r7, #15]
			y++;
 8009928:	88bb      	ldrh	r3, [r7, #4]
 800992a:	3301      	adds	r3, #1
 800992c:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;
 800992e:	4b15      	ldr	r3, [pc, #84]	; (8009984 <LCD_PutChar+0xcc>)
 8009930:	885b      	ldrh	r3, [r3, #2]
 8009932:	88ba      	ldrh	r2, [r7, #4]
 8009934:	429a      	cmp	r2, r3
 8009936:	d21f      	bcs.n	8009978 <LCD_PutChar+0xc0>
			if((y-y0)==FONT_SIZE)
 8009938:	88ba      	ldrh	r2, [r7, #4]
 800993a:	897b      	ldrh	r3, [r7, #10]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	2b10      	cmp	r3, #16
 8009940:	d10a      	bne.n	8009958 <LCD_PutChar+0xa0>
			{
				y=y0;
 8009942:	897b      	ldrh	r3, [r7, #10]
 8009944:	80bb      	strh	r3, [r7, #4]
				x++;
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	3301      	adds	r3, #1
 800994a:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;
 800994c:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <LCD_PutChar+0xcc>)
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	88fa      	ldrh	r2, [r7, #6]
 8009952:	429a      	cmp	r2, r3
 8009954:	d307      	bcc.n	8009966 <LCD_PutChar+0xae>
 8009956:	e010      	b.n	800997a <LCD_PutChar+0xc2>
		for(t1=0;t1<8;t1++)
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	3301      	adds	r3, #1
 800995c:	73bb      	strb	r3, [r7, #14]
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	2b07      	cmp	r3, #7
 8009962:	d9cd      	bls.n	8009900 <LCD_PutChar+0x48>
 8009964:	e000      	b.n	8009968 <LCD_PutChar+0xb0>
				break;
 8009966:	bf00      	nop
	for(t=0;t<csize;t++)
 8009968:	7b7b      	ldrb	r3, [r7, #13]
 800996a:	3301      	adds	r3, #1
 800996c:	737b      	strb	r3, [r7, #13]
 800996e:	7b7a      	ldrb	r2, [r7, #13]
 8009970:	7a7b      	ldrb	r3, [r7, #9]
 8009972:	429a      	cmp	r2, r3
 8009974:	d3b9      	bcc.n	80098ea <LCD_PutChar+0x32>
 8009976:	e000      	b.n	800997a <LCD_PutChar+0xc2>
			if(y>=lcddev.height)return;
 8009978:	bf00      	nop
			}
		}
	}
}
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	bd90      	pop	{r4, r7, pc}
 8009980:	0800ad0c 	.word	0x0800ad0c
 8009984:	20000508 	.word	0x20000508

08009988 <GUI_Line>:
	  LCD_PutChar((x+8*i), y, *str++, Color, bkColor);
  }
}

void GUI_Line(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1,unsigned short color)
{
 8009988:	b590      	push	{r4, r7, lr}
 800998a:	b08b      	sub	sp, #44	; 0x2c
 800998c:	af00      	add	r7, sp, #0
 800998e:	4604      	mov	r4, r0
 8009990:	4608      	mov	r0, r1
 8009992:	4611      	mov	r1, r2
 8009994:	461a      	mov	r2, r3
 8009996:	4623      	mov	r3, r4
 8009998:	80fb      	strh	r3, [r7, #6]
 800999a:	4603      	mov	r3, r0
 800999c:	80bb      	strh	r3, [r7, #4]
 800999e:	460b      	mov	r3, r1
 80099a0:	807b      	strh	r3, [r7, #2]
 80099a2:	4613      	mov	r3, r2
 80099a4:	803b      	strh	r3, [r7, #0]
 	unsigned short x,y;
 	unsigned short dx;// = abs(x1 - x0);
 	unsigned short dy;// = abs(y1 - y0);

	if(y0==y1)
 80099a6:	88ba      	ldrh	r2, [r7, #4]
 80099a8:	883b      	ldrh	r3, [r7, #0]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d119      	bne.n	80099e2 <GUI_Line+0x5a>
	{
		if(x0<=x1)
 80099ae:	88fa      	ldrh	r2, [r7, #6]
 80099b0:	887b      	ldrh	r3, [r7, #2]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d802      	bhi.n	80099bc <GUI_Line+0x34>
		{
			x=x0;
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80099ba:	e00d      	b.n	80099d8 <GUI_Line+0x50>
		}
		else
		{
			x=x1;
 80099bc:	887b      	ldrh	r3, [r7, #2]
 80099be:	84fb      	strh	r3, [r7, #38]	; 0x26
			x1=x0;
 80099c0:	88fb      	ldrh	r3, [r7, #6]
 80099c2:	807b      	strh	r3, [r7, #2]
		}
  		while(x <= x1)
 80099c4:	e008      	b.n	80099d8 <GUI_Line+0x50>
  		{
  			LCD_Fast_DrawPoint(x,y0,color);
 80099c6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80099c8:	88b9      	ldrh	r1, [r7, #4]
 80099ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fc f931 	bl	8005c34 <LCD_Fast_DrawPoint>
   			x++;
 80099d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099d4:	3301      	adds	r3, #1
 80099d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  		while(x <= x1)
 80099d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80099da:	887b      	ldrh	r3, [r7, #2]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d9f2      	bls.n	80099c6 <GUI_Line+0x3e>
  		}
  		return;
 80099e0:	e13e      	b.n	8009c60 <GUI_Line+0x2d8>
	}
	else if(y0>y1)
 80099e2:	88ba      	ldrh	r2, [r7, #4]
 80099e4:	883b      	ldrh	r3, [r7, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d904      	bls.n	80099f4 <GUI_Line+0x6c>
	{
		dy=y0-y1;
 80099ea:	88ba      	ldrh	r2, [r7, #4]
 80099ec:	883b      	ldrh	r3, [r7, #0]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	843b      	strh	r3, [r7, #32]
 80099f2:	e003      	b.n	80099fc <GUI_Line+0x74>
	}
	else
	{
		dy=y1-y0;
 80099f4:	883a      	ldrh	r2, [r7, #0]
 80099f6:	88bb      	ldrh	r3, [r7, #4]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	843b      	strh	r3, [r7, #32]
	}

 	if(x0==x1)
 80099fc:	88fa      	ldrh	r2, [r7, #6]
 80099fe:	887b      	ldrh	r3, [r7, #2]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d119      	bne.n	8009a38 <GUI_Line+0xb0>
	{
		if(y0<=y1)
 8009a04:	88ba      	ldrh	r2, [r7, #4]
 8009a06:	883b      	ldrh	r3, [r7, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d802      	bhi.n	8009a12 <GUI_Line+0x8a>
		{
			y=y0;
 8009a0c:	88bb      	ldrh	r3, [r7, #4]
 8009a0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009a10:	e00d      	b.n	8009a2e <GUI_Line+0xa6>
		}
		else
		{
			y=y1;
 8009a12:	883b      	ldrh	r3, [r7, #0]
 8009a14:	84bb      	strh	r3, [r7, #36]	; 0x24
			y1=y0;
 8009a16:	88bb      	ldrh	r3, [r7, #4]
 8009a18:	803b      	strh	r3, [r7, #0]
		}
  		while(y <= y1)
 8009a1a:	e008      	b.n	8009a2e <GUI_Line+0xa6>
  		{
  			LCD_Fast_DrawPoint(x0,y,color);
 8009a1c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009a1e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009a20:	88fb      	ldrh	r3, [r7, #6]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fc f906 	bl	8005c34 <LCD_Fast_DrawPoint>
   			y++;
 8009a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  		while(y <= y1)
 8009a2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a30:	883b      	ldrh	r3, [r7, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d9f2      	bls.n	8009a1c <GUI_Line+0x94>
  		}
  		return;
 8009a36:	e113      	b.n	8009c60 <GUI_Line+0x2d8>
	}
	else if(x0 > x1)
 8009a38:	88fa      	ldrh	r2, [r7, #6]
 8009a3a:	887b      	ldrh	r3, [r7, #2]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d90c      	bls.n	8009a5a <GUI_Line+0xd2>
 	{
		dx=x0-x1;
 8009a40:	88fa      	ldrh	r2, [r7, #6]
 8009a42:	887b      	ldrh	r3, [r7, #2]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	847b      	strh	r3, [r7, #34]	; 0x22
  		x = x1;
 8009a48:	887b      	ldrh	r3, [r7, #2]
 8009a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
  		x1 = x0;
 8009a4c:	88fb      	ldrh	r3, [r7, #6]
 8009a4e:	807b      	strh	r3, [r7, #2]
  		y = y1;
 8009a50:	883b      	ldrh	r3, [r7, #0]
 8009a52:	84bb      	strh	r3, [r7, #36]	; 0x24
  		y1 = y0;
 8009a54:	88bb      	ldrh	r3, [r7, #4]
 8009a56:	803b      	strh	r3, [r7, #0]
 8009a58:	e007      	b.n	8009a6a <GUI_Line+0xe2>
 	}
 	else
 	{
		dx=x1-x0;
 8009a5a:	887a      	ldrh	r2, [r7, #2]
 8009a5c:	88fb      	ldrh	r3, [r7, #6]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	847b      	strh	r3, [r7, #34]	; 0x22
  		x = x0;
 8009a62:	88fb      	ldrh	r3, [r7, #6]
 8009a64:	84fb      	strh	r3, [r7, #38]	; 0x26
  		y = y0;
 8009a66:	88bb      	ldrh	r3, [r7, #4]
 8009a68:	84bb      	strh	r3, [r7, #36]	; 0x24
 	}

 	if(dx == dy)
 8009a6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a6c:	8c3b      	ldrh	r3, [r7, #32]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d119      	bne.n	8009aa6 <GUI_Line+0x11e>
 	{
  		while(x <= x1)
 8009a72:	e013      	b.n	8009a9c <GUI_Line+0x114>
  		{

   			x++;
 8009a74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a76:	3301      	adds	r3, #1
 8009a78:	84fb      	strh	r3, [r7, #38]	; 0x26
			if(y>y1)
 8009a7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a7c:	883b      	ldrh	r3, [r7, #0]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d903      	bls.n	8009a8a <GUI_Line+0x102>
			{
				y--;
 8009a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a84:	3b01      	subs	r3, #1
 8009a86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009a88:	e002      	b.n	8009a90 <GUI_Line+0x108>
			}
			else
			{
   				y++;
 8009a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}
			LCD_Fast_DrawPoint(x,y,color);
 8009a90:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009a92:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009a94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fc f8cc 	bl	8005c34 <LCD_Fast_DrawPoint>
  		while(x <= x1)
 8009a9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009a9e:	887b      	ldrh	r3, [r7, #2]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d9e7      	bls.n	8009a74 <GUI_Line+0xec>
 8009aa4:	e0dc      	b.n	8009c60 <GUI_Line+0x2d8>
  		}
 	}
 	else
 	{
 		LCD_Fast_DrawPoint(x, y, color);
 8009aa6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009aa8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009aaa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fc f8c1 	bl	8005c34 <LCD_Fast_DrawPoint>
  		if(y < y1)
 8009ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ab4:	883b      	ldrh	r3, [r7, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d269      	bcs.n	8009b8e <GUI_Line+0x206>
  		{
   			if(dx > dy)
 8009aba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009abc:	8c3b      	ldrh	r3, [r7, #32]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d932      	bls.n	8009b28 <GUI_Line+0x1a0>
   			{
    			signed short p = dy * 2 - dx;
 8009ac2:	8c3b      	ldrh	r3, [r7, #32]
 8009ac4:	005b      	lsls	r3, r3, #1
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	83fb      	strh	r3, [r7, #30]
    			signed short twoDy = 2 * dy;
 8009ad0:	8c3b      	ldrh	r3, [r7, #32]
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	817b      	strh	r3, [r7, #10]
    			signed short twoDyMinusDx = 2 * (dy - dx);
 8009ad8:	8c3a      	ldrh	r2, [r7, #32]
 8009ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	005b      	lsls	r3, r3, #1
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	813b      	strh	r3, [r7, #8]
    			while(x < x1)
 8009ae6:	e01a      	b.n	8009b1e <GUI_Line+0x196>
    			{
     				x++;
 8009ae8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009aea:	3301      	adds	r3, #1
 8009aec:	84fb      	strh	r3, [r7, #38]	; 0x26
     				if(p < 0)
 8009aee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	da05      	bge.n	8009b02 <GUI_Line+0x17a>
     				{
      					p += twoDy;
 8009af6:	8bfa      	ldrh	r2, [r7, #30]
 8009af8:	897b      	ldrh	r3, [r7, #10]
 8009afa:	4413      	add	r3, r2
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	83fb      	strh	r3, [r7, #30]
 8009b00:	e007      	b.n	8009b12 <GUI_Line+0x18a>
     				}
     				else
     				{
      					y++;
 8009b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b04:	3301      	adds	r3, #1
 8009b06:	84bb      	strh	r3, [r7, #36]	; 0x24
      					p += twoDyMinusDx;
 8009b08:	8bfa      	ldrh	r2, [r7, #30]
 8009b0a:	893b      	ldrh	r3, [r7, #8]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	83fb      	strh	r3, [r7, #30]
     				}
     				LCD_Fast_DrawPoint(x, y,color);
 8009b12:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009b14:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009b16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f7fc f88b 	bl	8005c34 <LCD_Fast_DrawPoint>
    			while(x < x1)
 8009b1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009b20:	887b      	ldrh	r3, [r7, #2]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d3e0      	bcc.n	8009ae8 <GUI_Line+0x160>
 8009b26:	e09b      	b.n	8009c60 <GUI_Line+0x2d8>
    			}
   			}
   			else
   			{
    			signed short p = dx * 2 - dy;
 8009b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b2a:	005b      	lsls	r3, r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	8c3b      	ldrh	r3, [r7, #32]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	83bb      	strh	r3, [r7, #28]
    			signed short twoDx = 2 * dx;
 8009b36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	81fb      	strh	r3, [r7, #14]
    			signed short twoDxMinusDy = 2 * (dx - dy);
 8009b3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009b40:	8c3b      	ldrh	r3, [r7, #32]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	005b      	lsls	r3, r3, #1
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	81bb      	strh	r3, [r7, #12]
    			while(y < y1)
 8009b4c:	e01a      	b.n	8009b84 <GUI_Line+0x1fc>
    			{
     				y++;
 8009b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b50:	3301      	adds	r3, #1
 8009b52:	84bb      	strh	r3, [r7, #36]	; 0x24
     				if(p < 0)
 8009b54:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	da05      	bge.n	8009b68 <GUI_Line+0x1e0>
     				{
      					p += twoDx;
 8009b5c:	8bba      	ldrh	r2, [r7, #28]
 8009b5e:	89fb      	ldrh	r3, [r7, #14]
 8009b60:	4413      	add	r3, r2
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	83bb      	strh	r3, [r7, #28]
 8009b66:	e007      	b.n	8009b78 <GUI_Line+0x1f0>
     				}
     				else
     				{
      					x++;
 8009b68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
      					p+= twoDxMinusDy;
 8009b6e:	8bba      	ldrh	r2, [r7, #28]
 8009b70:	89bb      	ldrh	r3, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	83bb      	strh	r3, [r7, #28]
     				}
     				LCD_Fast_DrawPoint(x, y, color);
 8009b78:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009b7a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009b7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fc f858 	bl	8005c34 <LCD_Fast_DrawPoint>
    			while(y < y1)
 8009b84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b86:	883b      	ldrh	r3, [r7, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d3e0      	bcc.n	8009b4e <GUI_Line+0x1c6>
 8009b8c:	e068      	b.n	8009c60 <GUI_Line+0x2d8>
    			}
   			}
  		}
  		else
  		{
   			if(dx > dy)
 8009b8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009b90:	8c3b      	ldrh	r3, [r7, #32]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d932      	bls.n	8009bfc <GUI_Line+0x274>
   			{
    			signed short p = dy * 2 - dx;
 8009b96:	8c3b      	ldrh	r3, [r7, #32]
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	837b      	strh	r3, [r7, #26]
    			signed short twoDy = 2 * dy;
 8009ba4:	8c3b      	ldrh	r3, [r7, #32]
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	827b      	strh	r3, [r7, #18]
	    		signed short twoDyMinusDx = 2 * (dy - dx);
 8009bac:	8c3a      	ldrh	r2, [r7, #32]
 8009bae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	005b      	lsls	r3, r3, #1
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	823b      	strh	r3, [r7, #16]
    			while(x < x1)
 8009bba:	e01a      	b.n	8009bf2 <GUI_Line+0x26a>
    			{
     				x++;
 8009bbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	84fb      	strh	r3, [r7, #38]	; 0x26
     				if(p < 0)
 8009bc2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	da05      	bge.n	8009bd6 <GUI_Line+0x24e>
	     			{
    	  				p += twoDy;
 8009bca:	8b7a      	ldrh	r2, [r7, #26]
 8009bcc:	8a7b      	ldrh	r3, [r7, #18]
 8009bce:	4413      	add	r3, r2
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	837b      	strh	r3, [r7, #26]
 8009bd4:	e007      	b.n	8009be6 <GUI_Line+0x25e>
     				}
     				else
     				{
      					y--;
 8009bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	84bb      	strh	r3, [r7, #36]	; 0x24
	      				p += twoDyMinusDx;
 8009bdc:	8b7a      	ldrh	r2, [r7, #26]
 8009bde:	8a3b      	ldrh	r3, [r7, #16]
 8009be0:	4413      	add	r3, r2
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	837b      	strh	r3, [r7, #26]
    	 			}
     				LCD_Fast_DrawPoint(x, y,color);
 8009be6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009be8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009bea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fc f821 	bl	8005c34 <LCD_Fast_DrawPoint>
    			while(x < x1)
 8009bf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009bf4:	887b      	ldrh	r3, [r7, #2]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d3e0      	bcc.n	8009bbc <GUI_Line+0x234>
 8009bfa:	e031      	b.n	8009c60 <GUI_Line+0x2d8>
    			}
   			}
	   		else
   			{
    			signed short p = dx * 2 - dy;
 8009bfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	8c3b      	ldrh	r3, [r7, #32]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	833b      	strh	r3, [r7, #24]
    			signed short twoDx = 2 * dx;
 8009c0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	82fb      	strh	r3, [r7, #22]
	    		signed short twoDxMinusDy = 2 * (dx - dy);
 8009c12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009c14:	8c3b      	ldrh	r3, [r7, #32]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	005b      	lsls	r3, r3, #1
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	82bb      	strh	r3, [r7, #20]
    			while(y1 < y)
 8009c20:	e01a      	b.n	8009c58 <GUI_Line+0x2d0>
    			{
     				y--;
 8009c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c24:	3b01      	subs	r3, #1
 8009c26:	84bb      	strh	r3, [r7, #36]	; 0x24
     				if(p < 0)
 8009c28:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	da05      	bge.n	8009c3c <GUI_Line+0x2b4>
	     			{
    	  				p += twoDx;
 8009c30:	8b3a      	ldrh	r2, [r7, #24]
 8009c32:	8afb      	ldrh	r3, [r7, #22]
 8009c34:	4413      	add	r3, r2
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	833b      	strh	r3, [r7, #24]
 8009c3a:	e007      	b.n	8009c4c <GUI_Line+0x2c4>
     				}
     				else
     				{
      					x++;
 8009c3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c3e:	3301      	adds	r3, #1
 8009c40:	84fb      	strh	r3, [r7, #38]	; 0x26
	      				p+= twoDxMinusDy;
 8009c42:	8b3a      	ldrh	r2, [r7, #24]
 8009c44:	8abb      	ldrh	r3, [r7, #20]
 8009c46:	4413      	add	r3, r2
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	833b      	strh	r3, [r7, #24]
    	 			}
     				LCD_Fast_DrawPoint(x, y,color);
 8009c4c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8009c4e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8009c50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fb ffee 	bl	8005c34 <LCD_Fast_DrawPoint>
    			while(y1 < y)
 8009c58:	883a      	ldrh	r2, [r7, #0]
 8009c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d3e0      	bcc.n	8009c22 <GUI_Line+0x29a>
    			}
   			}
  		}
 	}
}
 8009c60:	372c      	adds	r7, #44	; 0x2c
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd90      	pop	{r4, r7, pc}

08009c66 <GUI_Rectangle>:
			delta+=((x<<2)+6);
		}
	}
}

void GUI_Rectangle(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1,unsigned short color,unsigned char fill) {
 8009c66:	b590      	push	{r4, r7, lr}
 8009c68:	b087      	sub	sp, #28
 8009c6a:	af02      	add	r7, sp, #8
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	4608      	mov	r0, r1
 8009c70:	4611      	mov	r1, r2
 8009c72:	461a      	mov	r2, r3
 8009c74:	4623      	mov	r3, r4
 8009c76:	80fb      	strh	r3, [r7, #6]
 8009c78:	4603      	mov	r3, r0
 8009c7a:	80bb      	strh	r3, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	807b      	strh	r3, [r7, #2]
 8009c80:	4613      	mov	r3, r2
 8009c82:	803b      	strh	r3, [r7, #0]
	unsigned short h = y1-y0;
 8009c84:	883a      	ldrh	r2, [r7, #0]
 8009c86:	88bb      	ldrh	r3, [r7, #4]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	81fb      	strh	r3, [r7, #14]

	if(fill)	{
 8009c8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d011      	beq.n	8009cb8 <GUI_Rectangle+0x52>
		for(h++;x0 <=x1;x0++) LCD_VLine(x0, y0, h, color);
 8009c94:	89fb      	ldrh	r3, [r7, #14]
 8009c96:	3301      	adds	r3, #1
 8009c98:	81fb      	strh	r3, [r7, #14]
 8009c9a:	e008      	b.n	8009cae <GUI_Rectangle+0x48>
 8009c9c:	8c3b      	ldrh	r3, [r7, #32]
 8009c9e:	89fa      	ldrh	r2, [r7, #14]
 8009ca0:	88b9      	ldrh	r1, [r7, #4]
 8009ca2:	88f8      	ldrh	r0, [r7, #6]
 8009ca4:	f7ff fde8 	bl	8009878 <LCD_VLine>
 8009ca8:	88fb      	ldrh	r3, [r7, #6]
 8009caa:	3301      	adds	r3, #1
 8009cac:	80fb      	strh	r3, [r7, #6]
 8009cae:	88fa      	ldrh	r2, [r7, #6]
 8009cb0:	887b      	ldrh	r3, [r7, #2]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d9f2      	bls.n	8009c9c <GUI_Rectangle+0x36>
		return;
 8009cb6:	e01d      	b.n	8009cf4 <GUI_Rectangle+0x8e>
	}

	LCD_VLine(x0, y0, h,color);
 8009cb8:	8c3b      	ldrh	r3, [r7, #32]
 8009cba:	89fa      	ldrh	r2, [r7, #14]
 8009cbc:	88b9      	ldrh	r1, [r7, #4]
 8009cbe:	88f8      	ldrh	r0, [r7, #6]
 8009cc0:	f7ff fdda 	bl	8009878 <LCD_VLine>
	GUI_Line(x0,y0,x1,y0,color);
 8009cc4:	88bc      	ldrh	r4, [r7, #4]
 8009cc6:	887a      	ldrh	r2, [r7, #2]
 8009cc8:	88b9      	ldrh	r1, [r7, #4]
 8009cca:	88f8      	ldrh	r0, [r7, #6]
 8009ccc:	8c3b      	ldrh	r3, [r7, #32]
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	4623      	mov	r3, r4
 8009cd2:	f7ff fe59 	bl	8009988 <GUI_Line>
	GUI_Line(x0,y1,x1,y1,color);
 8009cd6:	883c      	ldrh	r4, [r7, #0]
 8009cd8:	887a      	ldrh	r2, [r7, #2]
 8009cda:	8839      	ldrh	r1, [r7, #0]
 8009cdc:	88f8      	ldrh	r0, [r7, #6]
 8009cde:	8c3b      	ldrh	r3, [r7, #32]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	f7ff fe50 	bl	8009988 <GUI_Line>
	LCD_VLine(x1, y0, h,color);
 8009ce8:	8c3b      	ldrh	r3, [r7, #32]
 8009cea:	89fa      	ldrh	r2, [r7, #14]
 8009cec:	88b9      	ldrh	r1, [r7, #4]
 8009cee:	8878      	ldrh	r0, [r7, #2]
 8009cf0:	f7ff fdc2 	bl	8009878 <LCD_VLine>
}
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd90      	pop	{r4, r7, pc}
	...

08009cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009d00:	f7f6 fbe2 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009d04:	f000 f826 	bl	8009d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009d08:	f7fb fb70 	bl	80053ec <MX_GPIO_Init>
  MX_RTC_Init();
 8009d0c:	f000 f8ac 	bl	8009e68 <MX_RTC_Init>
  MX_FSMC_Init();
 8009d10:	f7fb fab6 	bl	8005280 <MX_FSMC_Init>
  MX_SDIO_SD_Init();
 8009d14:	f000 fbf2 	bl	800a4fc <MX_SDIO_SD_Init>
  MX_TIM2_Init();
 8009d18:	f000 fd56 	bl	800a7c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8009d1c:	f000 fda0 	bl	800a860 <MX_TIM3_Init>
  MX_TIM4_Init();
 8009d20:	f000 fdec 	bl	800a8fc <MX_TIM4_Init>
  MX_TIM5_Init();
 8009d24:	f000 fe38 	bl	800a998 <MX_TIM5_Init>
  MX_FATFS_Init();
 8009d28:	f7fb fa82 	bl	8005230 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8009d2c:	f000 ff02 	bl	800ab34 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  SystemStartup();
 8009d30:	f7fb fc48 	bl	80055c4 <SystemStartup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_0_Pin);
 8009d34:	2140      	movs	r1, #64	; 0x40
 8009d36:	4806      	ldr	r0, [pc, #24]	; (8009d50 <main+0x54>)
 8009d38:	f7f6 ff59 	bl	8000bee <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8009d3c:	2180      	movs	r1, #128	; 0x80
 8009d3e:	4804      	ldr	r0, [pc, #16]	; (8009d50 <main+0x54>)
 8009d40:	f7f6 ff55 	bl	8000bee <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8009d44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d48:	f7f6 fc30 	bl	80005ac <HAL_Delay>
	HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_0_Pin);
 8009d4c:	e7f2      	b.n	8009d34 <main+0x38>
 8009d4e:	bf00      	nop
 8009d50:	40020000 	.word	0x40020000

08009d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b098      	sub	sp, #96	; 0x60
 8009d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d5e:	2230      	movs	r2, #48	; 0x30
 8009d60:	2100      	movs	r1, #0
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 ffae 	bl	800acc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d68:	f107 031c 	add.w	r3, r7, #28
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	605a      	str	r2, [r3, #4]
 8009d72:	609a      	str	r2, [r3, #8]
 8009d74:	60da      	str	r2, [r3, #12]
 8009d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d78:	f107 030c 	add.w	r3, r7, #12
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	605a      	str	r2, [r3, #4]
 8009d82:	609a      	str	r2, [r3, #8]
 8009d84:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d86:	2300      	movs	r3, #0
 8009d88:	60bb      	str	r3, [r7, #8]
 8009d8a:	4b31      	ldr	r3, [pc, #196]	; (8009e50 <SystemClock_Config+0xfc>)
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	4a30      	ldr	r2, [pc, #192]	; (8009e50 <SystemClock_Config+0xfc>)
 8009d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d94:	6413      	str	r3, [r2, #64]	; 0x40
 8009d96:	4b2e      	ldr	r3, [pc, #184]	; (8009e50 <SystemClock_Config+0xfc>)
 8009d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d9e:	60bb      	str	r3, [r7, #8]
 8009da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009da2:	2300      	movs	r3, #0
 8009da4:	607b      	str	r3, [r7, #4]
 8009da6:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <SystemClock_Config+0x100>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a2a      	ldr	r2, [pc, #168]	; (8009e54 <SystemClock_Config+0x100>)
 8009dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	4b28      	ldr	r3, [pc, #160]	; (8009e54 <SystemClock_Config+0x100>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dba:	607b      	str	r3, [r7, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009dbe:	2309      	movs	r3, #9
 8009dc0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009dc6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009dcc:	2302      	movs	r3, #2
 8009dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009dd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009dd6:	2304      	movs	r3, #4
 8009dd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009dda:	23a8      	movs	r3, #168	; 0xa8
 8009ddc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009dde:	2302      	movs	r3, #2
 8009de0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009de2:	2307      	movs	r3, #7
 8009de4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7f6 ff1a 	bl	8000c24 <HAL_RCC_OscConfig>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d001      	beq.n	8009dfa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8009df6:	f000 f82f 	bl	8009e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009dfa:	230f      	movs	r3, #15
 8009dfc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009dfe:	2302      	movs	r3, #2
 8009e00:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e02:	2300      	movs	r3, #0
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009e06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009e0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e10:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009e12:	f107 031c 	add.w	r3, r7, #28
 8009e16:	2105      	movs	r1, #5
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7f7 f945 	bl	80010a8 <HAL_RCC_ClockConfig>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8009e24:	f000 f818 	bl	8009e58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009e28:	2302      	movs	r3, #2
 8009e2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e30:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e32:	f107 030c 	add.w	r3, r7, #12
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f7 fb24 	bl	8001484 <HAL_RCCEx_PeriphCLKConfig>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8009e42:	f000 f809 	bl	8009e58 <Error_Handler>
  }
}
 8009e46:	bf00      	nop
 8009e48:	3760      	adds	r7, #96	; 0x60
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	40023800 	.word	0x40023800
 8009e54:	40007000 	.word	0x40007000

08009e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009e5c:	bf00      	nop
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
	...

08009e68 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8009e6e:	1d3b      	adds	r3, r7, #4
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	605a      	str	r2, [r3, #4]
 8009e76:	609a      	str	r2, [r3, #8]
 8009e78:	60da      	str	r2, [r3, #12]
 8009e7a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8009e80:	4b24      	ldr	r3, [pc, #144]	; (8009f14 <MX_RTC_Init+0xac>)
 8009e82:	4a25      	ldr	r2, [pc, #148]	; (8009f18 <MX_RTC_Init+0xb0>)
 8009e84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009e86:	4b23      	ldr	r3, [pc, #140]	; (8009f14 <MX_RTC_Init+0xac>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009e8c:	4b21      	ldr	r3, [pc, #132]	; (8009f14 <MX_RTC_Init+0xac>)
 8009e8e:	227f      	movs	r2, #127	; 0x7f
 8009e90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009e92:	4b20      	ldr	r3, [pc, #128]	; (8009f14 <MX_RTC_Init+0xac>)
 8009e94:	22ff      	movs	r2, #255	; 0xff
 8009e96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009e98:	4b1e      	ldr	r3, [pc, #120]	; (8009f14 <MX_RTC_Init+0xac>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <MX_RTC_Init+0xac>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009ea4:	4b1b      	ldr	r3, [pc, #108]	; (8009f14 <MX_RTC_Init+0xac>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009eaa:	481a      	ldr	r0, [pc, #104]	; (8009f14 <MX_RTC_Init+0xac>)
 8009eac:	f7f7 fbcc 	bl	8001648 <HAL_RTC_Init>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d001      	beq.n	8009eba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8009eb6:	f7ff ffcf 	bl	8009e58 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009ece:	1d3b      	adds	r3, r7, #4
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	480f      	ldr	r0, [pc, #60]	; (8009f14 <MX_RTC_Init+0xac>)
 8009ed6:	f7f7 fc48 	bl	800176a <HAL_RTC_SetTime>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d001      	beq.n	8009ee4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8009ee0:	f7ff ffba 	bl	8009e58 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8009ee8:	2310      	movs	r3, #16
 8009eea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8009eec:	2301      	movs	r3, #1
 8009eee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x19;
 8009ef0:	2319      	movs	r3, #25
 8009ef2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009ef4:	463b      	mov	r3, r7
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4806      	ldr	r0, [pc, #24]	; (8009f14 <MX_RTC_Init+0xac>)
 8009efc:	f7f7 fcf2 	bl	80018e4 <HAL_RTC_SetDate>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8009f06:	f7ff ffa7 	bl	8009e58 <Error_Handler>
  }

}
 8009f0a:	bf00      	nop
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20000518 	.word	0x20000518
 8009f18:	40002800 	.word	0x40002800

08009f1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a05      	ldr	r2, [pc, #20]	; (8009f40 <HAL_RTC_MspInit+0x24>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d102      	bne.n	8009f34 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <HAL_RTC_MspInit+0x28>)
 8009f30:	2201      	movs	r2, #1
 8009f32:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	40002800 	.word	0x40002800
 8009f44:	42470e3c 	.word	0x42470e3c

08009f48 <scr_setTextWindow>:
void scr_setfullTextWindow() {
	cur_x_ofs = 0; cur_y_ofs = 0;
	cur_width = 320/FONT_STEP_X; cur_height = 240/FONT_STEP_Y;
}

void scr_setTextWindow(uint16_t x, uint16_t y, uint8_t maxCol, uint8_t maxRow) {
 8009f48:	b490      	push	{r4, r7}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	461a      	mov	r2, r3
 8009f56:	4623      	mov	r3, r4
 8009f58:	80fb      	strh	r3, [r7, #6]
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	80bb      	strh	r3, [r7, #4]
 8009f5e:	460b      	mov	r3, r1
 8009f60:	70fb      	strb	r3, [r7, #3]
 8009f62:	4613      	mov	r3, r2
 8009f64:	70bb      	strb	r3, [r7, #2]
	cur_x_ofs = x; cur_y_ofs = y;
 8009f66:	4a19      	ldr	r2, [pc, #100]	; (8009fcc <scr_setTextWindow+0x84>)
 8009f68:	88fb      	ldrh	r3, [r7, #6]
 8009f6a:	8013      	strh	r3, [r2, #0]
 8009f6c:	4a18      	ldr	r2, [pc, #96]	; (8009fd0 <scr_setTextWindow+0x88>)
 8009f6e:	88bb      	ldrh	r3, [r7, #4]
 8009f70:	8013      	strh	r3, [r2, #0]
	cur_width = ((maxCol*FONT_STEP_X+x) >= 320)? (320-x)/FONT_STEP_X:maxCol;
 8009f72:	78fb      	ldrb	r3, [r7, #3]
 8009f74:	00da      	lsls	r2, r3, #3
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	4413      	add	r3, r2
 8009f7a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009f7e:	db08      	blt.n	8009f92 <scr_setTextWindow+0x4a>
 8009f80:	88fb      	ldrh	r3, [r7, #6]
 8009f82:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	da00      	bge.n	8009f8c <scr_setTextWindow+0x44>
 8009f8a:	3307      	adds	r3, #7
 8009f8c:	10db      	asrs	r3, r3, #3
 8009f8e:	b25b      	sxtb	r3, r3
 8009f90:	e001      	b.n	8009f96 <scr_setTextWindow+0x4e>
 8009f92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f96:	4a0f      	ldr	r2, [pc, #60]	; (8009fd4 <scr_setTextWindow+0x8c>)
 8009f98:	7013      	strb	r3, [r2, #0]
	cur_height = ((maxRow*FONT_STEP_Y+y) >= 240)? (240-y)/FONT_STEP_Y:maxRow;
 8009f9a:	78bb      	ldrb	r3, [r7, #2]
 8009f9c:	011a      	lsls	r2, r3, #4
 8009f9e:	88bb      	ldrh	r3, [r7, #4]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	2bef      	cmp	r3, #239	; 0xef
 8009fa4:	dd08      	ble.n	8009fb8 <scr_setTextWindow+0x70>
 8009fa6:	88bb      	ldrh	r3, [r7, #4]
 8009fa8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	da00      	bge.n	8009fb2 <scr_setTextWindow+0x6a>
 8009fb0:	330f      	adds	r3, #15
 8009fb2:	111b      	asrs	r3, r3, #4
 8009fb4:	b25b      	sxtb	r3, r3
 8009fb6:	e001      	b.n	8009fbc <scr_setTextWindow+0x74>
 8009fb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fbc:	4a06      	ldr	r2, [pc, #24]	; (8009fd8 <scr_setTextWindow+0x90>)
 8009fbe:	7013      	strb	r3, [r2, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bc90      	pop	{r4, r7}
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20000046 	.word	0x20000046
 8009fd0:	20000048 	.word	0x20000048
 8009fd4:	2000000a 	.word	0x2000000a
 8009fd8:	2000000b 	.word	0x2000000b

08009fdc <scr_setScrollOn>:

void scr_setScrollOn(uint8_t flag) {
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71fb      	strb	r3, [r7, #7]
	flagScroll = flag;
 8009fe6:	4a04      	ldr	r2, [pc, #16]	; (8009ff8 <scr_setScrollOn+0x1c>)
 8009fe8:	79fb      	ldrb	r3, [r7, #7]
 8009fea:	7013      	strb	r3, [r2, #0]
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	2000000c 	.word	0x2000000c

08009ffc <scr_gotoxy>:

void scr_gotoxy(int8_t col, int8_t row) {
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	460a      	mov	r2, r1
 800a006:	71fb      	strb	r3, [r7, #7]
 800a008:	4613      	mov	r3, r2
 800a00a:	71bb      	strb	r3, [r7, #6]
	cur_col = col; cur_row = row;
 800a00c:	4a05      	ldr	r2, [pc, #20]	; (800a024 <scr_gotoxy+0x28>)
 800a00e:	79fb      	ldrb	r3, [r7, #7]
 800a010:	7013      	strb	r3, [r2, #0]
 800a012:	4a05      	ldr	r2, [pc, #20]	; (800a028 <scr_gotoxy+0x2c>)
 800a014:	79bb      	ldrb	r3, [r7, #6]
 800a016:	7013      	strb	r3, [r2, #0]
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	20000044 	.word	0x20000044
 800a028:	20000045 	.word	0x20000045

0800a02c <scr_fontColor>:

int8_t scr_getCurCol(void) {
	return cur_col;
}

void scr_fontColor(unsigned short fontC, unsigned short fontBkC) {
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	460a      	mov	r2, r1
 800a036:	80fb      	strh	r3, [r7, #6]
 800a038:	4613      	mov	r3, r2
 800a03a:	80bb      	strh	r3, [r7, #4]
	fontBkColor = fix_fontBkColor = fontBkC;	fontColor = fix_fontColor = fontC;
 800a03c:	4a09      	ldr	r2, [pc, #36]	; (800a064 <scr_fontColor+0x38>)
 800a03e:	88bb      	ldrh	r3, [r7, #4]
 800a040:	8013      	strh	r3, [r2, #0]
 800a042:	4b08      	ldr	r3, [pc, #32]	; (800a064 <scr_fontColor+0x38>)
 800a044:	881a      	ldrh	r2, [r3, #0]
 800a046:	4b08      	ldr	r3, [pc, #32]	; (800a068 <scr_fontColor+0x3c>)
 800a048:	801a      	strh	r2, [r3, #0]
 800a04a:	4a08      	ldr	r2, [pc, #32]	; (800a06c <scr_fontColor+0x40>)
 800a04c:	88fb      	ldrh	r3, [r7, #6]
 800a04e:	8013      	strh	r3, [r2, #0]
 800a050:	4b06      	ldr	r3, [pc, #24]	; (800a06c <scr_fontColor+0x40>)
 800a052:	881a      	ldrh	r2, [r3, #0]
 800a054:	4b06      	ldr	r3, [pc, #24]	; (800a070 <scr_fontColor+0x44>)
 800a056:	801a      	strh	r2, [r3, #0]
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	20000042 	.word	0x20000042
 800a068:	20000040 	.word	0x20000040
 800a06c:	20000008 	.word	0x20000008
 800a070:	20000006 	.word	0x20000006

0800a074 <scr_putc>:
	fontColor = fix_fontColor;	fontBkColor = fix_fontBkColor;
}


void scr_putc(char c)
{
 800a074:	b590      	push	{r4, r7, lr}
 800a076:	b085      	sub	sp, #20
 800a078:	af02      	add	r7, sp, #8
 800a07a:	4603      	mov	r3, r0
 800a07c:	71fb      	strb	r3, [r7, #7]
	if(cur_col >= cur_width) {
 800a07e:	4b47      	ldr	r3, [pc, #284]	; (800a19c <scr_putc+0x128>)
 800a080:	f993 2000 	ldrsb.w	r2, [r3]
 800a084:	4b46      	ldr	r3, [pc, #280]	; (800a1a0 <scr_putc+0x12c>)
 800a086:	f993 3000 	ldrsb.w	r3, [r3]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	db0f      	blt.n	800a0ae <scr_putc+0x3a>
		if(flagScroll) { cur_col = 0; cur_row++;
 800a08e:	4b45      	ldr	r3, [pc, #276]	; (800a1a4 <scr_putc+0x130>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00b      	beq.n	800a0ae <scr_putc+0x3a>
 800a096:	4b41      	ldr	r3, [pc, #260]	; (800a19c <scr_putc+0x128>)
 800a098:	2200      	movs	r2, #0
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	4b42      	ldr	r3, [pc, #264]	; (800a1a8 <scr_putc+0x134>)
 800a09e:	f993 3000 	ldrsb.w	r3, [r3]
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	b25a      	sxtb	r2, r3
 800a0aa:	4b3f      	ldr	r3, [pc, #252]	; (800a1a8 <scr_putc+0x134>)
 800a0ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if(cur_row >= cur_height) {
 800a0ae:	4b3e      	ldr	r3, [pc, #248]	; (800a1a8 <scr_putc+0x134>)
 800a0b0:	f993 2000 	ldrsb.w	r2, [r3]
 800a0b4:	4b3d      	ldr	r3, [pc, #244]	; (800a1ac <scr_putc+0x138>)
 800a0b6:	f993 3000 	ldrsb.w	r3, [r3]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	db06      	blt.n	800a0cc <scr_putc+0x58>
		if(flagScroll) cur_row = 0;
 800a0be:	4b39      	ldr	r3, [pc, #228]	; (800a1a4 <scr_putc+0x130>)
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <scr_putc+0x58>
 800a0c6:	4b38      	ldr	r3, [pc, #224]	; (800a1a8 <scr_putc+0x134>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	701a      	strb	r2, [r3, #0]
	}

	switch(c) {
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	2b0a      	cmp	r3, #10
 800a0d0:	d010      	beq.n	800a0f4 <scr_putc+0x80>
 800a0d2:	2b0d      	cmp	r3, #13
 800a0d4:	d05c      	beq.n	800a190 <scr_putc+0x11c>
 800a0d6:	2b09      	cmp	r3, #9
 800a0d8:	d119      	bne.n	800a10e <scr_putc+0x9a>
	 case '\t':	cur_col = ((cur_col+8) >> 3) << 3;	break;
 800a0da:	4b30      	ldr	r3, [pc, #192]	; (800a19c <scr_putc+0x128>)
 800a0dc:	f993 3000 	ldrsb.w	r3, [r3]
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	b25b      	sxtb	r3, r3
 800a0e8:	f023 0307 	bic.w	r3, r3, #7
 800a0ec:	b25a      	sxtb	r2, r3
 800a0ee:	4b2b      	ldr	r3, [pc, #172]	; (800a19c <scr_putc+0x128>)
 800a0f0:	701a      	strb	r2, [r3, #0]
 800a0f2:	e04e      	b.n	800a192 <scr_putc+0x11e>
	 case '\n': cur_row++; cur_col = 0; break;
 800a0f4:	4b2c      	ldr	r3, [pc, #176]	; (800a1a8 <scr_putc+0x134>)
 800a0f6:	f993 3000 	ldrsb.w	r3, [r3]
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	b25a      	sxtb	r2, r3
 800a102:	4b29      	ldr	r3, [pc, #164]	; (800a1a8 <scr_putc+0x134>)
 800a104:	701a      	strb	r2, [r3, #0]
 800a106:	4b25      	ldr	r3, [pc, #148]	; (800a19c <scr_putc+0x128>)
 800a108:	2200      	movs	r2, #0
 800a10a:	701a      	strb	r2, [r3, #0]
 800a10c:	e041      	b.n	800a192 <scr_putc+0x11e>
	 case '\r': break;
	 default:
		 if(cur_col >= 0 && cur_col < cur_width && cur_row >= 0 && cur_row < cur_height) {
 800a10e:	4b23      	ldr	r3, [pc, #140]	; (800a19c <scr_putc+0x128>)
 800a110:	f993 3000 	ldrsb.w	r3, [r3]
 800a114:	2b00      	cmp	r3, #0
 800a116:	db31      	blt.n	800a17c <scr_putc+0x108>
 800a118:	4b20      	ldr	r3, [pc, #128]	; (800a19c <scr_putc+0x128>)
 800a11a:	f993 2000 	ldrsb.w	r2, [r3]
 800a11e:	4b20      	ldr	r3, [pc, #128]	; (800a1a0 <scr_putc+0x12c>)
 800a120:	f993 3000 	ldrsb.w	r3, [r3]
 800a124:	429a      	cmp	r2, r3
 800a126:	da29      	bge.n	800a17c <scr_putc+0x108>
 800a128:	4b1f      	ldr	r3, [pc, #124]	; (800a1a8 <scr_putc+0x134>)
 800a12a:	f993 3000 	ldrsb.w	r3, [r3]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	db24      	blt.n	800a17c <scr_putc+0x108>
 800a132:	4b1d      	ldr	r3, [pc, #116]	; (800a1a8 <scr_putc+0x134>)
 800a134:	f993 2000 	ldrsb.w	r2, [r3]
 800a138:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <scr_putc+0x138>)
 800a13a:	f993 3000 	ldrsb.w	r3, [r3]
 800a13e:	429a      	cmp	r2, r3
 800a140:	da1c      	bge.n	800a17c <scr_putc+0x108>
			 LCD_PutChar((uint16_t)cur_col*FONT_STEP_X+cur_x_ofs, (uint16_t)cur_row*FONT_STEP_Y+cur_y_ofs, c, fontColor, fontBkColor);
 800a142:	4b16      	ldr	r3, [pc, #88]	; (800a19c <scr_putc+0x128>)
 800a144:	f993 3000 	ldrsb.w	r3, [r3]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	00db      	lsls	r3, r3, #3
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	4b18      	ldr	r3, [pc, #96]	; (800a1b0 <scr_putc+0x13c>)
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	4413      	add	r3, r2
 800a154:	b298      	uxth	r0, r3
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <scr_putc+0x134>)
 800a158:	f993 3000 	ldrsb.w	r3, [r3]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	b29a      	uxth	r2, r3
 800a162:	4b14      	ldr	r3, [pc, #80]	; (800a1b4 <scr_putc+0x140>)
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	4413      	add	r3, r2
 800a168:	b299      	uxth	r1, r3
 800a16a:	4b13      	ldr	r3, [pc, #76]	; (800a1b8 <scr_putc+0x144>)
 800a16c:	881c      	ldrh	r4, [r3, #0]
 800a16e:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <scr_putc+0x148>)
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	79fa      	ldrb	r2, [r7, #7]
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	4623      	mov	r3, r4
 800a178:	f7ff fb9e 	bl	80098b8 <LCD_PutChar>
		 }

		 cur_col++;
 800a17c:	4b07      	ldr	r3, [pc, #28]	; (800a19c <scr_putc+0x128>)
 800a17e:	f993 3000 	ldrsb.w	r3, [r3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	3301      	adds	r3, #1
 800a186:	b2db      	uxtb	r3, r3
 800a188:	b25a      	sxtb	r2, r3
 800a18a:	4b04      	ldr	r3, [pc, #16]	; (800a19c <scr_putc+0x128>)
 800a18c:	701a      	strb	r2, [r3, #0]
	}
}
 800a18e:	e000      	b.n	800a192 <scr_putc+0x11e>
	 case '\r': break;
 800a190:	bf00      	nop
}
 800a192:	bf00      	nop
 800a194:	370c      	adds	r7, #12
 800a196:	46bd      	mov	sp, r7
 800a198:	bd90      	pop	{r4, r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000044 	.word	0x20000044
 800a1a0:	2000000a 	.word	0x2000000a
 800a1a4:	2000000c 	.word	0x2000000c
 800a1a8:	20000045 	.word	0x20000045
 800a1ac:	2000000b 	.word	0x2000000b
 800a1b0:	20000046 	.word	0x20000046
 800a1b4:	20000048 	.word	0x20000048
 800a1b8:	20000006 	.word	0x20000006
 800a1bc:	20000040 	.word	0x20000040

0800a1c0 <scr_puts>:

void scr_puts(const char* str) {
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
	while (*str)
 800a1c8:	e006      	b.n	800a1d8 <scr_puts+0x18>
		scr_putc(*str++);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff ff4e 	bl	800a074 <scr_putc>
	while (*str)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f4      	bne.n	800a1ca <scr_puts+0xa>
}
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <win_showWindow>:
	}
}

//-------------------------------------------------
static void win_showWindow(uint16_t x0, uint16_t y0, uint8_t colSz, uint8_t rowSz,
                           uint16_t cBorder, uint16_t cFill, uint16_t cText) {
 800a1e8:	b590      	push	{r4, r7, lr}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	80fb      	strh	r3, [r7, #6]
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	80bb      	strh	r3, [r7, #4]
 800a1fe:	460b      	mov	r3, r1
 800a200:	70fb      	strb	r3, [r7, #3]
 800a202:	4613      	mov	r3, r2
 800a204:	70bb      	strb	r3, [r7, #2]
 uint16_t x1 = x0+(uint16_t)colSz*FONT_STEP_X+10;
 800a206:	78fb      	ldrb	r3, [r7, #3]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	88fb      	ldrh	r3, [r7, #6]
 800a210:	4413      	add	r3, r2
 800a212:	b29b      	uxth	r3, r3
 800a214:	330a      	adds	r3, #10
 800a216:	81fb      	strh	r3, [r7, #14]
 uint16_t y1 = y0+(uint16_t)rowSz*FONT_STEP_Y+10;
 800a218:	78bb      	ldrb	r3, [r7, #2]
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	011b      	lsls	r3, r3, #4
 800a21e:	b29a      	uxth	r2, r3
 800a220:	88bb      	ldrh	r3, [r7, #4]
 800a222:	4413      	add	r3, r2
 800a224:	b29b      	uxth	r3, r3
 800a226:	330a      	adds	r3, #10
 800a228:	81bb      	strh	r3, [r7, #12]
	GUI_Rectangle(x0, y0, x1, y1, cBorder, false);
 800a22a:	89bc      	ldrh	r4, [r7, #12]
 800a22c:	89fa      	ldrh	r2, [r7, #14]
 800a22e:	88b9      	ldrh	r1, [r7, #4]
 800a230:	88f8      	ldrh	r0, [r7, #6]
 800a232:	2300      	movs	r3, #0
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	8c3b      	ldrh	r3, [r7, #32]
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	4623      	mov	r3, r4
 800a23c:	f7ff fd13 	bl	8009c66 <GUI_Rectangle>
	GUI_Rectangle(x0+1, y0+1, x1-1, y1-1, cBorder, false);
 800a240:	88fb      	ldrh	r3, [r7, #6]
 800a242:	3301      	adds	r3, #1
 800a244:	b298      	uxth	r0, r3
 800a246:	88bb      	ldrh	r3, [r7, #4]
 800a248:	3301      	adds	r3, #1
 800a24a:	b299      	uxth	r1, r3
 800a24c:	89fb      	ldrh	r3, [r7, #14]
 800a24e:	3b01      	subs	r3, #1
 800a250:	b29a      	uxth	r2, r3
 800a252:	89bb      	ldrh	r3, [r7, #12]
 800a254:	3b01      	subs	r3, #1
 800a256:	b29c      	uxth	r4, r3
 800a258:	2300      	movs	r3, #0
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	8c3b      	ldrh	r3, [r7, #32]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	4623      	mov	r3, r4
 800a262:	f7ff fd00 	bl	8009c66 <GUI_Rectangle>
	GUI_Rectangle(x0+2, y0+2, x1-2, y1-2, cBorder, false);
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	3302      	adds	r3, #2
 800a26a:	b298      	uxth	r0, r3
 800a26c:	88bb      	ldrh	r3, [r7, #4]
 800a26e:	3302      	adds	r3, #2
 800a270:	b299      	uxth	r1, r3
 800a272:	89fb      	ldrh	r3, [r7, #14]
 800a274:	3b02      	subs	r3, #2
 800a276:	b29a      	uxth	r2, r3
 800a278:	89bb      	ldrh	r3, [r7, #12]
 800a27a:	3b02      	subs	r3, #2
 800a27c:	b29c      	uxth	r4, r3
 800a27e:	2300      	movs	r3, #0
 800a280:	9301      	str	r3, [sp, #4]
 800a282:	8c3b      	ldrh	r3, [r7, #32]
 800a284:	9300      	str	r3, [sp, #0]
 800a286:	4623      	mov	r3, r4
 800a288:	f7ff fced 	bl	8009c66 <GUI_Rectangle>
	GUI_Rectangle(x0+3, y0+3, x1-3, y1-3, cFill, true);
 800a28c:	88fb      	ldrh	r3, [r7, #6]
 800a28e:	3303      	adds	r3, #3
 800a290:	b298      	uxth	r0, r3
 800a292:	88bb      	ldrh	r3, [r7, #4]
 800a294:	3303      	adds	r3, #3
 800a296:	b299      	uxth	r1, r3
 800a298:	89fb      	ldrh	r3, [r7, #14]
 800a29a:	3b03      	subs	r3, #3
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	89bb      	ldrh	r3, [r7, #12]
 800a2a0:	3b03      	subs	r3, #3
 800a2a2:	b29c      	uxth	r4, r3
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	4623      	mov	r3, r4
 800a2ae:	f7ff fcda 	bl	8009c66 <GUI_Rectangle>
	scr_setTextWindow(x0+5, y0+5, (x1-x0-10)/FONT_STEP_X, (y1-y0-10)/FONT_STEP_Y);
 800a2b2:	88fb      	ldrh	r3, [r7, #6]
 800a2b4:	3305      	adds	r3, #5
 800a2b6:	b298      	uxth	r0, r3
 800a2b8:	88bb      	ldrh	r3, [r7, #4]
 800a2ba:	3305      	adds	r3, #5
 800a2bc:	b299      	uxth	r1, r3
 800a2be:	89fa      	ldrh	r2, [r7, #14]
 800a2c0:	88fb      	ldrh	r3, [r7, #6]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	3b0a      	subs	r3, #10
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da00      	bge.n	800a2cc <win_showWindow+0xe4>
 800a2ca:	3307      	adds	r3, #7
 800a2cc:	10db      	asrs	r3, r3, #3
 800a2ce:	b2dc      	uxtb	r4, r3
 800a2d0:	89ba      	ldrh	r2, [r7, #12]
 800a2d2:	88bb      	ldrh	r3, [r7, #4]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	3b0a      	subs	r3, #10
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	da00      	bge.n	800a2de <win_showWindow+0xf6>
 800a2dc:	330f      	adds	r3, #15
 800a2de:	111b      	asrs	r3, r3, #4
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	f7ff fe30 	bl	8009f48 <scr_setTextWindow>
 scr_fontColor(cText, cFill);
 800a2e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a2ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff fe9c 	bl	800a02c <scr_fontColor>
}
 800a2f4:	bf00      	nop
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd90      	pop	{r4, r7, pc}

0800a2fc <win_showMsgWin>:
 win_showWindow(FONT_STEP_X*4-5, FONT_STEP_Y*4-5, 32, 7, Yellow, Red, Black);
 scr_gotoxy(0, 0);
 scr_setScrollOn(true);
}

void win_showMsgWin(void) {
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af04      	add	r7, sp, #16
 win_showWindow(FONT_STEP_X*4-5, FONT_STEP_Y*4-5, 32, 8, Magenta, Blue2, Cyan);
 800a302:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800a306:	9302      	str	r3, [sp, #8]
 800a308:	f240 531f 	movw	r3, #1311	; 0x51f
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	2308      	movs	r3, #8
 800a316:	2220      	movs	r2, #32
 800a318:	213b      	movs	r1, #59	; 0x3b
 800a31a:	201b      	movs	r0, #27
 800a31c:	f7ff ff64 	bl	800a1e8 <win_showWindow>
 scr_gotoxy(0, 0);
 800a320:	2100      	movs	r1, #0
 800a322:	2000      	movs	r0, #0
 800a324:	f7ff fe6a 	bl	8009ffc <scr_gotoxy>
 scr_setScrollOn(true);
 800a328:	2001      	movs	r0, #1
 800a32a:	f7ff fe57 	bl	8009fdc <scr_setScrollOn>
}
 800a32e:	bf00      	nop
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a33e:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <SD_CheckStatus+0x38>)
 800a340:	2201      	movs	r2, #1
 800a342:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a344:	f7fa ff10 	bl	8005168 <BSP_SD_GetCardState>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d107      	bne.n	800a35e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a34e:	4b07      	ldr	r3, [pc, #28]	; (800a36c <SD_CheckStatus+0x38>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f023 0301 	bic.w	r3, r3, #1
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	4b04      	ldr	r3, [pc, #16]	; (800a36c <SD_CheckStatus+0x38>)
 800a35c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a35e:	4b03      	ldr	r3, [pc, #12]	; (800a36c <SD_CheckStatus+0x38>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b2db      	uxtb	r3, r3
}
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	2000000d 	.word	0x2000000d

0800a370 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800a37a:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <SD_initialize+0x38>)
 800a37c:	2201      	movs	r2, #1
 800a37e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a380:	f7fa fe90 	bl	80050a4 <BSP_SD_Init>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d107      	bne.n	800a39a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a38a:	79fb      	ldrb	r3, [r7, #7]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7ff ffd1 	bl	800a334 <SD_CheckStatus>
 800a392:	4603      	mov	r3, r0
 800a394:	461a      	mov	r2, r3
 800a396:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <SD_initialize+0x38>)
 800a398:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800a39a:	4b03      	ldr	r3, [pc, #12]	; (800a3a8 <SD_initialize+0x38>)
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b2db      	uxtb	r3, r3
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	2000000d 	.word	0x2000000d

0800a3ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a3b6:	79fb      	ldrb	r3, [r7, #7]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff ffbb 	bl	800a334 <SD_CheckStatus>
 800a3be:	4603      	mov	r3, r0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	607a      	str	r2, [r7, #4]
 800a3d2:	603b      	str	r3, [r7, #0]
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e0:	683a      	ldr	r2, [r7, #0]
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	68b8      	ldr	r0, [r7, #8]
 800a3e6:	f7fa fe83 	bl	80050f0 <BSP_SD_ReadBlocks>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d107      	bne.n	800a400 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a3f0:	bf00      	nop
 800a3f2:	f7fa feb9 	bl	8005168 <BSP_SD_GetCardState>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1fa      	bne.n	800a3f2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a400:	7dfb      	ldrb	r3, [r7, #23]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3718      	adds	r7, #24
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b086      	sub	sp, #24
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
 800a416:	4603      	mov	r3, r0
 800a418:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a41e:	f04f 33ff 	mov.w	r3, #4294967295
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	6879      	ldr	r1, [r7, #4]
 800a426:	68b8      	ldr	r0, [r7, #8]
 800a428:	f7fa fe80 	bl	800512c <BSP_SD_WriteBlocks>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d107      	bne.n	800a442 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a432:	bf00      	nop
 800a434:	f7fa fe98 	bl	8005168 <BSP_SD_GetCardState>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1fa      	bne.n	800a434 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3718      	adds	r7, #24
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08c      	sub	sp, #48	; 0x30
 800a450:	af00      	add	r7, sp, #0
 800a452:	4603      	mov	r3, r0
 800a454:	603a      	str	r2, [r7, #0]
 800a456:	71fb      	strb	r3, [r7, #7]
 800a458:	460b      	mov	r3, r1
 800a45a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a462:	4b25      	ldr	r3, [pc, #148]	; (800a4f8 <SD_ioctl+0xac>)
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	b2db      	uxtb	r3, r3
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d001      	beq.n	800a474 <SD_ioctl+0x28>
 800a470:	2303      	movs	r3, #3
 800a472:	e03c      	b.n	800a4ee <SD_ioctl+0xa2>

  switch (cmd)
 800a474:	79bb      	ldrb	r3, [r7, #6]
 800a476:	2b03      	cmp	r3, #3
 800a478:	d834      	bhi.n	800a4e4 <SD_ioctl+0x98>
 800a47a:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <SD_ioctl+0x34>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a491 	.word	0x0800a491
 800a484:	0800a499 	.word	0x0800a499
 800a488:	0800a4b1 	.word	0x0800a4b1
 800a48c:	0800a4cb 	.word	0x0800a4cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a490:	2300      	movs	r3, #0
 800a492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a496:	e028      	b.n	800a4ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a498:	f107 030c 	add.w	r3, r7, #12
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fa fe73 	bl	8005188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4ae:	e01c      	b.n	800a4ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4b0:	f107 030c 	add.w	r3, r7, #12
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fa fe67 	bl	8005188 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4c8:	e00f      	b.n	800a4ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a4ca:	f107 030c 	add.w	r3, r7, #12
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fa fe5a 	bl	8005188 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	0a5a      	lsrs	r2, r3, #9
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a4e2:	e002      	b.n	800a4ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a4ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3730      	adds	r7, #48	; 0x30
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	2000000d 	.word	0x2000000d

0800a4fc <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800a500:	4b0c      	ldr	r3, [pc, #48]	; (800a534 <MX_SDIO_SD_Init+0x38>)
 800a502:	4a0d      	ldr	r2, [pc, #52]	; (800a538 <MX_SDIO_SD_Init+0x3c>)
 800a504:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <MX_SDIO_SD_Init+0x38>)
 800a508:	2200      	movs	r2, #0
 800a50a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800a50c:	4b09      	ldr	r3, [pc, #36]	; (800a534 <MX_SDIO_SD_Init+0x38>)
 800a50e:	2200      	movs	r2, #0
 800a510:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a512:	4b08      	ldr	r3, [pc, #32]	; (800a534 <MX_SDIO_SD_Init+0x38>)
 800a514:	2200      	movs	r2, #0
 800a516:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800a518:	4b06      	ldr	r3, [pc, #24]	; (800a534 <MX_SDIO_SD_Init+0x38>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <MX_SDIO_SD_Init+0x38>)
 800a520:	2200      	movs	r2, #0
 800a522:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800a524:	4b03      	ldr	r3, [pc, #12]	; (800a534 <MX_SDIO_SD_Init+0x38>)
 800a526:	2200      	movs	r2, #0
 800a528:	619a      	str	r2, [r3, #24]

}
 800a52a:	bf00      	nop
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20000538 	.word	0x20000538
 800a538:	40012c00 	.word	0x40012c00

0800a53c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08a      	sub	sp, #40	; 0x28
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a544:	f107 0314 	add.w	r3, r7, #20
 800a548:	2200      	movs	r2, #0
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	605a      	str	r2, [r3, #4]
 800a54e:	609a      	str	r2, [r3, #8]
 800a550:	60da      	str	r2, [r3, #12]
 800a552:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a2c      	ldr	r2, [pc, #176]	; (800a60c <HAL_SD_MspInit+0xd0>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d152      	bne.n	800a604 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a55e:	2300      	movs	r3, #0
 800a560:	613b      	str	r3, [r7, #16]
 800a562:	4b2b      	ldr	r3, [pc, #172]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a566:	4a2a      	ldr	r2, [pc, #168]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a56c:	6453      	str	r3, [r2, #68]	; 0x44
 800a56e:	4b28      	ldr	r3, [pc, #160]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a576:	613b      	str	r3, [r7, #16]
 800a578:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	4b24      	ldr	r3, [pc, #144]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	4a23      	ldr	r2, [pc, #140]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a584:	f043 0304 	orr.w	r3, r3, #4
 800a588:	6313      	str	r3, [r2, #48]	; 0x30
 800a58a:	4b21      	ldr	r3, [pc, #132]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58e:	f003 0304 	and.w	r3, r3, #4
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a596:	2300      	movs	r3, #0
 800a598:	60bb      	str	r3, [r7, #8]
 800a59a:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a59e:	4a1c      	ldr	r2, [pc, #112]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a5a0:	f043 0308 	orr.w	r3, r3, #8
 800a5a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5a6:	4b1a      	ldr	r3, [pc, #104]	; (800a610 <HAL_SD_MspInit+0xd4>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	f003 0308 	and.w	r3, r3, #8
 800a5ae:	60bb      	str	r3, [r7, #8]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800a5b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800a5b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a5c4:	230c      	movs	r3, #12
 800a5c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5c8:	f107 0314 	add.w	r3, r7, #20
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4811      	ldr	r0, [pc, #68]	; (800a614 <HAL_SD_MspInit+0xd8>)
 800a5d0:	f7f6 f942 	bl	8000858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d8:	2302      	movs	r3, #2
 800a5da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a5e4:	230c      	movs	r3, #12
 800a5e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a5e8:	f107 0314 	add.w	r3, r7, #20
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	480a      	ldr	r0, [pc, #40]	; (800a618 <HAL_SD_MspInit+0xdc>)
 800a5f0:	f7f6 f932 	bl	8000858 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	2031      	movs	r0, #49	; 0x31
 800a5fa:	f7f6 f8d4 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a5fe:	2031      	movs	r0, #49	; 0x31
 800a600:	f7f6 f8ed 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800a604:	bf00      	nop
 800a606:	3728      	adds	r7, #40	; 0x28
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	40012c00 	.word	0x40012c00
 800a610:	40023800 	.word	0x40023800
 800a614:	40020800 	.word	0x40020800
 800a618:	40020c00 	.word	0x40020c00

0800a61c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a622:	2300      	movs	r3, #0
 800a624:	607b      	str	r3, [r7, #4]
 800a626:	4b13      	ldr	r3, [pc, #76]	; (800a674 <HAL_MspInit+0x58>)
 800a628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62a:	4a12      	ldr	r2, [pc, #72]	; (800a674 <HAL_MspInit+0x58>)
 800a62c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a630:	6453      	str	r3, [r2, #68]	; 0x44
 800a632:	4b10      	ldr	r3, [pc, #64]	; (800a674 <HAL_MspInit+0x58>)
 800a634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a63a:	607b      	str	r3, [r7, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a63e:	2300      	movs	r3, #0
 800a640:	603b      	str	r3, [r7, #0]
 800a642:	4b0c      	ldr	r3, [pc, #48]	; (800a674 <HAL_MspInit+0x58>)
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	4a0b      	ldr	r2, [pc, #44]	; (800a674 <HAL_MspInit+0x58>)
 800a648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a64c:	6413      	str	r3, [r2, #64]	; 0x40
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <HAL_MspInit+0x58>)
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a656:	603b      	str	r3, [r7, #0]
 800a658:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800a65a:	2200      	movs	r2, #0
 800a65c:	2100      	movs	r1, #0
 800a65e:	2005      	movs	r0, #5
 800a660:	f7f6 f8a1 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800a664:	2005      	movs	r0, #5
 800a666:	f7f6 f8ba 	bl	80007de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a66a:	bf00      	nop
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	40023800 	.word	0x40023800

0800a678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a67c:	bf00      	nop
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a686:	b480      	push	{r7}
 800a688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a68a:	e7fe      	b.n	800a68a <HardFault_Handler+0x4>

0800a68c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a690:	e7fe      	b.n	800a690 <MemManage_Handler+0x4>

0800a692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a692:	b480      	push	{r7}
 800a694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a696:	e7fe      	b.n	800a696 <BusFault_Handler+0x4>

0800a698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a698:	b480      	push	{r7}
 800a69a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a69c:	e7fe      	b.n	800a69c <UsageFault_Handler+0x4>

0800a69e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a6a2:	bf00      	nop
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a6b0:	bf00      	nop
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a6be:	bf00      	nop
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a6cc:	f7f5 ff4e 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a6d0:	bf00      	nop
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800a6d8:	bf00      	nop
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a6e8:	4802      	ldr	r0, [pc, #8]	; (800a6f4 <TIM2_IRQHandler+0x10>)
 800a6ea:	f7f8 fe38 	bl	800335e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a6ee:	bf00      	nop
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	2000067c 	.word	0x2000067c

0800a6f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a6fc:	4802      	ldr	r0, [pc, #8]	; (800a708 <TIM3_IRQHandler+0x10>)
 800a6fe:	f7f8 fe2e 	bl	800335e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a702:	bf00      	nop
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	2000063c 	.word	0x2000063c

0800a70c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a710:	4802      	ldr	r0, [pc, #8]	; (800a71c <TIM4_IRQHandler+0x10>)
 800a712:	f7f8 fe24 	bl	800335e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a716:	bf00      	nop
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	200005bc 	.word	0x200005bc

0800a720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a724:	4802      	ldr	r0, [pc, #8]	; (800a730 <USART1_IRQHandler+0x10>)
 800a726:	f7f9 f9eb 	bl	8003b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a72a:	bf00      	nop
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	200006bc 	.word	0x200006bc

0800a734 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a738:	4802      	ldr	r0, [pc, #8]	; (800a744 <SDIO_IRQHandler+0x10>)
 800a73a:	f7f7 fd73 	bl	8002224 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800a73e:	bf00      	nop
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20000538 	.word	0x20000538

0800a748 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800a74c:	4802      	ldr	r0, [pc, #8]	; (800a758 <TIM5_IRQHandler+0x10>)
 800a74e:	f7f8 fe06 	bl	800335e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800a752:	bf00      	nop
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	200005fc 	.word	0x200005fc

0800a75c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a760:	4b16      	ldr	r3, [pc, #88]	; (800a7bc <SystemInit+0x60>)
 800a762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a766:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <SystemInit+0x60>)
 800a768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a76c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a770:	4b13      	ldr	r3, [pc, #76]	; (800a7c0 <SystemInit+0x64>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a12      	ldr	r2, [pc, #72]	; (800a7c0 <SystemInit+0x64>)
 800a776:	f043 0301 	orr.w	r3, r3, #1
 800a77a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a77c:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <SystemInit+0x64>)
 800a77e:	2200      	movs	r2, #0
 800a780:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a782:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <SystemInit+0x64>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a0e      	ldr	r2, [pc, #56]	; (800a7c0 <SystemInit+0x64>)
 800a788:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a78c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a790:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a792:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <SystemInit+0x64>)
 800a794:	4a0b      	ldr	r2, [pc, #44]	; (800a7c4 <SystemInit+0x68>)
 800a796:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a798:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <SystemInit+0x64>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a08      	ldr	r2, [pc, #32]	; (800a7c0 <SystemInit+0x64>)
 800a79e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a7a4:	4b06      	ldr	r3, [pc, #24]	; (800a7c0 <SystemInit+0x64>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a7aa:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <SystemInit+0x60>)
 800a7ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a7b0:	609a      	str	r2, [r3, #8]
#endif
}
 800a7b2:	bf00      	nop
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	e000ed00 	.word	0xe000ed00
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	24003010 	.word	0x24003010

0800a7c8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a7ce:	f107 0308 	add.w	r3, r7, #8
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	605a      	str	r2, [r3, #4]
 800a7d8:	609a      	str	r2, [r3, #8]
 800a7da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a7dc:	463b      	mov	r3, r7
 800a7de:	2200      	movs	r2, #0
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800a7e4:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <MX_TIM2_Init+0x94>)
 800a7e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a7ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1799;
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <MX_TIM2_Init+0x94>)
 800a7ee:	f240 7207 	movw	r2, #1799	; 0x707
 800a7f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7f4:	4b19      	ldr	r3, [pc, #100]	; (800a85c <MX_TIM2_Init+0x94>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800a7fa:	4b18      	ldr	r3, [pc, #96]	; (800a85c <MX_TIM2_Init+0x94>)
 800a7fc:	2264      	movs	r2, #100	; 0x64
 800a7fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a800:	4b16      	ldr	r3, [pc, #88]	; (800a85c <MX_TIM2_Init+0x94>)
 800a802:	2200      	movs	r2, #0
 800a804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a806:	4b15      	ldr	r3, [pc, #84]	; (800a85c <MX_TIM2_Init+0x94>)
 800a808:	2200      	movs	r2, #0
 800a80a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a80c:	4813      	ldr	r0, [pc, #76]	; (800a85c <MX_TIM2_Init+0x94>)
 800a80e:	f7f8 fd7b 	bl	8003308 <HAL_TIM_Base_Init>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800a818:	f7ff fb1e 	bl	8009e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a81c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a822:	f107 0308 	add.w	r3, r7, #8
 800a826:	4619      	mov	r1, r3
 800a828:	480c      	ldr	r0, [pc, #48]	; (800a85c <MX_TIM2_Init+0x94>)
 800a82a:	f7f8 fea0 	bl	800356e <HAL_TIM_ConfigClockSource>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800a834:	f7ff fb10 	bl	8009e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a838:	2300      	movs	r3, #0
 800a83a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a83c:	2300      	movs	r3, #0
 800a83e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a840:	463b      	mov	r3, r7
 800a842:	4619      	mov	r1, r3
 800a844:	4805      	ldr	r0, [pc, #20]	; (800a85c <MX_TIM2_Init+0x94>)
 800a846:	f7f9 f8b5 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800a850:	f7ff fb02 	bl	8009e58 <Error_Handler>
  }

}
 800a854:	bf00      	nop
 800a856:	3718      	adds	r7, #24
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	2000067c 	.word	0x2000067c

0800a860 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a866:	f107 0308 	add.w	r3, r7, #8
 800a86a:	2200      	movs	r2, #0
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	605a      	str	r2, [r3, #4]
 800a870:	609a      	str	r2, [r3, #8]
 800a872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a874:	463b      	mov	r3, r7
 800a876:	2200      	movs	r2, #0
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800a87c:	4b1d      	ldr	r3, [pc, #116]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a87e:	4a1e      	ldr	r2, [pc, #120]	; (800a8f8 <MX_TIM3_Init+0x98>)
 800a880:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 800a882:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a884:	f240 7207 	movw	r2, #1799	; 0x707
 800a888:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a88a:	4b1a      	ldr	r3, [pc, #104]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800a890:	4b18      	ldr	r3, [pc, #96]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a892:	2264      	movs	r2, #100	; 0x64
 800a894:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a896:	4b17      	ldr	r3, [pc, #92]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a898:	2200      	movs	r2, #0
 800a89a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a89c:	4b15      	ldr	r3, [pc, #84]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a8a2:	4814      	ldr	r0, [pc, #80]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a8a4:	f7f8 fd30 	bl	8003308 <HAL_TIM_Base_Init>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800a8ae:	f7ff fad3 	bl	8009e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a8b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a8b8:	f107 0308 	add.w	r3, r7, #8
 800a8bc:	4619      	mov	r1, r3
 800a8be:	480d      	ldr	r0, [pc, #52]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a8c0:	f7f8 fe55 	bl	800356e <HAL_TIM_ConfigClockSource>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800a8ca:	f7ff fac5 	bl	8009e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	4619      	mov	r1, r3
 800a8da:	4806      	ldr	r0, [pc, #24]	; (800a8f4 <MX_TIM3_Init+0x94>)
 800a8dc:	f7f9 f86a 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800a8e6:	f7ff fab7 	bl	8009e58 <Error_Handler>
  }

}
 800a8ea:	bf00      	nop
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	2000063c 	.word	0x2000063c
 800a8f8:	40000400 	.word	0x40000400

0800a8fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b086      	sub	sp, #24
 800a900:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	605a      	str	r2, [r3, #4]
 800a90c:	609a      	str	r2, [r3, #8]
 800a90e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a910:	463b      	mov	r3, r7
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]
 800a916:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800a918:	4b1d      	ldr	r3, [pc, #116]	; (800a990 <MX_TIM4_Init+0x94>)
 800a91a:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <MX_TIM4_Init+0x98>)
 800a91c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1799;
 800a91e:	4b1c      	ldr	r3, [pc, #112]	; (800a990 <MX_TIM4_Init+0x94>)
 800a920:	f240 7207 	movw	r2, #1799	; 0x707
 800a924:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a926:	4b1a      	ldr	r3, [pc, #104]	; (800a990 <MX_TIM4_Init+0x94>)
 800a928:	2200      	movs	r2, #0
 800a92a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800a92c:	4b18      	ldr	r3, [pc, #96]	; (800a990 <MX_TIM4_Init+0x94>)
 800a92e:	2264      	movs	r2, #100	; 0x64
 800a930:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a932:	4b17      	ldr	r3, [pc, #92]	; (800a990 <MX_TIM4_Init+0x94>)
 800a934:	2200      	movs	r2, #0
 800a936:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a938:	4b15      	ldr	r3, [pc, #84]	; (800a990 <MX_TIM4_Init+0x94>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a93e:	4814      	ldr	r0, [pc, #80]	; (800a990 <MX_TIM4_Init+0x94>)
 800a940:	f7f8 fce2 	bl	8003308 <HAL_TIM_Base_Init>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d001      	beq.n	800a94e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800a94a:	f7ff fa85 	bl	8009e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a94e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a952:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a954:	f107 0308 	add.w	r3, r7, #8
 800a958:	4619      	mov	r1, r3
 800a95a:	480d      	ldr	r0, [pc, #52]	; (800a990 <MX_TIM4_Init+0x94>)
 800a95c:	f7f8 fe07 	bl	800356e <HAL_TIM_ConfigClockSource>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800a966:	f7ff fa77 	bl	8009e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a96a:	2300      	movs	r3, #0
 800a96c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a96e:	2300      	movs	r3, #0
 800a970:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a972:	463b      	mov	r3, r7
 800a974:	4619      	mov	r1, r3
 800a976:	4806      	ldr	r0, [pc, #24]	; (800a990 <MX_TIM4_Init+0x94>)
 800a978:	f7f9 f81c 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800a982:	f7ff fa69 	bl	8009e58 <Error_Handler>
  }

}
 800a986:	bf00      	nop
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	200005bc 	.word	0x200005bc
 800a994:	40000800 	.word	0x40000800

0800a998 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b086      	sub	sp, #24
 800a99c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a99e:	f107 0308 	add.w	r3, r7, #8
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	605a      	str	r2, [r3, #4]
 800a9a8:	609a      	str	r2, [r3, #8]
 800a9aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9ac:	463b      	mov	r3, r7
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 800a9b4:	4b1d      	ldr	r3, [pc, #116]	; (800aa2c <MX_TIM5_Init+0x94>)
 800a9b6:	4a1e      	ldr	r2, [pc, #120]	; (800aa30 <MX_TIM5_Init+0x98>)
 800a9b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1799;
 800a9ba:	4b1c      	ldr	r3, [pc, #112]	; (800aa2c <MX_TIM5_Init+0x94>)
 800a9bc:	f240 7207 	movw	r2, #1799	; 0x707
 800a9c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9c2:	4b1a      	ldr	r3, [pc, #104]	; (800aa2c <MX_TIM5_Init+0x94>)
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100;
 800a9c8:	4b18      	ldr	r3, [pc, #96]	; (800aa2c <MX_TIM5_Init+0x94>)
 800a9ca:	2264      	movs	r2, #100	; 0x64
 800a9cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a9ce:	4b17      	ldr	r3, [pc, #92]	; (800aa2c <MX_TIM5_Init+0x94>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a9d4:	4b15      	ldr	r3, [pc, #84]	; (800aa2c <MX_TIM5_Init+0x94>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a9da:	4814      	ldr	r0, [pc, #80]	; (800aa2c <MX_TIM5_Init+0x94>)
 800a9dc:	f7f8 fc94 	bl	8003308 <HAL_TIM_Base_Init>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800a9e6:	f7ff fa37 	bl	8009e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a9ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a9f0:	f107 0308 	add.w	r3, r7, #8
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	480d      	ldr	r0, [pc, #52]	; (800aa2c <MX_TIM5_Init+0x94>)
 800a9f8:	f7f8 fdb9 	bl	800356e <HAL_TIM_ConfigClockSource>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800aa02:	f7ff fa29 	bl	8009e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa06:	2300      	movs	r3, #0
 800aa08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800aa0e:	463b      	mov	r3, r7
 800aa10:	4619      	mov	r1, r3
 800aa12:	4806      	ldr	r0, [pc, #24]	; (800aa2c <MX_TIM5_Init+0x94>)
 800aa14:	f7f8 ffce 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800aa1e:	f7ff fa1b 	bl	8009e58 <Error_Handler>
  }

}
 800aa22:	bf00      	nop
 800aa24:	3718      	adds	r7, #24
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	200005fc 	.word	0x200005fc
 800aa30:	40000c00 	.word	0x40000c00

0800aa34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa44:	d116      	bne.n	800aa74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800aa46:	2300      	movs	r3, #0
 800aa48:	617b      	str	r3, [r7, #20]
 800aa4a:	4b36      	ldr	r3, [pc, #216]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	4a35      	ldr	r2, [pc, #212]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	6413      	str	r3, [r2, #64]	; 0x40
 800aa56:	4b33      	ldr	r3, [pc, #204]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5a:	f003 0301 	and.w	r3, r3, #1
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800aa62:	2200      	movs	r2, #0
 800aa64:	2100      	movs	r1, #0
 800aa66:	201c      	movs	r0, #28
 800aa68:	f7f5 fe9d 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800aa6c:	201c      	movs	r0, #28
 800aa6e:	f7f5 feb6 	bl	80007de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800aa72:	e052      	b.n	800ab1a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a2b      	ldr	r2, [pc, #172]	; (800ab28 <HAL_TIM_Base_MspInit+0xf4>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d116      	bne.n	800aaac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800aa7e:	2300      	movs	r3, #0
 800aa80:	613b      	str	r3, [r7, #16]
 800aa82:	4b28      	ldr	r3, [pc, #160]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	4a27      	ldr	r2, [pc, #156]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aa88:	f043 0302 	orr.w	r3, r3, #2
 800aa8c:	6413      	str	r3, [r2, #64]	; 0x40
 800aa8e:	4b25      	ldr	r3, [pc, #148]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	613b      	str	r3, [r7, #16]
 800aa98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	201d      	movs	r0, #29
 800aaa0:	f7f5 fe81 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800aaa4:	201d      	movs	r0, #29
 800aaa6:	f7f5 fe9a 	bl	80007de <HAL_NVIC_EnableIRQ>
}
 800aaaa:	e036      	b.n	800ab1a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a1e      	ldr	r2, [pc, #120]	; (800ab2c <HAL_TIM_Base_MspInit+0xf8>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d116      	bne.n	800aae4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	4b1a      	ldr	r3, [pc, #104]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabe:	4a19      	ldr	r2, [pc, #100]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aac0:	f043 0304 	orr.w	r3, r3, #4
 800aac4:	6413      	str	r3, [r2, #64]	; 0x40
 800aac6:	4b17      	ldr	r3, [pc, #92]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaca:	f003 0304 	and.w	r3, r3, #4
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800aad2:	2200      	movs	r2, #0
 800aad4:	2100      	movs	r1, #0
 800aad6:	201e      	movs	r0, #30
 800aad8:	f7f5 fe65 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800aadc:	201e      	movs	r0, #30
 800aade:	f7f5 fe7e 	bl	80007de <HAL_NVIC_EnableIRQ>
}
 800aae2:	e01a      	b.n	800ab1a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM5)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a11      	ldr	r2, [pc, #68]	; (800ab30 <HAL_TIM_Base_MspInit+0xfc>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d115      	bne.n	800ab1a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60bb      	str	r3, [r7, #8]
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	4a0b      	ldr	r2, [pc, #44]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800aaf8:	f043 0308 	orr.w	r3, r3, #8
 800aafc:	6413      	str	r3, [r2, #64]	; 0x40
 800aafe:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <HAL_TIM_Base_MspInit+0xf0>)
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	f003 0308 	and.w	r3, r3, #8
 800ab06:	60bb      	str	r3, [r7, #8]
 800ab08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	2032      	movs	r0, #50	; 0x32
 800ab10:	f7f5 fe49 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800ab14:	2032      	movs	r0, #50	; 0x32
 800ab16:	f7f5 fe62 	bl	80007de <HAL_NVIC_EnableIRQ>
}
 800ab1a:	bf00      	nop
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	40023800 	.word	0x40023800
 800ab28:	40000400 	.word	0x40000400
 800ab2c:	40000800 	.word	0x40000800
 800ab30:	40000c00 	.word	0x40000c00

0800ab34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800ab38:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab3a:	4a12      	ldr	r2, [pc, #72]	; (800ab84 <MX_USART1_UART_Init+0x50>)
 800ab3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ab3e:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ab44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ab46:	4b0e      	ldr	r3, [pc, #56]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ab52:	4b0b      	ldr	r3, [pc, #44]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ab58:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab5a:	220c      	movs	r2, #12
 800ab5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab5e:	4b08      	ldr	r3, [pc, #32]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab64:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ab6a:	4805      	ldr	r0, [pc, #20]	; (800ab80 <MX_USART1_UART_Init+0x4c>)
 800ab6c:	f7f8 ff7b 	bl	8003a66 <HAL_UART_Init>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ab76:	f7ff f96f 	bl	8009e58 <Error_Handler>
  }

}
 800ab7a:	bf00      	nop
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	200006bc 	.word	0x200006bc
 800ab84:	40011000 	.word	0x40011000

0800ab88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b08a      	sub	sp, #40	; 0x28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab90:	f107 0314 	add.w	r3, r7, #20
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]
 800ab98:	605a      	str	r2, [r3, #4]
 800ab9a:	609a      	str	r2, [r3, #8]
 800ab9c:	60da      	str	r2, [r3, #12]
 800ab9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a1d      	ldr	r2, [pc, #116]	; (800ac1c <HAL_UART_MspInit+0x94>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d134      	bne.n	800ac14 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800abaa:	2300      	movs	r3, #0
 800abac:	613b      	str	r3, [r7, #16]
 800abae:	4b1c      	ldr	r3, [pc, #112]	; (800ac20 <HAL_UART_MspInit+0x98>)
 800abb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb2:	4a1b      	ldr	r2, [pc, #108]	; (800ac20 <HAL_UART_MspInit+0x98>)
 800abb4:	f043 0310 	orr.w	r3, r3, #16
 800abb8:	6453      	str	r3, [r2, #68]	; 0x44
 800abba:	4b19      	ldr	r3, [pc, #100]	; (800ac20 <HAL_UART_MspInit+0x98>)
 800abbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abbe:	f003 0310 	and.w	r3, r3, #16
 800abc2:	613b      	str	r3, [r7, #16]
 800abc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <HAL_UART_MspInit+0x98>)
 800abcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abce:	4a14      	ldr	r2, [pc, #80]	; (800ac20 <HAL_UART_MspInit+0x98>)
 800abd0:	f043 0301 	orr.w	r3, r3, #1
 800abd4:	6313      	str	r3, [r2, #48]	; 0x30
 800abd6:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <HAL_UART_MspInit+0x98>)
 800abd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	60fb      	str	r3, [r7, #12]
 800abe0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800abe2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800abe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abe8:	2302      	movs	r3, #2
 800abea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800abec:	2301      	movs	r3, #1
 800abee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abf0:	2303      	movs	r3, #3
 800abf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800abf4:	2307      	movs	r3, #7
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abf8:	f107 0314 	add.w	r3, r7, #20
 800abfc:	4619      	mov	r1, r3
 800abfe:	4809      	ldr	r0, [pc, #36]	; (800ac24 <HAL_UART_MspInit+0x9c>)
 800ac00:	f7f5 fe2a 	bl	8000858 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ac04:	2200      	movs	r2, #0
 800ac06:	2100      	movs	r1, #0
 800ac08:	2025      	movs	r0, #37	; 0x25
 800ac0a:	f7f5 fdcc 	bl	80007a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ac0e:	2025      	movs	r0, #37	; 0x25
 800ac10:	f7f5 fde5 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800ac14:	bf00      	nop
 800ac16:	3728      	adds	r7, #40	; 0x28
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	40011000 	.word	0x40011000
 800ac20:	40023800 	.word	0x40023800
 800ac24:	40020000 	.word	0x40020000

0800ac28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ac28:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ac60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ac2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ac2e:	e003      	b.n	800ac38 <LoopCopyDataInit>

0800ac30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ac30:	4b0c      	ldr	r3, [pc, #48]	; (800ac64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ac32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ac34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ac36:	3104      	adds	r1, #4

0800ac38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ac38:	480b      	ldr	r0, [pc, #44]	; (800ac68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ac3a:	4b0c      	ldr	r3, [pc, #48]	; (800ac6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ac3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ac3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ac40:	d3f6      	bcc.n	800ac30 <CopyDataInit>
  ldr  r2, =_sbss
 800ac42:	4a0b      	ldr	r2, [pc, #44]	; (800ac70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ac44:	e002      	b.n	800ac4c <LoopFillZerobss>

0800ac46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ac46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ac48:	f842 3b04 	str.w	r3, [r2], #4

0800ac4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ac4c:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ac4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ac50:	d3f9      	bcc.n	800ac46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ac52:	f7ff fd83 	bl	800a75c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ac56:	f000 f811 	bl	800ac7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ac5a:	f7ff f84f 	bl	8009cfc <main>
  bx  lr    
 800ac5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ac60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ac64:	0800b338 	.word	0x0800b338
  ldr  r0, =_sdata
 800ac68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ac6c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800ac70:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800ac74:	200006fc 	.word	0x200006fc

0800ac78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ac78:	e7fe      	b.n	800ac78 <ADC_IRQHandler>
	...

0800ac7c <__libc_init_array>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	4e0d      	ldr	r6, [pc, #52]	; (800acb4 <__libc_init_array+0x38>)
 800ac80:	4c0d      	ldr	r4, [pc, #52]	; (800acb8 <__libc_init_array+0x3c>)
 800ac82:	1ba4      	subs	r4, r4, r6
 800ac84:	10a4      	asrs	r4, r4, #2
 800ac86:	2500      	movs	r5, #0
 800ac88:	42a5      	cmp	r5, r4
 800ac8a:	d109      	bne.n	800aca0 <__libc_init_array+0x24>
 800ac8c:	4e0b      	ldr	r6, [pc, #44]	; (800acbc <__libc_init_array+0x40>)
 800ac8e:	4c0c      	ldr	r4, [pc, #48]	; (800acc0 <__libc_init_array+0x44>)
 800ac90:	f000 f820 	bl	800acd4 <_init>
 800ac94:	1ba4      	subs	r4, r4, r6
 800ac96:	10a4      	asrs	r4, r4, #2
 800ac98:	2500      	movs	r5, #0
 800ac9a:	42a5      	cmp	r5, r4
 800ac9c:	d105      	bne.n	800acaa <__libc_init_array+0x2e>
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aca4:	4798      	blx	r3
 800aca6:	3501      	adds	r5, #1
 800aca8:	e7ee      	b.n	800ac88 <__libc_init_array+0xc>
 800acaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800acae:	4798      	blx	r3
 800acb0:	3501      	adds	r5, #1
 800acb2:	e7f2      	b.n	800ac9a <__libc_init_array+0x1e>
 800acb4:	0800b330 	.word	0x0800b330
 800acb8:	0800b330 	.word	0x0800b330
 800acbc:	0800b330 	.word	0x0800b330
 800acc0:	0800b334 	.word	0x0800b334

0800acc4 <memset>:
 800acc4:	4402      	add	r2, r0
 800acc6:	4603      	mov	r3, r0
 800acc8:	4293      	cmp	r3, r2
 800acca:	d100      	bne.n	800acce <memset+0xa>
 800accc:	4770      	bx	lr
 800acce:	f803 1b01 	strb.w	r1, [r3], #1
 800acd2:	e7f9      	b.n	800acc8 <memset+0x4>

0800acd4 <_init>:
 800acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd6:	bf00      	nop
 800acd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acda:	bc08      	pop	{r3}
 800acdc:	469e      	mov	lr, r3
 800acde:	4770      	bx	lr

0800ace0 <_fini>:
 800ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace2:	bf00      	nop
 800ace4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ace6:	bc08      	pop	{r3}
 800ace8:	469e      	mov	lr, r3
 800acea:	4770      	bx	lr
